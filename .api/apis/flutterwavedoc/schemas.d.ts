declare const BankAccountResolvePost: {
    readonly body: {
        readonly type: "object";
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly currency: {
                    readonly type: "string";
                    readonly description: "ISO 4217 currency code.";
                    readonly default: "NGN";
                    readonly readOnly: true;
                    readonly examples: readonly ["NGN"];
                };
                readonly account: {
                    readonly type: "object";
                    readonly required: readonly ["code", "number"];
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                            readonly description: "The bank or institution code.";
                            readonly minLength: 3;
                            readonly maxLength: 10;
                            readonly pattern: "^\\d+$";
                            readonly examples: readonly ["044"];
                        };
                        readonly number: {
                            readonly type: "string";
                            readonly description: "The bank account number.";
                            readonly minLength: 10;
                            readonly maxLength: 10;
                            readonly pattern: "^\\d+$";
                            readonly examples: readonly ["0690000031"];
                        };
                    };
                };
            };
            readonly required: readonly ["currency", "account"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly currency: {
                    readonly type: "string";
                    readonly description: "ISO 4217 currency code.";
                    readonly default: "GBP";
                    readonly readOnly: true;
                    readonly examples: readonly ["GBP"];
                };
                readonly account: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["code", "name", "number", "type"];
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The bank or institution code.";
                                readonly minLength: 2;
                                readonly maxLength: 10;
                                readonly examples: readonly ["044"];
                            };
                            readonly number: {
                                readonly type: "string";
                                readonly description: "The bank account number.";
                                readonly minLength: 4;
                                readonly maxLength: 50;
                                readonly examples: readonly ["0690000031"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The bank account type.";
                                readonly default: "personal";
                                readonly readOnly: true;
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly required: readonly ["first", "last"];
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["business_name", "code", "number", "type"];
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The bank or institution code.";
                                readonly minLength: 2;
                                readonly maxLength: 10;
                                readonly examples: readonly ["044"];
                            };
                            readonly number: {
                                readonly type: "string";
                                readonly description: "The bank account number.";
                                readonly minLength: 4;
                                readonly maxLength: 50;
                                readonly examples: readonly ["0690000031"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The bank account type.";
                                readonly default: "corporate";
                                readonly readOnly: true;
                                readonly examples: readonly ["corporate"];
                            };
                            readonly business_name: {
                                readonly type: "string";
                                readonly description: "The business name attached to the bank account.";
                                readonly minLength: 2;
                                readonly maxLength: 50;
                                readonly examples: readonly ["Ajadi & Sons Ltd."];
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly individual: "#/components/schemas/gbp_bank_individual";
                            readonly corporate: "#/components/schemas/gbp_bank_corporate";
                        };
                    };
                };
            };
            readonly required: readonly ["currency", "account"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly currency: {
                    readonly type: "string";
                    readonly description: "ISO 4217 currency code.";
                    readonly default: "USD";
                    readonly readOnly: true;
                    readonly examples: readonly ["USD"];
                };
                readonly account: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["code", "country", "number"];
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The bank or institution code.";
                                readonly minLength: 2;
                                readonly maxLength: 10;
                                readonly examples: readonly ["044"];
                            };
                            readonly number: {
                                readonly type: "string";
                                readonly description: "The bank account number.";
                                readonly minLength: 4;
                                readonly maxLength: 50;
                                readonly examples: readonly ["0690000031"];
                            };
                            readonly country: {
                                readonly type: "string";
                                readonly default: "NG";
                                readonly readOnly: true;
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "country";
                        readonly mapping: {
                            readonly NG: "#/components/schemas/usd_bank_ng";
                        };
                    };
                };
            };
            readonly required: readonly ["currency", "account"];
        }];
        readonly discriminator: {
            readonly propertyName: "currency";
            readonly mapping: {
                readonly NGN: "#/components/schemas/ngn_bank_account_resolve";
                readonly GBP: "#/components/schemas/gbp_bank_account_resolve";
                readonly USD: "#/components/schemas/usd_bank_account_resolve";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly bank_code: {
                            readonly type: "string";
                            readonly description: "The bank code.";
                            readonly examples: readonly ["044"];
                        };
                        readonly account_number: {
                            readonly type: "string";
                            readonly description: "The bank account number.";
                            readonly examples: readonly ["0690000040"];
                        };
                        readonly account_name: {
                            readonly type: "string";
                            readonly description: "The bank account name.";
                            readonly examples: readonly ["Alex James"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const BankBranchesGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "The Bank's unique ID.";
                    readonly type: "string";
                    readonly examples: readonly ["bnk_xC78Ibn"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "The bank branch ID.";
                                readonly format: "string";
                                readonly examples: readonly ["brh_Ka89d1"];
                            };
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The bank code.";
                                readonly examples: readonly ["GH190101"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The bank name.";
                                readonly examples: readonly ["STANBIC BANK GHANA LTD-ACCRA MAIN"];
                            };
                            readonly swift_code: {
                                readonly type: "string";
                                readonly description: "The SWIFT code for the bank.";
                                readonly examples: readonly ["SBICGHAC"];
                            };
                            readonly bic: {
                                readonly type: "string";
                                readonly description: "The Bank Identification Code (BIC).";
                                readonly examples: readonly ["SBICGHACXXX"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const BanksGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly country: {
                    readonly type: "string";
                    readonly description: "ISO 2 country code.";
                    readonly enum: readonly ["CM", "CI", "CG", "EG", "ET", "GA", "GH", "IN", "KE", "MW", "NG", "RW", "SL", "SN", "TD", "TZ", "UG", "US", "ZA", "ZM"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["country"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "The bank ID.";
                                readonly format: "string";
                                readonly examples: readonly ["bnk_cYjd92Qk"];
                            };
                            readonly code: {
                                readonly type: "string";
                                readonly description: "The bank code.";
                                readonly examples: readonly ["035"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The bank name.";
                                readonly examples: readonly ["Access Bank"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ChargebackPut: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly status: {
                readonly type: "string";
                readonly description: "The status indicates the final resolution of a dispute or request, showing whether it has been accepted or declined.";
                readonly enum: readonly ["accepted", "declined"];
                readonly examples: readonly ["accepted"];
            };
            readonly uploaded_proof: {
                readonly type: "string";
                readonly description: "Link to proof against chargeback";
                readonly examples: readonly ["https://example.com/proofs/proof_123.pdf"];
            };
            readonly comment: {
                readonly type: "string";
                readonly description: "Additional comments for the chargeback";
                readonly examples: readonly [""];
            };
            readonly provider: {
                readonly type: "string";
                readonly description: "Provider for the chargeback";
                readonly examples: readonly ["Visa"];
            };
            readonly arn: {
                readonly type: "string";
                readonly description: "Acquirer reference number for transaction";
                readonly examples: readonly ["1243453453434234534443423"];
            };
            readonly due_datetime: {
                readonly type: "string";
                readonly description: "The due_datetime specifies the exact date and time by which an action or response is required. This is typically used to set deadlines for submitting documentation or responding to a chargeback.";
                readonly format: "date-time";
                readonly examples: readonly ["2025-05-30T23:59:59Z"];
            };
            readonly proof_data: {
                readonly type: "string";
                readonly description: "Base64 encoded string of proof against chargeback";
                readonly examples: readonly ["JVBERi0xLjIgCjkgMAojX"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "ID of the chargeback";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "A chargeback object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the chargeback";
                            readonly examples: readonly [1];
                        };
                        readonly charge_id: {
                            readonly type: "string";
                            readonly description: "ID of the charge tied to this chargeback";
                            readonly examples: readonly ["chg_eahdhfThdHsgaSra"];
                        };
                        readonly amount: {
                            readonly description: "Amount to be charged back";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly stage: {
                            readonly type: "string";
                            readonly description: "The stage describes the current phase of a chargeback dispute\n\n`new` `second` `pre-arbitration` `arbitration` `invalid`";
                            readonly enum: readonly ["new", "second", "pre-arbitration", "arbitration", "invalid"];
                            readonly examples: readonly ["new"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status field tracks the current state or outcome of a chargeback dispute, providing a comprehensive overview of its lifecycle.\n\n`pending` `accepted` `declined` `initiated` `won` `lost` `reversed` `new`";
                            readonly enum: readonly ["pending", "accepted", "declined", "initiated", "won", "lost", "reversed", "new"];
                            readonly examples: readonly ["new"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type categorizes the chargeback based on whether it originates from a transaction within the same country (local) or across different countries (international).\n\n`local` `international`";
                            readonly enum: readonly ["local", "international"];
                            readonly examples: readonly ["local"];
                        };
                        readonly due_datetime: {
                            readonly type: "string";
                            readonly description: "The due_datetime specifies the exact date and time by which an action or response is required. This is typically used to set deadlines for submitting documentation or responding to a chargeback.";
                            readonly format: "date-time";
                            readonly examples: readonly ["2025-05-30T23:59:59Z"];
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The created_datetime indicates the exact date and time when the chargeback record was initially created in the system. This timestamp helps in tracking the age of the dispute.";
                            readonly format: "date-time";
                            readonly examples: readonly ["2025-06-01T23:59:59Z"];
                        };
                        readonly updated_datetime: {
                            readonly type: "string";
                            readonly description: "The updated_datetime specifies the most recent date and time when any information related to the chargeback record was modified or updated. This helps in tracking the last activity on the dispute.";
                            readonly format: "date-time";
                            readonly examples: readonly ["2025-06-01T23:59:59Z"];
                        };
                        readonly settlement_id: {
                            readonly type: "string";
                            readonly description: "ID of the settlement tied to this chargeback";
                            readonly examples: readonly ["SETTLEMENT-XYZ-12345"];
                        };
                        readonly uploaded_proof: {
                            readonly type: "string";
                            readonly description: "Link to proof against chargeback";
                            readonly examples: readonly ["https://example.com/proofs/chargeback-ABC-67890.pdf"];
                        };
                        readonly comment: {
                            readonly type: "string";
                            readonly description: "Additional comments for the chargeback";
                            readonly examples: readonly ["Customer claims service not rendered. Attached signed delivery confirmation."];
                        };
                        readonly provider: {
                            readonly type: "string";
                            readonly description: "Provider for the chargeback";
                            readonly examples: readonly ["Visa"];
                        };
                        readonly arn: {
                            readonly type: "string";
                            readonly description: "Acquirer reference number for transaction";
                            readonly examples: readonly ["70010000000000000000001"];
                        };
                        readonly initiator: {
                            readonly type: "string";
                            readonly description: "Initiator of the chargeback";
                            readonly examples: readonly ["Cardholder"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ChargebacksGetById: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "ID of the chargeback";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "A chargeback object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the chargeback";
                            readonly examples: readonly [1];
                        };
                        readonly charge_id: {
                            readonly type: "string";
                            readonly description: "ID of the charge tied to this chargeback";
                            readonly examples: readonly ["chg_eahdhfThdHsgaSra"];
                        };
                        readonly amount: {
                            readonly description: "Amount to be charged back";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly stage: {
                            readonly type: "string";
                            readonly description: "The stage describes the current phase of a chargeback dispute\n\n`new` `second` `pre-arbitration` `arbitration` `invalid`";
                            readonly enum: readonly ["new", "second", "pre-arbitration", "arbitration", "invalid"];
                            readonly examples: readonly ["new"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status field tracks the current state or outcome of a chargeback dispute, providing a comprehensive overview of its lifecycle.\n\n`pending` `accepted` `declined` `initiated` `won` `lost` `reversed` `new`";
                            readonly enum: readonly ["pending", "accepted", "declined", "initiated", "won", "lost", "reversed", "new"];
                            readonly examples: readonly ["new"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type categorizes the chargeback based on whether it originates from a transaction within the same country (local) or across different countries (international).\n\n`local` `international`";
                            readonly enum: readonly ["local", "international"];
                            readonly examples: readonly ["local"];
                        };
                        readonly due_datetime: {
                            readonly type: "string";
                            readonly description: "The due_datetime specifies the exact date and time by which an action or response is required. This is typically used to set deadlines for submitting documentation or responding to a chargeback.";
                            readonly format: "date-time";
                            readonly examples: readonly ["2025-05-30T23:59:59Z"];
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The created_datetime indicates the exact date and time when the chargeback record was initially created in the system. This timestamp helps in tracking the age of the dispute.";
                            readonly format: "date-time";
                            readonly examples: readonly ["2025-06-01T23:59:59Z"];
                        };
                        readonly updated_datetime: {
                            readonly type: "string";
                            readonly description: "The updated_datetime specifies the most recent date and time when any information related to the chargeback record was modified or updated. This helps in tracking the last activity on the dispute.";
                            readonly format: "date-time";
                            readonly examples: readonly ["2025-06-01T23:59:59Z"];
                        };
                        readonly settlement_id: {
                            readonly type: "string";
                            readonly description: "ID of the settlement tied to this chargeback";
                            readonly examples: readonly ["SETTLEMENT-XYZ-12345"];
                        };
                        readonly uploaded_proof: {
                            readonly type: "string";
                            readonly description: "Link to proof against chargeback";
                            readonly examples: readonly ["https://example.com/proofs/chargeback-ABC-67890.pdf"];
                        };
                        readonly comment: {
                            readonly type: "string";
                            readonly description: "Additional comments for the chargeback";
                            readonly examples: readonly ["Customer claims service not rendered. Attached signed delivery confirmation."];
                        };
                        readonly provider: {
                            readonly type: "string";
                            readonly description: "Provider for the chargeback";
                            readonly examples: readonly ["Visa"];
                        };
                        readonly arn: {
                            readonly type: "string";
                            readonly description: "Acquirer reference number for transaction";
                            readonly examples: readonly ["70010000000000000000001"];
                        };
                        readonly initiator: {
                            readonly type: "string";
                            readonly description: "Initiator of the chargeback";
                            readonly examples: readonly ["Cardholder"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ChargebacksList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
                readonly from: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-04-21T10:55:16Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The start date and time for a period. This parameter is used in conjunction with the 'to' parameter to define a time range. The value should be in ISO 8601 format.";
                };
                readonly to: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-05-21T10:48:18Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The end date and time for a period. This parameter is used in conjunction with the 'from' parameter to define a time range. The value should be in **ISO 8601 format**.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 10;
                    readonly items: {
                        readonly type: "object";
                        readonly description: "A chargeback object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the chargeback";
                                readonly examples: readonly [1];
                            };
                            readonly charge_id: {
                                readonly type: "string";
                                readonly description: "ID of the charge tied to this chargeback";
                                readonly examples: readonly ["chg_eahdhfThdHsgaSra"];
                            };
                            readonly amount: {
                                readonly description: "Amount to be charged back";
                                readonly type: "number";
                                readonly format: "decimal";
                                readonly minimum: 0.01;
                                readonly examples: readonly [12.34];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly stage: {
                                readonly type: "string";
                                readonly description: "The stage describes the current phase of a chargeback dispute\n\n`new` `second` `pre-arbitration` `arbitration` `invalid`";
                                readonly enum: readonly ["new", "second", "pre-arbitration", "arbitration", "invalid"];
                                readonly examples: readonly ["new"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "The status field tracks the current state or outcome of a chargeback dispute, providing a comprehensive overview of its lifecycle.\n\n`pending` `accepted` `declined` `initiated` `won` `lost` `reversed` `new`";
                                readonly enum: readonly ["pending", "accepted", "declined", "initiated", "won", "lost", "reversed", "new"];
                                readonly examples: readonly ["new"];
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type categorizes the chargeback based on whether it originates from a transaction within the same country (local) or across different countries (international).\n\n`local` `international`";
                                readonly enum: readonly ["local", "international"];
                                readonly examples: readonly ["local"];
                            };
                            readonly due_datetime: {
                                readonly type: "string";
                                readonly description: "The due_datetime specifies the exact date and time by which an action or response is required. This is typically used to set deadlines for submitting documentation or responding to a chargeback.";
                                readonly format: "date-time";
                                readonly examples: readonly ["2025-05-30T23:59:59Z"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly description: "The created_datetime indicates the exact date and time when the chargeback record was initially created in the system. This timestamp helps in tracking the age of the dispute.";
                                readonly format: "date-time";
                                readonly examples: readonly ["2025-06-01T23:59:59Z"];
                            };
                            readonly updated_datetime: {
                                readonly type: "string";
                                readonly description: "The updated_datetime specifies the most recent date and time when any information related to the chargeback record was modified or updated. This helps in tracking the last activity on the dispute.";
                                readonly format: "date-time";
                                readonly examples: readonly ["2025-06-01T23:59:59Z"];
                            };
                            readonly settlement_id: {
                                readonly type: "string";
                                readonly description: "ID of the settlement tied to this chargeback";
                                readonly examples: readonly ["SETTLEMENT-XYZ-12345"];
                            };
                            readonly uploaded_proof: {
                                readonly type: "string";
                                readonly description: "Link to proof against chargeback";
                                readonly examples: readonly ["https://example.com/proofs/chargeback-ABC-67890.pdf"];
                            };
                            readonly comment: {
                                readonly type: "string";
                                readonly description: "Additional comments for the chargeback";
                                readonly examples: readonly ["Customer claims service not rendered. Attached signed delivery confirmation."];
                            };
                            readonly provider: {
                                readonly type: "string";
                                readonly description: "Provider for the chargeback";
                                readonly examples: readonly ["Visa"];
                            };
                            readonly arn: {
                                readonly type: "string";
                                readonly description: "Acquirer reference number for transaction";
                                readonly examples: readonly ["70010000000000000000001"];
                            };
                            readonly initiator: {
                                readonly type: "string";
                                readonly description: "Initiator of the chargeback";
                                readonly examples: readonly ["Cardholder"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ChargebacksPost: {
    readonly body: {
        readonly type: "object";
        readonly description: "A chargeback input object";
        readonly required: readonly ["charge_id", "amount", "expiry", "type"];
        readonly properties: {
            readonly charge_id: {
                readonly type: "string";
                readonly description: "ID of the charge tied to this chargeback";
                readonly examples: readonly ["chg_eahdhfThdHsgaSra"];
            };
            readonly amount: {
                readonly description: "Amount to be charged back";
                readonly type: "number";
                readonly format: "decimal";
                readonly minimum: 0.01;
                readonly examples: readonly [12.34];
            };
            readonly stage: {
                readonly type: "string";
                readonly description: "The stage describes the current phase of a chargeback dispute.";
                readonly enum: readonly ["new", "second", "pre-arbitration", "arbitration"];
                readonly examples: readonly ["new"];
            };
            readonly status: {
                readonly type: "string";
                readonly description: "The status indicates the current state or progress of the chargeback, showing whether it's awaiting action or has been formally started.";
                readonly enum: readonly ["pending", "initiated"];
                readonly examples: readonly ["pending"];
            };
            readonly type: {
                readonly type: "string";
                readonly description: "The type categorizes the chargeback based on whether it originates from a transaction within the same country (local) or across different countries (international).";
                readonly enum: readonly ["local", "international"];
                readonly examples: readonly ["international"];
            };
            readonly uploaded_proof: {
                readonly type: "string";
                readonly description: "Link to proof against chargeback";
                readonly examples: readonly ["https://example.com/proofs/proof_123.pdf"];
            };
            readonly comment: {
                readonly type: "string";
                readonly description: "Additional comments for the chargeback";
                readonly examples: readonly ["Customer claims the charge was unauthorized."];
            };
            readonly provider: {
                readonly type: "string";
                readonly description: "Provider for the chargeback";
                readonly examples: readonly ["Visa"];
            };
            readonly arn: {
                readonly type: "string";
                readonly description: "Acquirer reference number for transaction";
                readonly examples: readonly ["1243453453434234534443423"];
            };
            readonly initiator: {
                readonly type: "string";
                readonly description: "Initiator of the chargeback";
                readonly examples: readonly ["customer"];
            };
            readonly expiry: {
                readonly type: "integer";
                readonly format: "int64";
                readonly description: "Duration of chargeback in hours used in calculating due_datetime";
                readonly examples: readonly [72];
                readonly minimum: -9223372036854776000;
                readonly maximum: 9223372036854776000;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly data: {
                    readonly type: "object";
                    readonly description: "A chargeback object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the chargeback";
                            readonly examples: readonly [1];
                        };
                        readonly charge_id: {
                            readonly type: "string";
                            readonly description: "ID of the charge tied to this chargeback";
                            readonly examples: readonly ["chg_eahdhfThdHsgaSra"];
                        };
                        readonly amount: {
                            readonly description: "Amount to be charged back";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly stage: {
                            readonly type: "string";
                            readonly description: "The stage describes the current phase of a chargeback dispute\n\n`new` `second` `pre-arbitration` `arbitration` `invalid`";
                            readonly enum: readonly ["new", "second", "pre-arbitration", "arbitration", "invalid"];
                            readonly examples: readonly ["new"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status field tracks the current state or outcome of a chargeback dispute, providing a comprehensive overview of its lifecycle.\n\n`pending` `accepted` `declined` `initiated` `won` `lost` `reversed` `new`";
                            readonly enum: readonly ["pending", "accepted", "declined", "initiated", "won", "lost", "reversed", "new"];
                            readonly examples: readonly ["new"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type categorizes the chargeback based on whether it originates from a transaction within the same country (local) or across different countries (international).\n\n`local` `international`";
                            readonly enum: readonly ["local", "international"];
                            readonly examples: readonly ["local"];
                        };
                        readonly due_datetime: {
                            readonly type: "string";
                            readonly description: "The due_datetime specifies the exact date and time by which an action or response is required. This is typically used to set deadlines for submitting documentation or responding to a chargeback.";
                            readonly format: "date-time";
                            readonly examples: readonly ["2025-05-30T23:59:59Z"];
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The created_datetime indicates the exact date and time when the chargeback record was initially created in the system. This timestamp helps in tracking the age of the dispute.";
                            readonly format: "date-time";
                            readonly examples: readonly ["2025-06-01T23:59:59Z"];
                        };
                        readonly updated_datetime: {
                            readonly type: "string";
                            readonly description: "The updated_datetime specifies the most recent date and time when any information related to the chargeback record was modified or updated. This helps in tracking the last activity on the dispute.";
                            readonly format: "date-time";
                            readonly examples: readonly ["2025-06-01T23:59:59Z"];
                        };
                        readonly settlement_id: {
                            readonly type: "string";
                            readonly description: "ID of the settlement tied to this chargeback";
                            readonly examples: readonly ["SETTLEMENT-XYZ-12345"];
                        };
                        readonly uploaded_proof: {
                            readonly type: "string";
                            readonly description: "Link to proof against chargeback";
                            readonly examples: readonly ["https://example.com/proofs/chargeback-ABC-67890.pdf"];
                        };
                        readonly comment: {
                            readonly type: "string";
                            readonly description: "Additional comments for the chargeback";
                            readonly examples: readonly ["Customer claims service not rendered. Attached signed delivery confirmation."];
                        };
                        readonly provider: {
                            readonly type: "string";
                            readonly description: "Provider for the chargeback";
                            readonly examples: readonly ["Visa"];
                        };
                        readonly arn: {
                            readonly type: "string";
                            readonly description: "Acquirer reference number for transaction";
                            readonly examples: readonly ["70010000000000000000001"];
                        };
                        readonly initiator: {
                            readonly type: "string";
                            readonly description: "Initiator of the chargeback";
                            readonly examples: readonly ["Cardholder"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ChargesGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the charge.";
                    readonly type: "string";
                    readonly examples: readonly ["chg_EFAHCzELJb"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the charge.";
                            readonly type: "string";
                            readonly examples: readonly ["chg_nONgeAGY97"];
                        };
                        readonly amount: {
                            readonly description: "The payment amount in decimals.";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly fees: {
                            readonly type: "array";
                            readonly description: "Fees charged on payment amount";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                        readonly examples: readonly ["vat"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The fee amount in decimal format.";
                                        readonly examples: readonly [12.3];
                                    };
                                };
                            };
                        };
                        readonly billing_details: {
                            readonly type: "object";
                            readonly description: "The customer's billing information.";
                            readonly properties: {
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Customer's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Customer's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The customer's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer.";
                            readonly type: "string";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly description: {
                            readonly description: "The charge's description.";
                            readonly type: "string";
                        };
                        readonly disputed: {
                            readonly description: "Boolean indicating if the charge was disputed.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly settled: {
                            readonly description: "Boolean indicating if the transaction has been settled.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly settlement_id: {
                            readonly description: "Id for the settlement the transaction belongs to.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly next_action: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "redirect_url";
                                        readonly readOnly: true;
                                    };
                                    readonly redirect_url: {
                                        readonly type: "object";
                                        readonly required: readonly ["url"];
                                        readonly properties: {
                                            readonly url: {
                                                readonly type: "string";
                                                readonly description: "Payment screen URL to redirect customer to.";
                                                readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "requires_additional_fields"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_additional_fields";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_additional_fields: {
                                        readonly type: "object";
                                        readonly required: readonly ["fields"];
                                        readonly properties: {
                                            readonly fields: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly maxItems: 50;
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_pin";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_pin: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_requery";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_requery: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_otp";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_otp: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "payment_instruction"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "payment_instruction";
                                        readonly readOnly: true;
                                    };
                                    readonly payment_instruction: {
                                        readonly type: "object";
                                        readonly required: readonly ["note"];
                                        readonly properties: {
                                            readonly note: {
                                                readonly type: "string";
                                                readonly description: "Custom field containing the payment instruction.";
                                                readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_capture";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_capture: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_bank_transfer";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly type: "string";
                                                readonly description: "The account number designated for receiving payments.";
                                            };
                                            readonly account_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The Bank name.";
                                            };
                                            readonly account_expiration_datetime: {
                                                readonly type: "string";
                                                readonly description: "Specifies when the virtual account expires.";
                                                readonly format: "date-time";
                                            };
                                            readonly note: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                    readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                    readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                    readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                    readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                    readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                    readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                    readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                };
                            };
                        };
                        readonly payment_method_details: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["card", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "card";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly card: {
                                        readonly type: "object";
                                        readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                        readonly properties: {
                                            readonly expiry_month: {
                                                readonly type: "integer";
                                                readonly description: "Expiry month of the card.";
                                                readonly examples: readonly ["09"];
                                            };
                                            readonly expiry_year: {
                                                readonly type: "integer";
                                                readonly description: "Expiry year of the card.";
                                                readonly examples: readonly ["32"];
                                            };
                                            readonly first6: {
                                                readonly type: "string";
                                                readonly description: "Bank identification number (BIN) of the card.";
                                                readonly minLength: 6;
                                                readonly maxLength: 6;
                                                readonly examples: readonly ["123412"];
                                            };
                                            readonly last4: {
                                                readonly type: "string";
                                                readonly description: "The last four digits of the card number.";
                                                readonly minLength: 4;
                                                readonly maxLength: 4;
                                                readonly examples: readonly ["1234"];
                                            };
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                readonly examples: readonly ["MASTERCARD"];
                                            };
                                            readonly billing_address: {
                                                readonly type: "object";
                                                readonly description: "Customer address information.";
                                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                readonly properties: {
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the city.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                    readonly country: {
                                                        readonly description: "ISO2 country code";
                                                        readonly type: "string";
                                                        readonly pattern: "^[A-Z]{2}$";
                                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                        readonly examples: readonly ["US"];
                                                    };
                                                    readonly line1: {
                                                        readonly type: "string";
                                                        readonly description: "The first line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["123 Main Street"];
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                        readonly description: "The second line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["Apt 4B"];
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["10001"];
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "The state or region.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                };
                                            };
                                            readonly cof: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                        readonly examples: readonly [true];
                                                    };
                                                    readonly agreement_id: {
                                                        readonly type: "string";
                                                        readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["Agreement00w02W1"];
                                                    };
                                                    readonly recurring_amount_variability: {
                                                        readonly type: "string";
                                                        readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                        readonly enum: readonly ["VARIABLE"];
                                                        readonly examples: readonly ["VARIABLE"];
                                                    };
                                                    readonly agreement_type: {
                                                        readonly type: "string";
                                                        readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                        readonly enum: readonly ["UNSCHEDULED"];
                                                        readonly examples: readonly ["UNSCHEDULED"];
                                                        readonly description: "`UNSCHEDULED`";
                                                    };
                                                    readonly trace_id: {
                                                        readonly type: "string";
                                                        readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["123456789"];
                                                    };
                                                };
                                            };
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "Name on the card";
                                                readonly examples: readonly ["Alex James"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_account";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_account: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "mobile_money", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "phone_number", "country_code"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The mobile network of the customer's phone number.";
                                                readonly examples: readonly ["MTN"];
                                            };
                                            readonly country_code: {
                                                readonly type: "string";
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly examples: readonly ["233"];
                                            };
                                            readonly phone_number: {
                                                readonly type: "string";
                                                readonly description: "The phone number of customer.";
                                                readonly examples: readonly ["9012345678"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "opay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly opay: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "applepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly applepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "googlepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly googlepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "ussd";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly ussd: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly account_bank: {
                                                readonly type: "string";
                                                readonly description: "The bank code of the USSD string to generate.";
                                                readonly examples: readonly ["050"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["bank_transfer", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_transfer";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_type"];
                                        readonly properties: {
                                            readonly account_expires_in: {
                                                readonly type: "integer";
                                                readonly description: "The expiry time of the virtual account.";
                                                readonly maximum: 432000;
                                                readonly examples: readonly [360];
                                            };
                                            readonly account_display_name: {
                                                readonly type: "string";
                                                readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                readonly minLength: 3;
                                                readonly maxLength: 256;
                                                readonly examples: readonly ["Alex James"];
                                            };
                                            readonly account_type: {
                                                readonly type: "string";
                                                readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                readonly enum: readonly ["static", "dynamic"];
                                                readonly examples: readonly ["static"];
                                            };
                                            readonly originator_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's Bank name";
                                                readonly examples: readonly ["Mock Bank"];
                                            };
                                            readonly originator_account_number: {
                                                readonly type: "string";
                                                readonly description: "The Sender's masked account number";
                                                readonly examples: readonly ["002*******78"];
                                            };
                                            readonly originator_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's name";
                                                readonly examples: readonly ["Jane Doe"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly card: "#/components/schemas/card_payment_method";
                                    readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                    readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                    readonly opay: "#/components/schemas/opay_payment_method";
                                    readonly applepay: "#/components/schemas/applepay_payment_method";
                                    readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                    readonly ussd: "#/components/schemas/ussd_payment_method";
                                    readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                };
                            };
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to.";
                            readonly examples: readonly ["https://www.google.com"];
                        };
                        readonly refunded: {
                            readonly description: "Boolean indicating if the transaction has been refunded.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the charge.\n\n`succeeded` `pending` `failed` `voided`";
                            readonly enum: readonly ["succeeded", "pending", "failed", "voided"];
                            readonly examples: readonly ["succeeded"];
                        };
                        readonly processor_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "\\d{2}";
                                    readonly "x-pattern-message": "must be two digits";
                                };
                            };
                            readonly enum: readonly [{
                                readonly type: "approved";
                                readonly code: "00";
                            }, {
                                readonly type: "refer_to_issuer";
                                readonly code: "01";
                            }, {
                                readonly type: "refer_to_issuer_special_condition";
                                readonly code: "02";
                            }, {
                                readonly type: "invalid_merchant";
                                readonly code: "03";
                            }, {
                                readonly type: "pick_up_card_no_fraud";
                                readonly code: "04";
                            }, {
                                readonly type: "do_not_honor";
                                readonly code: "05";
                            }, {
                                readonly type: "error";
                                readonly code: "06";
                            }, {
                                readonly type: "pick_up_card_fraud";
                                readonly code: "07";
                            }, {
                                readonly type: "partial_approval";
                                readonly code: "10";
                            }, {
                                readonly type: "invalid_transaction";
                                readonly code: "12";
                            }, {
                                readonly type: "invalid_amount";
                                readonly code: "13";
                            }, {
                                readonly type: "invalid_account_number";
                                readonly code: "14";
                            }, {
                                readonly type: "no_such_issuer";
                                readonly code: "15";
                            }, {
                                readonly type: "reenter_transaction";
                                readonly code: "19";
                            }, {
                                readonly type: "no_action_taken";
                                readonly code: "21";
                            }, {
                                readonly type: "unable_to_locate_record_in_file";
                                readonly code: "25";
                            }, {
                                readonly type: "file_temporarily_not_available";
                                readonly code: "28";
                            }, {
                                readonly type: "lost_card_pick_up";
                                readonly code: "41";
                            }, {
                                readonly type: "stolen_card_pick_up";
                                readonly code: "43";
                            }, {
                                readonly type: "insufficient_funds";
                                readonly code: "51";
                            }, {
                                readonly type: "no_checking_account";
                                readonly code: "52";
                            }, {
                                readonly type: "no_savings_account";
                                readonly code: "53";
                            }, {
                                readonly type: "expired_card";
                                readonly code: "54";
                            }, {
                                readonly type: "incorrect_pin";
                                readonly code: "55";
                            }, {
                                readonly type: "transaction_not_permitted_card";
                                readonly code: "57";
                            }, {
                                readonly type: "transaction_not_permitted_terminal";
                                readonly code: "58";
                            }, {
                                readonly type: "suspected_fraud";
                                readonly code: "59";
                            }, {
                                readonly type: "exceeds_approval_amount_limit";
                                readonly code: "61";
                            }, {
                                readonly type: "invalid_restricted_service_code";
                                readonly code: "62";
                            }, {
                                readonly type: "security_violation";
                                readonly code: "63";
                            }, {
                                readonly type: "transaction_does_not_fulfill_aml_req";
                                readonly code: "64";
                            }, {
                                readonly type: "exceeds_withdrawal_limit";
                                readonly code: "65";
                            }, {
                                readonly type: "pin_data_required";
                                readonly code: "70";
                            }, {
                                readonly type: "pin_entry_tries_exceeded";
                                readonly code: "75";
                            }, {
                                readonly type: "unsolicited_reversal";
                                readonly code: "76";
                            }, {
                                readonly type: "blocked_first_use";
                                readonly code: "78";
                            }, {
                                readonly type: "already_reversed";
                                readonly code: "79";
                            }, {
                                readonly type: "negative_cvv_result";
                                readonly code: "82";
                            }, {
                                readonly type: "no_reason_to_decline";
                                readonly code: "85";
                            }, {
                                readonly type: "cannot_verify_pin";
                                readonly code: "86";
                            }, {
                                readonly type: "issuer_unavailable";
                                readonly code: "91";
                            }, {
                                readonly type: "unable_to_route_transaction";
                                readonly code: "92";
                            }, {
                                readonly type: "cannot_complete_violation_of_law";
                                readonly code: "93";
                            }, {
                                readonly type: "system_error";
                                readonly code: "96";
                            }, {
                                readonly type: "invalid_cvv";
                                readonly code: "97";
                            }];
                            readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Timestamp for when the transaction was created.";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ChargesList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the charge.";
                    readonly enum: readonly ["succeeded", "pending", "failed", "voided"];
                    readonly examples: readonly ["succeeded"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly reference: {
                    readonly type: "string";
                    readonly examples: readonly ["ashsfGHhdjsdXzGThakTTysDsw"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                };
                readonly to: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-05-21T10:48:18Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The end date and time for a period. This parameter is used in conjunction with the 'from' parameter to define a time range. The value should be in **ISO 8601 format**.";
                };
                readonly from: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-04-21T10:55:16Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The start date and time for a period. This parameter is used in conjunction with the 'to' parameter to define a time range. The value should be in ISO 8601 format.";
                };
                readonly customer_id: {
                    readonly type: "string";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The customer ID";
                };
                readonly virtual_account_id: {
                    readonly type: "string";
                    readonly examples: readonly ["van_gLKQRnsjzA"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The virtual account ID";
                };
                readonly payment_method_id: {
                    readonly type: "string";
                    readonly examples: readonly ["pmd_WRq7L4TM8p"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ID of the payment method.";
                };
                readonly order_id: {
                    readonly type: "string";
                    readonly examples: readonly ["ord_WRq7L4TM8p"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ID of the order.";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 10;
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the charge.";
                                readonly type: "string";
                                readonly examples: readonly ["chg_nONgeAGY97"];
                            };
                            readonly amount: {
                                readonly description: "The payment amount in decimals.";
                                readonly type: "number";
                                readonly format: "decimal";
                                readonly minimum: 0.01;
                                readonly examples: readonly [12.34];
                            };
                            readonly fees: {
                                readonly type: "array";
                                readonly description: "Fees charged on payment amount";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                            readonly examples: readonly ["vat"];
                                        };
                                        readonly amount: {
                                            readonly type: "number";
                                            readonly format: "decimal";
                                            readonly description: "The fee amount in decimal format.";
                                            readonly examples: readonly [12.3];
                                        };
                                    };
                                };
                            };
                            readonly billing_details: {
                                readonly type: "object";
                                readonly description: "The customer's billing information.";
                                readonly properties: {
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["cornelius@gmail.com"];
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                };
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly description: {
                                readonly description: "The charge's description.";
                                readonly type: "string";
                            };
                            readonly disputed: {
                                readonly description: "Boolean indicating if the charge was disputed.";
                                readonly type: "boolean";
                                readonly examples: readonly [false];
                            };
                            readonly settled: {
                                readonly description: "Boolean indicating if the transaction has been settled.";
                                readonly type: "boolean";
                                readonly examples: readonly [false];
                            };
                            readonly settlement_id: {
                                readonly description: "Id for the settlement the transaction belongs to.";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly next_action: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["type", "redirect_url"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "redirect_url";
                                            readonly readOnly: true;
                                        };
                                        readonly redirect_url: {
                                            readonly type: "object";
                                            readonly required: readonly ["url"];
                                            readonly properties: {
                                                readonly url: {
                                                    readonly type: "string";
                                                    readonly description: "Payment screen URL to redirect customer to.";
                                                    readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type", "requires_additional_fields"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_additional_fields";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_additional_fields: {
                                            readonly type: "object";
                                            readonly required: readonly ["fields"];
                                            readonly properties: {
                                                readonly fields: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                    readonly maxItems: 50;
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_pin";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_pin: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_requery";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_requery: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_otp";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_otp: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type", "payment_instruction"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "payment_instruction";
                                            readonly readOnly: true;
                                        };
                                        readonly payment_instruction: {
                                            readonly type: "object";
                                            readonly required: readonly ["note"];
                                            readonly properties: {
                                                readonly note: {
                                                    readonly type: "string";
                                                    readonly description: "Custom field containing the payment instruction.";
                                                    readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_capture";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_capture: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type", "redirect_url"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_bank_transfer";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_bank_transfer: {
                                            readonly type: "object";
                                            readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                            readonly properties: {
                                                readonly account_number: {
                                                    readonly type: "string";
                                                    readonly description: "The account number designated for receiving payments.";
                                                };
                                                readonly account_bank_name: {
                                                    readonly type: "string";
                                                    readonly description: "The Bank name.";
                                                };
                                                readonly account_expiration_datetime: {
                                                    readonly type: "string";
                                                    readonly description: "Specifies when the virtual account expires.";
                                                    readonly format: "date-time";
                                                };
                                                readonly note: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }];
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                        readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                        readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                        readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                        readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                        readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                        readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                        readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                    };
                                };
                            };
                            readonly payment_method_details: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["card", "id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "card";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly card: {
                                            readonly type: "object";
                                            readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                            readonly properties: {
                                                readonly expiry_month: {
                                                    readonly type: "integer";
                                                    readonly description: "Expiry month of the card.";
                                                    readonly examples: readonly ["09"];
                                                };
                                                readonly expiry_year: {
                                                    readonly type: "integer";
                                                    readonly description: "Expiry year of the card.";
                                                    readonly examples: readonly ["32"];
                                                };
                                                readonly first6: {
                                                    readonly type: "string";
                                                    readonly description: "Bank identification number (BIN) of the card.";
                                                    readonly minLength: 6;
                                                    readonly maxLength: 6;
                                                    readonly examples: readonly ["123412"];
                                                };
                                                readonly last4: {
                                                    readonly type: "string";
                                                    readonly description: "The last four digits of the card number.";
                                                    readonly minLength: 4;
                                                    readonly maxLength: 4;
                                                    readonly examples: readonly ["1234"];
                                                };
                                                readonly network: {
                                                    readonly type: "string";
                                                    readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                    readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                    readonly examples: readonly ["MASTERCARD"];
                                                };
                                                readonly billing_address: {
                                                    readonly type: "object";
                                                    readonly description: "Customer address information.";
                                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                    readonly properties: {
                                                        readonly city: {
                                                            readonly type: "string";
                                                            readonly description: "The name of the city.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                        readonly country: {
                                                            readonly description: "ISO2 country code";
                                                            readonly type: "string";
                                                            readonly pattern: "^[A-Z]{2}$";
                                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                            readonly examples: readonly ["US"];
                                                        };
                                                        readonly line1: {
                                                            readonly type: "string";
                                                            readonly description: "The first line of the Customer's address.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["123 Main Street"];
                                                        };
                                                        readonly line2: {
                                                            readonly type: "string";
                                                            readonly description: "The second line of the Customer's address.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["Apt 4B"];
                                                        };
                                                        readonly postal_code: {
                                                            readonly type: "string";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["10001"];
                                                        };
                                                        readonly state: {
                                                            readonly type: "string";
                                                            readonly description: "The state or region.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                    };
                                                };
                                                readonly cof: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["enabled"];
                                                    readonly properties: {
                                                        readonly enabled: {
                                                            readonly type: "boolean";
                                                            readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                            readonly examples: readonly [true];
                                                        };
                                                        readonly agreement_id: {
                                                            readonly type: "string";
                                                            readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                            readonly examples: readonly ["Agreement00w02W1"];
                                                        };
                                                        readonly recurring_amount_variability: {
                                                            readonly type: "string";
                                                            readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                            readonly enum: readonly ["VARIABLE"];
                                                            readonly examples: readonly ["VARIABLE"];
                                                        };
                                                        readonly agreement_type: {
                                                            readonly type: "string";
                                                            readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                            readonly enum: readonly ["UNSCHEDULED"];
                                                            readonly examples: readonly ["UNSCHEDULED"];
                                                            readonly description: "`UNSCHEDULED`";
                                                        };
                                                        readonly trace_id: {
                                                            readonly type: "string";
                                                            readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                            readonly examples: readonly ["123456789"];
                                                        };
                                                    };
                                                };
                                                readonly card_holder_name: {
                                                    readonly type: "string";
                                                    readonly description: "Name on the card";
                                                    readonly examples: readonly ["Alex James"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "bank_account";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly bank_account: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "mobile_money", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "mobile_money";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly mobile_money: {
                                            readonly type: "object";
                                            readonly required: readonly ["network", "phone_number", "country_code"];
                                            readonly properties: {
                                                readonly network: {
                                                    readonly type: "string";
                                                    readonly description: "The mobile network of the customer's phone number.";
                                                    readonly examples: readonly ["MTN"];
                                                };
                                                readonly country_code: {
                                                    readonly type: "string";
                                                    readonly description: "ISO 3166 alpha-3 country code.";
                                                    readonly examples: readonly ["233"];
                                                };
                                                readonly phone_number: {
                                                    readonly type: "string";
                                                    readonly description: "The phone number of customer.";
                                                    readonly examples: readonly ["9012345678"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "opay";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly opay: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "applepay";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly applepay: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly card_holder_name: {
                                                    readonly type: "string";
                                                    readonly description: "The cardholder name.";
                                                    readonly examples: readonly ["Yohan Blake"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "googlepay";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly googlepay: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly card_holder_name: {
                                                    readonly type: "string";
                                                    readonly description: "The cardholder name.";
                                                    readonly examples: readonly ["Yohan Blake"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "ussd";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly ussd: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly account_bank: {
                                                    readonly type: "string";
                                                    readonly description: "The bank code of the USSD string to generate.";
                                                    readonly examples: readonly ["050"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["bank_transfer", "id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "bank_transfer";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly bank_transfer: {
                                            readonly type: "object";
                                            readonly required: readonly ["account_type"];
                                            readonly properties: {
                                                readonly account_expires_in: {
                                                    readonly type: "integer";
                                                    readonly description: "The expiry time of the virtual account.";
                                                    readonly maximum: 432000;
                                                    readonly examples: readonly [360];
                                                };
                                                readonly account_display_name: {
                                                    readonly type: "string";
                                                    readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                    readonly minLength: 3;
                                                    readonly maxLength: 256;
                                                    readonly examples: readonly ["Alex James"];
                                                };
                                                readonly account_type: {
                                                    readonly type: "string";
                                                    readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                    readonly enum: readonly ["static", "dynamic"];
                                                    readonly examples: readonly ["static"];
                                                };
                                                readonly originator_bank_name: {
                                                    readonly type: "string";
                                                    readonly description: "The sender's Bank name";
                                                    readonly examples: readonly ["Mock Bank"];
                                                };
                                                readonly originator_account_number: {
                                                    readonly type: "string";
                                                    readonly description: "The Sender's masked account number";
                                                    readonly examples: readonly ["002*******78"];
                                                };
                                                readonly originator_name: {
                                                    readonly type: "string";
                                                    readonly description: "The sender's name";
                                                    readonly examples: readonly ["Jane Doe"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }];
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly card: "#/components/schemas/card_payment_method";
                                        readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                        readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                        readonly opay: "#/components/schemas/opay_payment_method";
                                        readonly applepay: "#/components/schemas/applepay_payment_method";
                                        readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                        readonly ussd: "#/components/schemas/ussd_payment_method";
                                        readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                    };
                                };
                            };
                            readonly redirect_url: {
                                readonly type: "string";
                                readonly description: "Specifies the URL to redirect to.";
                                readonly examples: readonly ["https://www.google.com"];
                            };
                            readonly refunded: {
                                readonly description: "Boolean indicating if the transaction has been refunded.";
                                readonly type: "boolean";
                                readonly examples: readonly [false];
                            };
                            readonly reference: {
                                readonly type: "string";
                                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                                readonly minLength: 6;
                                readonly maxLength: 42;
                                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                                readonly "x-pattern-message": "must be an alphanumeric string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "The status of the charge.\n\n`succeeded` `pending` `failed` `voided`";
                                readonly enum: readonly ["succeeded", "pending", "failed", "voided"];
                                readonly examples: readonly ["succeeded"];
                            };
                            readonly processor_response: {
                                readonly type: "object";
                                readonly required: readonly ["type", "code"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly code: {
                                        readonly type: "string";
                                        readonly pattern: "\\d{2}";
                                        readonly "x-pattern-message": "must be two digits";
                                    };
                                };
                                readonly enum: readonly [{
                                    readonly type: "approved";
                                    readonly code: "00";
                                }, {
                                    readonly type: "refer_to_issuer";
                                    readonly code: "01";
                                }, {
                                    readonly type: "refer_to_issuer_special_condition";
                                    readonly code: "02";
                                }, {
                                    readonly type: "invalid_merchant";
                                    readonly code: "03";
                                }, {
                                    readonly type: "pick_up_card_no_fraud";
                                    readonly code: "04";
                                }, {
                                    readonly type: "do_not_honor";
                                    readonly code: "05";
                                }, {
                                    readonly type: "error";
                                    readonly code: "06";
                                }, {
                                    readonly type: "pick_up_card_fraud";
                                    readonly code: "07";
                                }, {
                                    readonly type: "partial_approval";
                                    readonly code: "10";
                                }, {
                                    readonly type: "invalid_transaction";
                                    readonly code: "12";
                                }, {
                                    readonly type: "invalid_amount";
                                    readonly code: "13";
                                }, {
                                    readonly type: "invalid_account_number";
                                    readonly code: "14";
                                }, {
                                    readonly type: "no_such_issuer";
                                    readonly code: "15";
                                }, {
                                    readonly type: "reenter_transaction";
                                    readonly code: "19";
                                }, {
                                    readonly type: "no_action_taken";
                                    readonly code: "21";
                                }, {
                                    readonly type: "unable_to_locate_record_in_file";
                                    readonly code: "25";
                                }, {
                                    readonly type: "file_temporarily_not_available";
                                    readonly code: "28";
                                }, {
                                    readonly type: "lost_card_pick_up";
                                    readonly code: "41";
                                }, {
                                    readonly type: "stolen_card_pick_up";
                                    readonly code: "43";
                                }, {
                                    readonly type: "insufficient_funds";
                                    readonly code: "51";
                                }, {
                                    readonly type: "no_checking_account";
                                    readonly code: "52";
                                }, {
                                    readonly type: "no_savings_account";
                                    readonly code: "53";
                                }, {
                                    readonly type: "expired_card";
                                    readonly code: "54";
                                }, {
                                    readonly type: "incorrect_pin";
                                    readonly code: "55";
                                }, {
                                    readonly type: "transaction_not_permitted_card";
                                    readonly code: "57";
                                }, {
                                    readonly type: "transaction_not_permitted_terminal";
                                    readonly code: "58";
                                }, {
                                    readonly type: "suspected_fraud";
                                    readonly code: "59";
                                }, {
                                    readonly type: "exceeds_approval_amount_limit";
                                    readonly code: "61";
                                }, {
                                    readonly type: "invalid_restricted_service_code";
                                    readonly code: "62";
                                }, {
                                    readonly type: "security_violation";
                                    readonly code: "63";
                                }, {
                                    readonly type: "transaction_does_not_fulfill_aml_req";
                                    readonly code: "64";
                                }, {
                                    readonly type: "exceeds_withdrawal_limit";
                                    readonly code: "65";
                                }, {
                                    readonly type: "pin_data_required";
                                    readonly code: "70";
                                }, {
                                    readonly type: "pin_entry_tries_exceeded";
                                    readonly code: "75";
                                }, {
                                    readonly type: "unsolicited_reversal";
                                    readonly code: "76";
                                }, {
                                    readonly type: "blocked_first_use";
                                    readonly code: "78";
                                }, {
                                    readonly type: "already_reversed";
                                    readonly code: "79";
                                }, {
                                    readonly type: "negative_cvv_result";
                                    readonly code: "82";
                                }, {
                                    readonly type: "no_reason_to_decline";
                                    readonly code: "85";
                                }, {
                                    readonly type: "cannot_verify_pin";
                                    readonly code: "86";
                                }, {
                                    readonly type: "issuer_unavailable";
                                    readonly code: "91";
                                }, {
                                    readonly type: "unable_to_route_transaction";
                                    readonly code: "92";
                                }, {
                                    readonly type: "cannot_complete_violation_of_law";
                                    readonly code: "93";
                                }, {
                                    readonly type: "system_error";
                                    readonly code: "96";
                                }, {
                                    readonly type: "invalid_cvv";
                                    readonly code: "97";
                                }];
                                readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "Timestamp for when the transaction was created.";
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ChargesPost: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["amount", "currency", "customer_id", "payment_method_id", "reference"];
        readonly properties: {
            readonly amount: {
                readonly description: "The payment amount in decimals.";
                readonly type: "number";
                readonly format: "decimal";
                readonly minimum: 0.01;
                readonly examples: readonly [12.34];
            };
            readonly currency: {
                readonly description: "ISO 4217 currency code.";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                readonly examples: readonly ["NGN"];
            };
            readonly reference: {
                readonly type: "string";
                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                readonly minLength: 6;
                readonly maxLength: 42;
                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                readonly "x-pattern-message": "must be an alphanumeric string";
            };
            readonly customer_id: {
                readonly type: "string";
                readonly description: "ID of the customer.";
                readonly examples: readonly ["cus_3XarBILKQS"];
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly payment_method_id: {
                readonly type: "string";
                readonly description: "ID of the payment method.";
                readonly examples: readonly ["pmd_WRq7L4TM8p"];
            };
            readonly redirect_url: {
                readonly type: "string";
                readonly description: "Specifies the URL to redirect to.";
                readonly examples: readonly ["https://www.google.com"];
            };
            readonly authorization: {
                readonly oneOf: readonly [{
                    readonly type: "object";
                    readonly description: "OTP authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "otp";
                            readonly readOnly: true;
                        };
                        readonly otp: {
                            readonly type: "object";
                            readonly required: readonly ["code"];
                            readonly properties: {
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "^\\d{4,8}$";
                                    readonly description: "One-time password(OTP) sent by the Bank.";
                                    readonly "x-pattern-message": "must be a numeric value between 4 and 8 digits long.";
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "PIN authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "pin";
                            readonly readOnly: true;
                        };
                        readonly pin: {
                            readonly type: "object";
                            readonly description: "PIN authorization object.";
                            readonly required: readonly ["encrypted_pin", "nonce"];
                            readonly properties: {
                                readonly nonce: {
                                    readonly type: "string";
                                    readonly pattern: "^[a-zA-Z0-9]+$";
                                    readonly minLength: 12;
                                    readonly maxLength: 12;
                                    readonly description: "A single-use 12 character alphanumeric string for field-level encryption.";
                                    readonly "x-pattern-message": "must be an alphanumeric string of length 12";
                                };
                                readonly encrypted_pin: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "External 3DS authorization object.";
                    readonly required: readonly ["type", "external_3ds"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "external_3ds";
                            readonly readOnly: true;
                        };
                        readonly external_3ds: {
                            readonly type: "object";
                            readonly required: readonly ["eci", "authentication_token", "transaction_id", "version", "transaction_status", "status_reason_code", "amount", "time"];
                            readonly properties: {
                                readonly eci: {
                                    readonly type: "string";
                                    readonly description: "Electronic Commerce Indicator from the issuer's Access Control Server (ACS), showing the outcome of the payer's authentication attempt.";
                                    readonly examples: readonly ["03"];
                                };
                                readonly time: {
                                    readonly type: "string";
                                    readonly description: "The time of the payer's authentication in UTC.";
                                    readonly examples: readonly ["2024-04-11T08:08:43.974Z"];
                                };
                                readonly authentication_token: {
                                    readonly type: "string";
                                    readonly description: "Base64 encoded value generated by the card issuer.";
                                    readonly examples: readonly ["zPkn+YYYYYY53434HFHDss="];
                                };
                                readonly transaction_id: {
                                    readonly type: "string";
                                    readonly description: "The unique transaction identifier from the Access Control Server (ACS).";
                                    readonly examples: readonly ["1F3Uciah9cnh4mrnPPtyT_RA_test"];
                                };
                                readonly version: {
                                    readonly type: "string";
                                    readonly description: "EMV 3D Secure protocol.";
                                    readonly examples: readonly ["2.1.0"];
                                };
                                readonly transaction_status: {
                                    readonly type: "string";
                                    readonly description: "The status of the external authorization attempt.";
                                    readonly enum: readonly ["Y", "N", "U", "A", "R"];
                                    readonly examples: readonly ["Y"];
                                };
                                readonly status_reason_code: {
                                    readonly type: "string";
                                };
                                readonly amount: {
                                    readonly type: "number";
                                    readonly format: "decimal";
                                    readonly description: "The payment amount in decimals.";
                                    readonly minimum: 0.01;
                                    readonly examples: readonly [12.34];
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "AVS authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "avs";
                            readonly readOnly: true;
                        };
                        readonly avs: {
                            readonly type: "object";
                            readonly required: readonly ["address"];
                            readonly properties: {
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "Customer address information.";
                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                    readonly properties: {
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "The name of the city.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly country: {
                                            readonly description: "ISO2 country code";
                                            readonly type: "string";
                                            readonly pattern: "^[A-Z]{2}$";
                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                            readonly examples: readonly ["US"];
                                        };
                                        readonly line1: {
                                            readonly type: "string";
                                            readonly description: "The first line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["123 Main Street"];
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                            readonly description: "The second line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["Apt 4B"];
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["10001"];
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or region.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                    };
                                };
                            };
                        };
                    };
                }];
                readonly discriminator: {
                    readonly propertyName: "type";
                    readonly mapping: {
                        readonly otp: "#/components/schemas/otp_authorization_in";
                        readonly pin: "#/components/schemas/encrypted_pin_authorization_in";
                        readonly external_3ds: "#/components/schemas/external_3ds_authorization_in";
                        readonly avs: "#/components/schemas/avs_authorization_in";
                    };
                };
            };
            readonly recurring: {
                readonly type: "boolean";
                readonly description: "Specify true for a recurring charge. Recurring charges bypass authorization flows and always return a terminal status of successful or failed.";
                readonly default: false;
            };
            readonly order_id: {
                readonly type: "string";
                readonly description: "ID of the order. This is only used for preauth captures.";
                readonly examples: readonly ["ord_3XarBILKQS"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the charge.";
                            readonly type: "string";
                            readonly examples: readonly ["chg_nONgeAGY97"];
                        };
                        readonly amount: {
                            readonly description: "The payment amount in decimals.";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly fees: {
                            readonly type: "array";
                            readonly description: "Fees charged on payment amount";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                        readonly examples: readonly ["vat"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The fee amount in decimal format.";
                                        readonly examples: readonly [12.3];
                                    };
                                };
                            };
                        };
                        readonly billing_details: {
                            readonly type: "object";
                            readonly description: "The customer's billing information.";
                            readonly properties: {
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Customer's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Customer's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The customer's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer.";
                            readonly type: "string";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly description: {
                            readonly description: "The charge's description.";
                            readonly type: "string";
                        };
                        readonly disputed: {
                            readonly description: "Boolean indicating if the charge was disputed.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly settled: {
                            readonly description: "Boolean indicating if the transaction has been settled.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly settlement_id: {
                            readonly description: "Id for the settlement the transaction belongs to.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly next_action: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "redirect_url";
                                        readonly readOnly: true;
                                    };
                                    readonly redirect_url: {
                                        readonly type: "object";
                                        readonly required: readonly ["url"];
                                        readonly properties: {
                                            readonly url: {
                                                readonly type: "string";
                                                readonly description: "Payment screen URL to redirect customer to.";
                                                readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "requires_additional_fields"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_additional_fields";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_additional_fields: {
                                        readonly type: "object";
                                        readonly required: readonly ["fields"];
                                        readonly properties: {
                                            readonly fields: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly maxItems: 50;
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_pin";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_pin: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_requery";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_requery: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_otp";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_otp: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "payment_instruction"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "payment_instruction";
                                        readonly readOnly: true;
                                    };
                                    readonly payment_instruction: {
                                        readonly type: "object";
                                        readonly required: readonly ["note"];
                                        readonly properties: {
                                            readonly note: {
                                                readonly type: "string";
                                                readonly description: "Custom field containing the payment instruction.";
                                                readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_capture";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_capture: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_bank_transfer";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly type: "string";
                                                readonly description: "The account number designated for receiving payments.";
                                            };
                                            readonly account_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The Bank name.";
                                            };
                                            readonly account_expiration_datetime: {
                                                readonly type: "string";
                                                readonly description: "Specifies when the virtual account expires.";
                                                readonly format: "date-time";
                                            };
                                            readonly note: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                    readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                    readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                    readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                    readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                    readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                    readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                    readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                };
                            };
                        };
                        readonly payment_method_details: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["card", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "card";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly card: {
                                        readonly type: "object";
                                        readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                        readonly properties: {
                                            readonly expiry_month: {
                                                readonly type: "integer";
                                                readonly description: "Expiry month of the card.";
                                                readonly examples: readonly ["09"];
                                            };
                                            readonly expiry_year: {
                                                readonly type: "integer";
                                                readonly description: "Expiry year of the card.";
                                                readonly examples: readonly ["32"];
                                            };
                                            readonly first6: {
                                                readonly type: "string";
                                                readonly description: "Bank identification number (BIN) of the card.";
                                                readonly minLength: 6;
                                                readonly maxLength: 6;
                                                readonly examples: readonly ["123412"];
                                            };
                                            readonly last4: {
                                                readonly type: "string";
                                                readonly description: "The last four digits of the card number.";
                                                readonly minLength: 4;
                                                readonly maxLength: 4;
                                                readonly examples: readonly ["1234"];
                                            };
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                readonly examples: readonly ["MASTERCARD"];
                                            };
                                            readonly billing_address: {
                                                readonly type: "object";
                                                readonly description: "Customer address information.";
                                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                readonly properties: {
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the city.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                    readonly country: {
                                                        readonly description: "ISO2 country code";
                                                        readonly type: "string";
                                                        readonly pattern: "^[A-Z]{2}$";
                                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                        readonly examples: readonly ["US"];
                                                    };
                                                    readonly line1: {
                                                        readonly type: "string";
                                                        readonly description: "The first line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["123 Main Street"];
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                        readonly description: "The second line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["Apt 4B"];
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["10001"];
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "The state or region.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                };
                                            };
                                            readonly cof: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                        readonly examples: readonly [true];
                                                    };
                                                    readonly agreement_id: {
                                                        readonly type: "string";
                                                        readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["Agreement00w02W1"];
                                                    };
                                                    readonly recurring_amount_variability: {
                                                        readonly type: "string";
                                                        readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                        readonly enum: readonly ["VARIABLE"];
                                                        readonly examples: readonly ["VARIABLE"];
                                                    };
                                                    readonly agreement_type: {
                                                        readonly type: "string";
                                                        readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                        readonly enum: readonly ["UNSCHEDULED"];
                                                        readonly examples: readonly ["UNSCHEDULED"];
                                                        readonly description: "`UNSCHEDULED`";
                                                    };
                                                    readonly trace_id: {
                                                        readonly type: "string";
                                                        readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["123456789"];
                                                    };
                                                };
                                            };
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "Name on the card";
                                                readonly examples: readonly ["Alex James"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_account";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_account: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "mobile_money", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "phone_number", "country_code"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The mobile network of the customer's phone number.";
                                                readonly examples: readonly ["MTN"];
                                            };
                                            readonly country_code: {
                                                readonly type: "string";
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly examples: readonly ["233"];
                                            };
                                            readonly phone_number: {
                                                readonly type: "string";
                                                readonly description: "The phone number of customer.";
                                                readonly examples: readonly ["9012345678"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "opay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly opay: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "applepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly applepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "googlepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly googlepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "ussd";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly ussd: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly account_bank: {
                                                readonly type: "string";
                                                readonly description: "The bank code of the USSD string to generate.";
                                                readonly examples: readonly ["050"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["bank_transfer", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_transfer";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_type"];
                                        readonly properties: {
                                            readonly account_expires_in: {
                                                readonly type: "integer";
                                                readonly description: "The expiry time of the virtual account.";
                                                readonly maximum: 432000;
                                                readonly examples: readonly [360];
                                            };
                                            readonly account_display_name: {
                                                readonly type: "string";
                                                readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                readonly minLength: 3;
                                                readonly maxLength: 256;
                                                readonly examples: readonly ["Alex James"];
                                            };
                                            readonly account_type: {
                                                readonly type: "string";
                                                readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                readonly enum: readonly ["static", "dynamic"];
                                                readonly examples: readonly ["static"];
                                            };
                                            readonly originator_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's Bank name";
                                                readonly examples: readonly ["Mock Bank"];
                                            };
                                            readonly originator_account_number: {
                                                readonly type: "string";
                                                readonly description: "The Sender's masked account number";
                                                readonly examples: readonly ["002*******78"];
                                            };
                                            readonly originator_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's name";
                                                readonly examples: readonly ["Jane Doe"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly card: "#/components/schemas/card_payment_method";
                                    readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                    readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                    readonly opay: "#/components/schemas/opay_payment_method";
                                    readonly applepay: "#/components/schemas/applepay_payment_method";
                                    readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                    readonly ussd: "#/components/schemas/ussd_payment_method";
                                    readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                };
                            };
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to.";
                            readonly examples: readonly ["https://www.google.com"];
                        };
                        readonly refunded: {
                            readonly description: "Boolean indicating if the transaction has been refunded.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the charge.\n\n`succeeded` `pending` `failed` `voided`";
                            readonly enum: readonly ["succeeded", "pending", "failed", "voided"];
                            readonly examples: readonly ["succeeded"];
                        };
                        readonly processor_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "\\d{2}";
                                    readonly "x-pattern-message": "must be two digits";
                                };
                            };
                            readonly enum: readonly [{
                                readonly type: "approved";
                                readonly code: "00";
                            }, {
                                readonly type: "refer_to_issuer";
                                readonly code: "01";
                            }, {
                                readonly type: "refer_to_issuer_special_condition";
                                readonly code: "02";
                            }, {
                                readonly type: "invalid_merchant";
                                readonly code: "03";
                            }, {
                                readonly type: "pick_up_card_no_fraud";
                                readonly code: "04";
                            }, {
                                readonly type: "do_not_honor";
                                readonly code: "05";
                            }, {
                                readonly type: "error";
                                readonly code: "06";
                            }, {
                                readonly type: "pick_up_card_fraud";
                                readonly code: "07";
                            }, {
                                readonly type: "partial_approval";
                                readonly code: "10";
                            }, {
                                readonly type: "invalid_transaction";
                                readonly code: "12";
                            }, {
                                readonly type: "invalid_amount";
                                readonly code: "13";
                            }, {
                                readonly type: "invalid_account_number";
                                readonly code: "14";
                            }, {
                                readonly type: "no_such_issuer";
                                readonly code: "15";
                            }, {
                                readonly type: "reenter_transaction";
                                readonly code: "19";
                            }, {
                                readonly type: "no_action_taken";
                                readonly code: "21";
                            }, {
                                readonly type: "unable_to_locate_record_in_file";
                                readonly code: "25";
                            }, {
                                readonly type: "file_temporarily_not_available";
                                readonly code: "28";
                            }, {
                                readonly type: "lost_card_pick_up";
                                readonly code: "41";
                            }, {
                                readonly type: "stolen_card_pick_up";
                                readonly code: "43";
                            }, {
                                readonly type: "insufficient_funds";
                                readonly code: "51";
                            }, {
                                readonly type: "no_checking_account";
                                readonly code: "52";
                            }, {
                                readonly type: "no_savings_account";
                                readonly code: "53";
                            }, {
                                readonly type: "expired_card";
                                readonly code: "54";
                            }, {
                                readonly type: "incorrect_pin";
                                readonly code: "55";
                            }, {
                                readonly type: "transaction_not_permitted_card";
                                readonly code: "57";
                            }, {
                                readonly type: "transaction_not_permitted_terminal";
                                readonly code: "58";
                            }, {
                                readonly type: "suspected_fraud";
                                readonly code: "59";
                            }, {
                                readonly type: "exceeds_approval_amount_limit";
                                readonly code: "61";
                            }, {
                                readonly type: "invalid_restricted_service_code";
                                readonly code: "62";
                            }, {
                                readonly type: "security_violation";
                                readonly code: "63";
                            }, {
                                readonly type: "transaction_does_not_fulfill_aml_req";
                                readonly code: "64";
                            }, {
                                readonly type: "exceeds_withdrawal_limit";
                                readonly code: "65";
                            }, {
                                readonly type: "pin_data_required";
                                readonly code: "70";
                            }, {
                                readonly type: "pin_entry_tries_exceeded";
                                readonly code: "75";
                            }, {
                                readonly type: "unsolicited_reversal";
                                readonly code: "76";
                            }, {
                                readonly type: "blocked_first_use";
                                readonly code: "78";
                            }, {
                                readonly type: "already_reversed";
                                readonly code: "79";
                            }, {
                                readonly type: "negative_cvv_result";
                                readonly code: "82";
                            }, {
                                readonly type: "no_reason_to_decline";
                                readonly code: "85";
                            }, {
                                readonly type: "cannot_verify_pin";
                                readonly code: "86";
                            }, {
                                readonly type: "issuer_unavailable";
                                readonly code: "91";
                            }, {
                                readonly type: "unable_to_route_transaction";
                                readonly code: "92";
                            }, {
                                readonly type: "cannot_complete_violation_of_law";
                                readonly code: "93";
                            }, {
                                readonly type: "system_error";
                                readonly code: "96";
                            }, {
                                readonly type: "invalid_cvv";
                                readonly code: "97";
                            }];
                            readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Timestamp for when the transaction was created.";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ChargesPut: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly authorization: {
                readonly oneOf: readonly [{
                    readonly type: "object";
                    readonly description: "OTP authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "otp";
                            readonly readOnly: true;
                        };
                        readonly otp: {
                            readonly type: "object";
                            readonly required: readonly ["code"];
                            readonly properties: {
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "^\\d{4,8}$";
                                    readonly description: "One-time password(OTP) sent by the Bank.";
                                    readonly "x-pattern-message": "must be a numeric value between 4 and 8 digits long.";
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "PIN authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "pin";
                            readonly readOnly: true;
                        };
                        readonly pin: {
                            readonly type: "object";
                            readonly description: "PIN authorization object.";
                            readonly required: readonly ["encrypted_pin", "nonce"];
                            readonly properties: {
                                readonly nonce: {
                                    readonly type: "string";
                                    readonly pattern: "^[a-zA-Z0-9]+$";
                                    readonly minLength: 12;
                                    readonly maxLength: 12;
                                    readonly description: "A single-use 12 character alphanumeric string for field-level encryption.";
                                    readonly "x-pattern-message": "must be an alphanumeric string of length 12";
                                };
                                readonly encrypted_pin: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "External 3DS authorization object.";
                    readonly required: readonly ["type", "external_3ds"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "external_3ds";
                            readonly readOnly: true;
                        };
                        readonly external_3ds: {
                            readonly type: "object";
                            readonly required: readonly ["eci", "authentication_token", "transaction_id", "version", "transaction_status", "status_reason_code", "amount", "time"];
                            readonly properties: {
                                readonly eci: {
                                    readonly type: "string";
                                    readonly description: "Electronic Commerce Indicator from the issuer's Access Control Server (ACS), showing the outcome of the payer's authentication attempt.";
                                    readonly examples: readonly ["03"];
                                };
                                readonly time: {
                                    readonly type: "string";
                                    readonly description: "The time of the payer's authentication in UTC.";
                                    readonly examples: readonly ["2024-04-11T08:08:43.974Z"];
                                };
                                readonly authentication_token: {
                                    readonly type: "string";
                                    readonly description: "Base64 encoded value generated by the card issuer.";
                                    readonly examples: readonly ["zPkn+YYYYYY53434HFHDss="];
                                };
                                readonly transaction_id: {
                                    readonly type: "string";
                                    readonly description: "The unique transaction identifier from the Access Control Server (ACS).";
                                    readonly examples: readonly ["1F3Uciah9cnh4mrnPPtyT_RA_test"];
                                };
                                readonly version: {
                                    readonly type: "string";
                                    readonly description: "EMV 3D Secure protocol.";
                                    readonly examples: readonly ["2.1.0"];
                                };
                                readonly transaction_status: {
                                    readonly type: "string";
                                    readonly description: "The status of the external authorization attempt.";
                                    readonly enum: readonly ["Y", "N", "U", "A", "R"];
                                    readonly examples: readonly ["Y"];
                                };
                                readonly status_reason_code: {
                                    readonly type: "string";
                                };
                                readonly amount: {
                                    readonly type: "number";
                                    readonly format: "decimal";
                                    readonly description: "The payment amount in decimals.";
                                    readonly minimum: 0.01;
                                    readonly examples: readonly [12.34];
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "AVS authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "avs";
                            readonly readOnly: true;
                        };
                        readonly avs: {
                            readonly type: "object";
                            readonly required: readonly ["address"];
                            readonly properties: {
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "Customer address information.";
                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                    readonly properties: {
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "The name of the city.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly country: {
                                            readonly description: "ISO2 country code";
                                            readonly type: "string";
                                            readonly pattern: "^[A-Z]{2}$";
                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                            readonly examples: readonly ["US"];
                                        };
                                        readonly line1: {
                                            readonly type: "string";
                                            readonly description: "The first line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["123 Main Street"];
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                            readonly description: "The second line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["Apt 4B"];
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["10001"];
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or region.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                    };
                                };
                            };
                        };
                    };
                }];
                readonly discriminator: {
                    readonly propertyName: "type";
                    readonly mapping: {
                        readonly otp: "#/components/schemas/otp_authorization_in";
                        readonly pin: "#/components/schemas/encrypted_pin_authorization_in";
                        readonly external_3ds: "#/components/schemas/external_3ds_authorization_in";
                        readonly avs: "#/components/schemas/avs_authorization_in";
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the charge.";
                    readonly type: "string";
                    readonly examples: readonly ["chg_EFAHCzELJb"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the charge.";
                            readonly type: "string";
                            readonly examples: readonly ["chg_nONgeAGY97"];
                        };
                        readonly amount: {
                            readonly description: "The payment amount in decimals.";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly fees: {
                            readonly type: "array";
                            readonly description: "Fees charged on payment amount";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                        readonly examples: readonly ["vat"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The fee amount in decimal format.";
                                        readonly examples: readonly [12.3];
                                    };
                                };
                            };
                        };
                        readonly billing_details: {
                            readonly type: "object";
                            readonly description: "The customer's billing information.";
                            readonly properties: {
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Customer's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Customer's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The customer's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer.";
                            readonly type: "string";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly description: {
                            readonly description: "The charge's description.";
                            readonly type: "string";
                        };
                        readonly disputed: {
                            readonly description: "Boolean indicating if the charge was disputed.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly settled: {
                            readonly description: "Boolean indicating if the transaction has been settled.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly settlement_id: {
                            readonly description: "Id for the settlement the transaction belongs to.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly next_action: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "redirect_url";
                                        readonly readOnly: true;
                                    };
                                    readonly redirect_url: {
                                        readonly type: "object";
                                        readonly required: readonly ["url"];
                                        readonly properties: {
                                            readonly url: {
                                                readonly type: "string";
                                                readonly description: "Payment screen URL to redirect customer to.";
                                                readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "requires_additional_fields"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_additional_fields";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_additional_fields: {
                                        readonly type: "object";
                                        readonly required: readonly ["fields"];
                                        readonly properties: {
                                            readonly fields: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly maxItems: 50;
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_pin";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_pin: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_requery";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_requery: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_otp";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_otp: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "payment_instruction"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "payment_instruction";
                                        readonly readOnly: true;
                                    };
                                    readonly payment_instruction: {
                                        readonly type: "object";
                                        readonly required: readonly ["note"];
                                        readonly properties: {
                                            readonly note: {
                                                readonly type: "string";
                                                readonly description: "Custom field containing the payment instruction.";
                                                readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_capture";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_capture: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_bank_transfer";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly type: "string";
                                                readonly description: "The account number designated for receiving payments.";
                                            };
                                            readonly account_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The Bank name.";
                                            };
                                            readonly account_expiration_datetime: {
                                                readonly type: "string";
                                                readonly description: "Specifies when the virtual account expires.";
                                                readonly format: "date-time";
                                            };
                                            readonly note: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                    readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                    readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                    readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                    readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                    readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                    readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                    readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                };
                            };
                        };
                        readonly payment_method_details: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["card", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "card";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly card: {
                                        readonly type: "object";
                                        readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                        readonly properties: {
                                            readonly expiry_month: {
                                                readonly type: "integer";
                                                readonly description: "Expiry month of the card.";
                                                readonly examples: readonly ["09"];
                                            };
                                            readonly expiry_year: {
                                                readonly type: "integer";
                                                readonly description: "Expiry year of the card.";
                                                readonly examples: readonly ["32"];
                                            };
                                            readonly first6: {
                                                readonly type: "string";
                                                readonly description: "Bank identification number (BIN) of the card.";
                                                readonly minLength: 6;
                                                readonly maxLength: 6;
                                                readonly examples: readonly ["123412"];
                                            };
                                            readonly last4: {
                                                readonly type: "string";
                                                readonly description: "The last four digits of the card number.";
                                                readonly minLength: 4;
                                                readonly maxLength: 4;
                                                readonly examples: readonly ["1234"];
                                            };
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                readonly examples: readonly ["MASTERCARD"];
                                            };
                                            readonly billing_address: {
                                                readonly type: "object";
                                                readonly description: "Customer address information.";
                                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                readonly properties: {
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the city.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                    readonly country: {
                                                        readonly description: "ISO2 country code";
                                                        readonly type: "string";
                                                        readonly pattern: "^[A-Z]{2}$";
                                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                        readonly examples: readonly ["US"];
                                                    };
                                                    readonly line1: {
                                                        readonly type: "string";
                                                        readonly description: "The first line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["123 Main Street"];
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                        readonly description: "The second line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["Apt 4B"];
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["10001"];
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "The state or region.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                };
                                            };
                                            readonly cof: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                        readonly examples: readonly [true];
                                                    };
                                                    readonly agreement_id: {
                                                        readonly type: "string";
                                                        readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["Agreement00w02W1"];
                                                    };
                                                    readonly recurring_amount_variability: {
                                                        readonly type: "string";
                                                        readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                        readonly enum: readonly ["VARIABLE"];
                                                        readonly examples: readonly ["VARIABLE"];
                                                    };
                                                    readonly agreement_type: {
                                                        readonly type: "string";
                                                        readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                        readonly enum: readonly ["UNSCHEDULED"];
                                                        readonly examples: readonly ["UNSCHEDULED"];
                                                        readonly description: "`UNSCHEDULED`";
                                                    };
                                                    readonly trace_id: {
                                                        readonly type: "string";
                                                        readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["123456789"];
                                                    };
                                                };
                                            };
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "Name on the card";
                                                readonly examples: readonly ["Alex James"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_account";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_account: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "mobile_money", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "phone_number", "country_code"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The mobile network of the customer's phone number.";
                                                readonly examples: readonly ["MTN"];
                                            };
                                            readonly country_code: {
                                                readonly type: "string";
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly examples: readonly ["233"];
                                            };
                                            readonly phone_number: {
                                                readonly type: "string";
                                                readonly description: "The phone number of customer.";
                                                readonly examples: readonly ["9012345678"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "opay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly opay: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "applepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly applepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "googlepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly googlepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "ussd";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly ussd: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly account_bank: {
                                                readonly type: "string";
                                                readonly description: "The bank code of the USSD string to generate.";
                                                readonly examples: readonly ["050"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["bank_transfer", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_transfer";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_type"];
                                        readonly properties: {
                                            readonly account_expires_in: {
                                                readonly type: "integer";
                                                readonly description: "The expiry time of the virtual account.";
                                                readonly maximum: 432000;
                                                readonly examples: readonly [360];
                                            };
                                            readonly account_display_name: {
                                                readonly type: "string";
                                                readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                readonly minLength: 3;
                                                readonly maxLength: 256;
                                                readonly examples: readonly ["Alex James"];
                                            };
                                            readonly account_type: {
                                                readonly type: "string";
                                                readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                readonly enum: readonly ["static", "dynamic"];
                                                readonly examples: readonly ["static"];
                                            };
                                            readonly originator_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's Bank name";
                                                readonly examples: readonly ["Mock Bank"];
                                            };
                                            readonly originator_account_number: {
                                                readonly type: "string";
                                                readonly description: "The Sender's masked account number";
                                                readonly examples: readonly ["002*******78"];
                                            };
                                            readonly originator_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's name";
                                                readonly examples: readonly ["Jane Doe"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly card: "#/components/schemas/card_payment_method";
                                    readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                    readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                    readonly opay: "#/components/schemas/opay_payment_method";
                                    readonly applepay: "#/components/schemas/applepay_payment_method";
                                    readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                    readonly ussd: "#/components/schemas/ussd_payment_method";
                                    readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                };
                            };
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to.";
                            readonly examples: readonly ["https://www.google.com"];
                        };
                        readonly refunded: {
                            readonly description: "Boolean indicating if the transaction has been refunded.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the charge.\n\n`succeeded` `pending` `failed` `voided`";
                            readonly enum: readonly ["succeeded", "pending", "failed", "voided"];
                            readonly examples: readonly ["succeeded"];
                        };
                        readonly processor_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "\\d{2}";
                                    readonly "x-pattern-message": "must be two digits";
                                };
                            };
                            readonly enum: readonly [{
                                readonly type: "approved";
                                readonly code: "00";
                            }, {
                                readonly type: "refer_to_issuer";
                                readonly code: "01";
                            }, {
                                readonly type: "refer_to_issuer_special_condition";
                                readonly code: "02";
                            }, {
                                readonly type: "invalid_merchant";
                                readonly code: "03";
                            }, {
                                readonly type: "pick_up_card_no_fraud";
                                readonly code: "04";
                            }, {
                                readonly type: "do_not_honor";
                                readonly code: "05";
                            }, {
                                readonly type: "error";
                                readonly code: "06";
                            }, {
                                readonly type: "pick_up_card_fraud";
                                readonly code: "07";
                            }, {
                                readonly type: "partial_approval";
                                readonly code: "10";
                            }, {
                                readonly type: "invalid_transaction";
                                readonly code: "12";
                            }, {
                                readonly type: "invalid_amount";
                                readonly code: "13";
                            }, {
                                readonly type: "invalid_account_number";
                                readonly code: "14";
                            }, {
                                readonly type: "no_such_issuer";
                                readonly code: "15";
                            }, {
                                readonly type: "reenter_transaction";
                                readonly code: "19";
                            }, {
                                readonly type: "no_action_taken";
                                readonly code: "21";
                            }, {
                                readonly type: "unable_to_locate_record_in_file";
                                readonly code: "25";
                            }, {
                                readonly type: "file_temporarily_not_available";
                                readonly code: "28";
                            }, {
                                readonly type: "lost_card_pick_up";
                                readonly code: "41";
                            }, {
                                readonly type: "stolen_card_pick_up";
                                readonly code: "43";
                            }, {
                                readonly type: "insufficient_funds";
                                readonly code: "51";
                            }, {
                                readonly type: "no_checking_account";
                                readonly code: "52";
                            }, {
                                readonly type: "no_savings_account";
                                readonly code: "53";
                            }, {
                                readonly type: "expired_card";
                                readonly code: "54";
                            }, {
                                readonly type: "incorrect_pin";
                                readonly code: "55";
                            }, {
                                readonly type: "transaction_not_permitted_card";
                                readonly code: "57";
                            }, {
                                readonly type: "transaction_not_permitted_terminal";
                                readonly code: "58";
                            }, {
                                readonly type: "suspected_fraud";
                                readonly code: "59";
                            }, {
                                readonly type: "exceeds_approval_amount_limit";
                                readonly code: "61";
                            }, {
                                readonly type: "invalid_restricted_service_code";
                                readonly code: "62";
                            }, {
                                readonly type: "security_violation";
                                readonly code: "63";
                            }, {
                                readonly type: "transaction_does_not_fulfill_aml_req";
                                readonly code: "64";
                            }, {
                                readonly type: "exceeds_withdrawal_limit";
                                readonly code: "65";
                            }, {
                                readonly type: "pin_data_required";
                                readonly code: "70";
                            }, {
                                readonly type: "pin_entry_tries_exceeded";
                                readonly code: "75";
                            }, {
                                readonly type: "unsolicited_reversal";
                                readonly code: "76";
                            }, {
                                readonly type: "blocked_first_use";
                                readonly code: "78";
                            }, {
                                readonly type: "already_reversed";
                                readonly code: "79";
                            }, {
                                readonly type: "negative_cvv_result";
                                readonly code: "82";
                            }, {
                                readonly type: "no_reason_to_decline";
                                readonly code: "85";
                            }, {
                                readonly type: "cannot_verify_pin";
                                readonly code: "86";
                            }, {
                                readonly type: "issuer_unavailable";
                                readonly code: "91";
                            }, {
                                readonly type: "unable_to_route_transaction";
                                readonly code: "92";
                            }, {
                                readonly type: "cannot_complete_violation_of_law";
                                readonly code: "93";
                            }, {
                                readonly type: "system_error";
                                readonly code: "96";
                            }, {
                                readonly type: "invalid_cvv";
                                readonly code: "97";
                            }];
                            readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Timestamp for when the transaction was created.";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ChargesV2WebhookUpdatePost: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly txId: {
                readonly type: "integer";
            };
            readonly txRef: {
                readonly type: "string";
            };
            readonly tenantId: {
                readonly type: "string";
            };
            readonly accountId: {
                readonly type: "integer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
};
declare const CheckoutSessionsGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the checkout session.";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the checkout session";
                            readonly type: "string";
                        };
                        readonly amount: {
                            readonly description: "Amount to be collected from the customer";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer";
                            readonly type: "string";
                        };
                        readonly checkout_url: {
                            readonly description: "The checkout url to be shared with the customer";
                            readonly type: "string";
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to after payment.";
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly max_retry_attempts: {
                            readonly description: "The maximum number of retry attempts to complete checkout";
                            readonly type: "integer";
                            readonly default: 3;
                            readonly minimum: 0;
                            readonly maximum: 10;
                        };
                        readonly session_duration: {
                            readonly type: "integer";
                            readonly description: "The session duration (in minutes) to keep active. You can always generate a new checkout session if expired";
                            readonly minimum: 5;
                            readonly maximum: 2880;
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CheckoutSessionsList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 10;
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the checkout session";
                                readonly type: "string";
                            };
                            readonly amount: {
                                readonly description: "Amount to be collected from the customer";
                                readonly type: "number";
                                readonly format: "decimal";
                                readonly minimum: 0.01;
                                readonly examples: readonly [12.34];
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer";
                                readonly type: "string";
                            };
                            readonly checkout_url: {
                                readonly description: "The checkout url to be shared with the customer";
                                readonly type: "string";
                            };
                            readonly redirect_url: {
                                readonly type: "string";
                                readonly description: "Specifies the URL to redirect to after payment.";
                            };
                            readonly reference: {
                                readonly type: "string";
                                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                                readonly minLength: 6;
                                readonly maxLength: 42;
                                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                                readonly "x-pattern-message": "must be an alphanumeric string";
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                            readonly max_retry_attempts: {
                                readonly description: "The maximum number of retry attempts to complete checkout";
                                readonly type: "integer";
                                readonly default: 3;
                                readonly minimum: 0;
                                readonly maximum: 10;
                            };
                            readonly session_duration: {
                                readonly type: "integer";
                                readonly description: "The session duration (in minutes) to keep active. You can always generate a new checkout session if expired";
                                readonly minimum: 5;
                                readonly maximum: 2880;
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CheckoutSessionsPost: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly amount: {
                readonly description: "The payment amount in decimals.";
                readonly type: "number";
                readonly format: "decimal";
                readonly minimum: 0.01;
                readonly examples: readonly [12.34];
            };
            readonly currency: {
                readonly description: "ISO 4217 currency code.";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                readonly examples: readonly ["NGN"];
            };
            readonly customer_id: {
                readonly description: "ID of the customer";
                readonly type: "string";
            };
            readonly redirect_url: {
                readonly type: "string";
                readonly description: "Specifies the URL to redirect to after payment.";
            };
            readonly reference: {
                readonly type: "string";
                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                readonly minLength: 6;
                readonly maxLength: 42;
                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                readonly "x-pattern-message": "must be an alphanumeric string";
            };
            readonly max_retry_attempts: {
                readonly description: "The maximum number of retry attempts to complete checkout";
                readonly type: "integer";
                readonly default: 3;
                readonly minimum: 0;
                readonly maximum: 10;
            };
            readonly session_duration: {
                readonly type: "integer";
                readonly description: "The session duration (in minutes) to keep active. You can always generate a new checkout session if expired";
                readonly minimum: 5;
                readonly maximum: 2880;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the checkout session";
                            readonly type: "string";
                        };
                        readonly amount: {
                            readonly description: "Amount to be collected from the customer";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer";
                            readonly type: "string";
                        };
                        readonly checkout_url: {
                            readonly description: "The checkout url to be shared with the customer";
                            readonly type: "string";
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to after payment.";
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                        readonly max_retry_attempts: {
                            readonly description: "The maximum number of retry attempts to complete checkout";
                            readonly type: "integer";
                            readonly default: 3;
                            readonly minimum: 0;
                            readonly maximum: 10;
                        };
                        readonly session_duration: {
                            readonly type: "integer";
                            readonly description: "The session duration (in minutes) to keep active. You can always generate a new checkout session if expired";
                            readonly minimum: 5;
                            readonly maximum: 2880;
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CustomersCreate: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["email"];
        readonly properties: {
            readonly address: {
                readonly type: "object";
                readonly description: "Customer address information.";
                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                readonly properties: {
                    readonly city: {
                        readonly type: "string";
                        readonly description: "The name of the city.";
                        readonly pattern: "^.+$";
                        readonly "x-pattern-message": "value must not be empty";
                        readonly examples: readonly ["New York"];
                    };
                    readonly country: {
                        readonly description: "ISO2 country code";
                        readonly type: "string";
                        readonly pattern: "^[A-Z]{2}$";
                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                        readonly examples: readonly ["US"];
                    };
                    readonly line1: {
                        readonly type: "string";
                        readonly description: "The first line of the Customer's address.";
                        readonly pattern: "^.+$";
                        readonly "x-pattern-message": "value must not be empty";
                        readonly examples: readonly ["123 Main Street"];
                    };
                    readonly line2: {
                        readonly type: "string";
                        readonly description: "The second line of the Customer's address.";
                        readonly pattern: "^.+$";
                        readonly "x-pattern-message": "value must not be empty";
                        readonly examples: readonly ["Apt 4B"];
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly pattern: "^.+$";
                        readonly "x-pattern-message": "value must not be empty";
                        readonly examples: readonly ["10001"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "The state or region.";
                        readonly pattern: "^.+$";
                        readonly "x-pattern-message": "value must not be empty";
                        readonly examples: readonly ["New York"];
                    };
                };
            };
            readonly email: {
                readonly type: "string";
                readonly description: "The Customer's email address.";
                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                readonly "x-pattern-message": "must be an email format";
                readonly examples: readonly ["cornelius@gmail.com"];
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly name: {
                readonly type: "object";
                readonly description: "The Customer's full name.";
                readonly properties: {
                    readonly first: {
                        readonly type: "string";
                        readonly description: "The Customer's first name.";
                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                        readonly examples: readonly ["King"];
                    };
                    readonly middle: {
                        readonly type: "string";
                        readonly description: "The Customer's middle name.";
                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                        readonly examples: readonly ["Leo"];
                    };
                    readonly last: {
                        readonly type: "string";
                        readonly description: "The Customer's last name.";
                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                        readonly examples: readonly ["LeBron"];
                    };
                };
            };
            readonly phone: {
                readonly type: "object";
                readonly description: "The customer's mobile number.";
                readonly required: readonly ["number", "country_code"];
                readonly properties: {
                    readonly country_code: {
                        readonly description: "ISO 3166 alpha-3 country code.";
                        readonly type: "string";
                        readonly pattern: "^[0-9]{1,3}$";
                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                        readonly examples: readonly ["234"];
                    };
                    readonly number: {
                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                        readonly type: "string";
                        readonly pattern: "^[0-9]{7,10}$";
                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                        readonly examples: readonly ["8001122334"];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly description: "Customer address information.";
                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                            readonly properties: {
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "The name of the city.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                                readonly country: {
                                    readonly description: "ISO2 country code";
                                    readonly type: "string";
                                    readonly pattern: "^[A-Z]{2}$";
                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                    readonly examples: readonly ["US"];
                                };
                                readonly line1: {
                                    readonly type: "string";
                                    readonly description: "The first line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["123 Main Street"];
                                };
                                readonly line2: {
                                    readonly type: "string";
                                    readonly description: "The second line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["Apt 4B"];
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["10001"];
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "The state or region.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                            };
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The Customer's email address.";
                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                            readonly "x-pattern-message": "must be an email format";
                            readonly examples: readonly ["cornelius@gmail.com"];
                        };
                        readonly name: {
                            readonly type: "object";
                            readonly description: "The Customer's full name.";
                            readonly properties: {
                                readonly first: {
                                    readonly type: "string";
                                    readonly description: "The Customer's first name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["King"];
                                };
                                readonly middle: {
                                    readonly type: "string";
                                    readonly description: "The Customer's middle name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["Leo"];
                                };
                                readonly last: {
                                    readonly type: "string";
                                    readonly description: "The Customer's last name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["LeBron"];
                                };
                            };
                        };
                        readonly phone: {
                            readonly type: "object";
                            readonly description: "The customer's mobile number.";
                            readonly required: readonly ["number", "country_code"];
                            readonly properties: {
                                readonly country_code: {
                                    readonly description: "ISO 3166 alpha-3 country code.";
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{1,3}$";
                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                    readonly examples: readonly ["234"];
                                };
                                readonly number: {
                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{7,10}$";
                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                    readonly examples: readonly ["8001122334"];
                                };
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CustomersGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the customer.";
                    readonly type: "string";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly description: "Customer address information.";
                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                            readonly properties: {
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "The name of the city.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                                readonly country: {
                                    readonly description: "ISO2 country code";
                                    readonly type: "string";
                                    readonly pattern: "^[A-Z]{2}$";
                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                    readonly examples: readonly ["US"];
                                };
                                readonly line1: {
                                    readonly type: "string";
                                    readonly description: "The first line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["123 Main Street"];
                                };
                                readonly line2: {
                                    readonly type: "string";
                                    readonly description: "The second line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["Apt 4B"];
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["10001"];
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "The state or region.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                            };
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The Customer's email address.";
                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                            readonly "x-pattern-message": "must be an email format";
                            readonly examples: readonly ["cornelius@gmail.com"];
                        };
                        readonly name: {
                            readonly type: "object";
                            readonly description: "The Customer's full name.";
                            readonly properties: {
                                readonly first: {
                                    readonly type: "string";
                                    readonly description: "The Customer's first name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["King"];
                                };
                                readonly middle: {
                                    readonly type: "string";
                                    readonly description: "The Customer's middle name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["Leo"];
                                };
                                readonly last: {
                                    readonly type: "string";
                                    readonly description: "The Customer's last name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["LeBron"];
                                };
                            };
                        };
                        readonly phone: {
                            readonly type: "object";
                            readonly description: "The customer's mobile number.";
                            readonly required: readonly ["number", "country_code"];
                            readonly properties: {
                                readonly country_code: {
                                    readonly description: "ISO 3166 alpha-3 country code.";
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{1,3}$";
                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                    readonly examples: readonly ["234"];
                                };
                                readonly number: {
                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{7,10}$";
                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                    readonly examples: readonly ["8001122334"];
                                };
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CustomersList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 10;
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the customer.";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "Customer address information.";
                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                readonly properties: {
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "The name of the city.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly country: {
                                        readonly description: "ISO2 country code";
                                        readonly type: "string";
                                        readonly pattern: "^[A-Z]{2}$";
                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                        readonly examples: readonly ["US"];
                                    };
                                    readonly line1: {
                                        readonly type: "string";
                                        readonly description: "The first line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["123 Main Street"];
                                    };
                                    readonly line2: {
                                        readonly type: "string";
                                        readonly description: "The second line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["Apt 4B"];
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["10001"];
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "The state or region.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                };
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "The Customer's email address.";
                                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                readonly "x-pattern-message": "must be an email format";
                                readonly examples: readonly ["cornelius@gmail.com"];
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                            };
                            readonly phone: {
                                readonly type: "object";
                                readonly description: "The customer's mobile number.";
                                readonly required: readonly ["number", "country_code"];
                                readonly properties: {
                                    readonly country_code: {
                                        readonly description: "ISO 3166 alpha-3 country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{1,3}$";
                                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                        readonly examples: readonly ["234"];
                                    };
                                    readonly number: {
                                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{7,10}$";
                                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                        readonly examples: readonly ["8001122334"];
                                    };
                                };
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CustomersPut: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly address: {
                readonly type: "object";
                readonly description: "Customer address information.";
                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                readonly properties: {
                    readonly city: {
                        readonly type: "string";
                        readonly description: "The name of the city.";
                        readonly pattern: "^.+$";
                        readonly "x-pattern-message": "value must not be empty";
                        readonly examples: readonly ["New York"];
                    };
                    readonly country: {
                        readonly description: "ISO2 country code";
                        readonly type: "string";
                        readonly pattern: "^[A-Z]{2}$";
                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                        readonly examples: readonly ["US"];
                    };
                    readonly line1: {
                        readonly type: "string";
                        readonly description: "The first line of the Customer's address.";
                        readonly pattern: "^.+$";
                        readonly "x-pattern-message": "value must not be empty";
                        readonly examples: readonly ["123 Main Street"];
                    };
                    readonly line2: {
                        readonly type: "string";
                        readonly description: "The second line of the Customer's address.";
                        readonly pattern: "^.+$";
                        readonly "x-pattern-message": "value must not be empty";
                        readonly examples: readonly ["Apt 4B"];
                    };
                    readonly postal_code: {
                        readonly type: "string";
                        readonly pattern: "^.+$";
                        readonly "x-pattern-message": "value must not be empty";
                        readonly examples: readonly ["10001"];
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "The state or region.";
                        readonly pattern: "^.+$";
                        readonly "x-pattern-message": "value must not be empty";
                        readonly examples: readonly ["New York"];
                    };
                };
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly name: {
                readonly type: "object";
                readonly description: "The Customer's full name.";
                readonly properties: {
                    readonly first: {
                        readonly type: "string";
                        readonly description: "The Customer's first name.";
                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                        readonly examples: readonly ["King"];
                    };
                    readonly middle: {
                        readonly type: "string";
                        readonly description: "The Customer's middle name.";
                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                        readonly examples: readonly ["Leo"];
                    };
                    readonly last: {
                        readonly type: "string";
                        readonly description: "The Customer's last name.";
                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                        readonly examples: readonly ["LeBron"];
                    };
                };
            };
            readonly phone: {
                readonly type: "object";
                readonly description: "The customer's mobile number.";
                readonly required: readonly ["number", "country_code"];
                readonly properties: {
                    readonly country_code: {
                        readonly description: "ISO 3166 alpha-3 country code.";
                        readonly type: "string";
                        readonly pattern: "^[0-9]{1,3}$";
                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                        readonly examples: readonly ["234"];
                    };
                    readonly number: {
                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                        readonly type: "string";
                        readonly pattern: "^[0-9]{7,10}$";
                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                        readonly examples: readonly ["8001122334"];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the customer.";
                    readonly type: "string";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly description: "Customer address information.";
                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                            readonly properties: {
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "The name of the city.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                                readonly country: {
                                    readonly description: "ISO2 country code";
                                    readonly type: "string";
                                    readonly pattern: "^[A-Z]{2}$";
                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                    readonly examples: readonly ["US"];
                                };
                                readonly line1: {
                                    readonly type: "string";
                                    readonly description: "The first line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["123 Main Street"];
                                };
                                readonly line2: {
                                    readonly type: "string";
                                    readonly description: "The second line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["Apt 4B"];
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["10001"];
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "The state or region.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                            };
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The Customer's email address.";
                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                            readonly "x-pattern-message": "must be an email format";
                            readonly examples: readonly ["cornelius@gmail.com"];
                        };
                        readonly name: {
                            readonly type: "object";
                            readonly description: "The Customer's full name.";
                            readonly properties: {
                                readonly first: {
                                    readonly type: "string";
                                    readonly description: "The Customer's first name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["King"];
                                };
                                readonly middle: {
                                    readonly type: "string";
                                    readonly description: "The Customer's middle name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["Leo"];
                                };
                                readonly last: {
                                    readonly type: "string";
                                    readonly description: "The Customer's last name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["LeBron"];
                                };
                            };
                        };
                        readonly phone: {
                            readonly type: "object";
                            readonly description: "The customer's mobile number.";
                            readonly required: readonly ["number", "country_code"];
                            readonly properties: {
                                readonly country_code: {
                                    readonly description: "ISO 3166 alpha-3 country code.";
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{1,3}$";
                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                    readonly examples: readonly ["234"];
                                };
                                readonly number: {
                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{7,10}$";
                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                    readonly examples: readonly ["8001122334"];
                                };
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const CustomersSearch: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["email"];
        readonly properties: {
            readonly email: {
                readonly type: "string";
                readonly description: "The Customer's email address.";
                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                readonly "x-pattern-message": "must be an email format";
                readonly examples: readonly ["cornelius@gmail.com"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 10;
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the customer.";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "Customer address information.";
                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                readonly properties: {
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "The name of the city.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly country: {
                                        readonly description: "ISO2 country code";
                                        readonly type: "string";
                                        readonly pattern: "^[A-Z]{2}$";
                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                        readonly examples: readonly ["US"];
                                    };
                                    readonly line1: {
                                        readonly type: "string";
                                        readonly description: "The first line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["123 Main Street"];
                                    };
                                    readonly line2: {
                                        readonly type: "string";
                                        readonly description: "The second line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["Apt 4B"];
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["10001"];
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "The state or region.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                };
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "The Customer's email address.";
                                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                readonly "x-pattern-message": "must be an email format";
                                readonly examples: readonly ["cornelius@gmail.com"];
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                            };
                            readonly phone: {
                                readonly type: "object";
                                readonly description: "The customer's mobile number.";
                                readonly required: readonly ["number", "country_code"];
                                readonly properties: {
                                    readonly country_code: {
                                        readonly description: "ISO 3166 alpha-3 country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{1,3}$";
                                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                        readonly examples: readonly ["234"];
                                    };
                                    readonly number: {
                                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{7,10}$";
                                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                        readonly examples: readonly ["8001122334"];
                                    };
                                };
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const DirectTransfersPost: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly required: readonly ["action", "payment_instruction"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly action: {
                    readonly description: "To define whether the transfer should be processed immediately, scheduled for a later date, or deferred for future processing.";
                    readonly type: "string";
                    readonly enum: readonly ["instant", "deferred", "scheduled"];
                    readonly examples: readonly ["instant"];
                };
                readonly reference: {
                    readonly type: "string";
                    readonly pattern: "^[a-zA-Z0-9\\-]+$";
                    readonly minLength: 6;
                    readonly maxLength: 42;
                    readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                    readonly "x-pattern-message": "must be an alphanumeric string";
                };
                readonly narration: {
                    readonly description: "Transfer description. This cannot be greater than 180 characters.";
                    readonly type: "string";
                    readonly minLength: 1;
                    readonly maxLength: 180;
                };
                readonly disburse_option: {
                    readonly type: "object";
                    readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                    readonly properties: {
                        readonly date_time: {
                            readonly type: "string";
                            readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                        };
                        readonly timezone: {
                            readonly type: "string";
                            readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                        };
                    };
                };
                readonly callback_url: {
                    readonly description: "Specify to set a callback url for receiving payout webhook, this will take precedent over the merchant's default webhook url.";
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
                readonly payment_instruction: {
                    readonly description: "Currency-specific information for the transfer.";
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["recipient", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "NGN";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["bank"];
                                readonly properties: {
                                    readonly name: {
                                        readonly readOnly: true;
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "code"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "recipient account number";
                                                readonly type: "string";
                                                readonly examples: readonly ["0690000031"];
                                            };
                                            readonly code: {
                                                readonly description: "recipient bank code";
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["044"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["recipient", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "ETB";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["bank", "name"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "code"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "recipient account number";
                                                readonly type: "string";
                                                readonly minLength: 7;
                                                readonly maxLength: 24;
                                                readonly examples: readonly ["6708908978675"];
                                            };
                                            readonly code: {
                                                readonly description: "recipient bank code";
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["15"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["recipient", "sender", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "EUR";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["bank", "name", "phone", "email", "address"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly description: "Recipient phone number";
                                        readonly type: "object";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly email: {
                                        readonly description: "Recipient email address";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly description: "Recipient address";
                                        readonly type: "object";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "name", "swift_code"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "recipient account number";
                                                readonly type: "string";
                                                readonly minLength: 8;
                                                readonly maxLength: 35;
                                                readonly examples: readonly ["DE89370400440532013000"];
                                            };
                                            readonly name: {
                                                readonly description: "recipient bank name";
                                                readonly type: "string";
                                                readonly minLength: 2;
                                                readonly maxLength: 60;
                                                readonly examples: readonly ["Deutsche Bank"];
                                            };
                                            readonly swift_code: {
                                                readonly description: "recipient bank swift code";
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 15;
                                                readonly examples: readonly ["DEUTDEFF"];
                                            };
                                        };
                                    };
                                };
                            };
                            readonly sender: {
                                readonly type: "object";
                                readonly description: "Sender information for EUR bank transfers.";
                                readonly required: readonly ["name", "email", "address", "phone"];
                                readonly properties: {
                                    readonly name: {
                                        readonly description: "The Sender's name.";
                                        readonly type: "object";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly email: {
                                        readonly description: "The Sender's email address";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["cornelius@gmail.com"];
                                    };
                                    readonly address: {
                                        readonly description: "The Sender's residential address";
                                        readonly type: "object";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly description: "The Sender's phone number";
                                        readonly type: "object";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["recipient", "sender", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "GBP";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["bank", "name", "phone", "email", "address"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly description: "Recipient phone number";
                                        readonly type: "object";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly email: {
                                        readonly description: "Recipient email address";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly description: "Recipient address";
                                        readonly type: "object";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "name", "sort_code"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "recipient account number";
                                                readonly type: "string";
                                                readonly minLength: 8;
                                                readonly maxLength: 35;
                                                readonly examples: readonly ["DE89370400440532013000"];
                                            };
                                            readonly account_type: {
                                                readonly description: "recipient account type";
                                                readonly type: "string";
                                                readonly enum: readonly ["individual", "corporate"];
                                                readonly examples: readonly ["individual"];
                                            };
                                            readonly name: {
                                                readonly description: "recipient bank name";
                                                readonly type: "string";
                                                readonly minLength: 2;
                                                readonly maxLength: 60;
                                                readonly examples: readonly ["Deutsche Bank"];
                                            };
                                            readonly sort_code: {
                                                readonly description: "recipient bank sort code";
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 15;
                                                readonly examples: readonly ["80489123"];
                                            };
                                        };
                                    };
                                };
                            };
                            readonly sender: {
                                readonly type: "object";
                                readonly description: "Sender information for GBP bank transfers.";
                                readonly required: readonly ["name", "email", "address", "phone"];
                                readonly properties: {
                                    readonly name: {
                                        readonly description: "The Sender's name.";
                                        readonly type: "object";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly email: {
                                        readonly description: "The Sender's email address";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["cornelius@gmail.com"];
                                    };
                                    readonly address: {
                                        readonly description: "The Sender's residential address";
                                        readonly type: "object";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly description: "The Sender's phone number";
                                        readonly type: "object";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["recipient", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "GHS";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["bank", "name"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "code", "branch"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "recipient account number";
                                                readonly type: "string";
                                                readonly minLength: 7;
                                                readonly maxLength: 35;
                                                readonly examples: readonly ["001234567890"];
                                            };
                                            readonly code: {
                                                readonly description: "recipient bank code";
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["11276282"];
                                            };
                                            readonly branch: {
                                                readonly description: "recipient bank branch";
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["1812051EPC"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["recipient", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "MWK";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["bank", "name"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "code"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "recipient account number";
                                                readonly type: "string";
                                                readonly minLength: 5;
                                                readonly maxLength: 19;
                                                readonly examples: readonly ["123456789012"];
                                            };
                                            readonly code: {
                                                readonly description: "recipient bank code";
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["ABHY"];
                                            };
                                            readonly branch: {
                                                readonly description: "recipient bank branch";
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["ABHY0065001"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["recipient", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "USD";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["bank", "name", "phone", "email", "address"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly description: "Recipient phone number";
                                        readonly type: "object";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "Recipient email address";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["cornelius@gmail.com"];
                                    };
                                    readonly address: {
                                        readonly description: "Recipient address";
                                        readonly type: "object";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "code", "swift_code", "routing_number"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "recipient account number";
                                                readonly type: "string";
                                                readonly minLength: 5;
                                                readonly maxLength: 17;
                                                readonly examples: readonly ["1234567890"];
                                            };
                                            readonly code: {
                                                readonly description: "recipient bank code";
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["021000021"];
                                            };
                                            readonly account_type: {
                                                readonly description: "recipient account type";
                                                readonly type: "string";
                                                readonly enum: readonly ["checking", "savings"];
                                                readonly examples: readonly ["checking"];
                                            };
                                            readonly routing_number: {
                                                readonly description: "recipient bank routing number";
                                                readonly type: "string";
                                                readonly minLength: 6;
                                                readonly maxLength: 9;
                                                readonly examples: readonly ["021000021"];
                                            };
                                            readonly swift_code: {
                                                readonly description: "recipient bank swift code";
                                                readonly type: "string";
                                                readonly minLength: 8;
                                                readonly maxLength: 11;
                                                readonly examples: readonly ["BOFAUS3NXXX"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["recipient", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "ZAR";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["bank", "phone", "email", "address", "name"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly description: "Recipient phone number";
                                        readonly type: "object";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly email: {
                                        readonly description: "Recipient email address";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly description: "Recipient address";
                                        readonly type: "object";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "code"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "recipient account number";
                                                readonly type: "string";
                                                readonly minLength: 7;
                                                readonly maxLength: 11;
                                                readonly examples: readonly ["123456789"];
                                            };
                                            readonly code: {
                                                readonly description: "recipient bank code";
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["632005"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "destination_currency";
                        readonly mapping: {
                            readonly ETB: "#/components/schemas/bank_etb_instruction";
                            readonly EUR: "#/components/schemas/bank_eur_instruction";
                            readonly GBP: "#/components/schemas/bank_gbp_instruction";
                            readonly GHS: "#/components/schemas/bank_ghs_instruction";
                            readonly KES: "#/components/schemas/bank_etb_instruction";
                            readonly MWK: "#/components/schemas/bank_mwk_instruction";
                            readonly NGN: "#/components/schemas/bank_ngn_instruction";
                            readonly USD: "#/components/schemas/bank_usd_instruction";
                            readonly RWF: "#/components/schemas/bank_ghs_instruction";
                            readonly SLL: "#/components/schemas/bank_ghs_instruction";
                            readonly UGX: "#/components/schemas/bank_ghs_instruction";
                            readonly XAF: "#/components/schemas/bank_ghs_instruction";
                            readonly XOF: "#/components/schemas/bank_ghs_instruction";
                            readonly ZAR: "#/components/schemas/bank_zar_instruction";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["action", "payment_instruction"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                };
                readonly action: {
                    readonly description: "To define whether the transfer should be processed immediately, scheduled for a later date, or deferred for future processing";
                    readonly type: "string";
                    readonly enum: readonly ["instant", "deferred", "scheduled"];
                };
                readonly reference: {
                    readonly type: "string";
                    readonly pattern: "^[a-zA-Z0-9\\-]+$";
                    readonly minLength: 6;
                    readonly maxLength: 42;
                    readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                    readonly "x-pattern-message": "must be an alphanumeric string";
                };
                readonly narration: {
                    readonly description: "transfer description. This cannot be greater than 180 characters";
                    readonly type: "string";
                    readonly minLength: 1;
                    readonly maxLength: 180;
                };
                readonly disburse_option: {
                    readonly type: "object";
                    readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                    readonly properties: {
                        readonly date_time: {
                            readonly type: "string";
                            readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                        };
                        readonly timezone: {
                            readonly type: "string";
                            readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                        };
                    };
                };
                readonly callback_url: {
                    readonly description: "To set a callback url for receiving payout webhook, this will take precedent over the merchant's default webhook url";
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
                readonly payment_instruction: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["recipient", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "ETB";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["name", "mobile_money"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "msisdn"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "recipient network";
                                                readonly type: "string";
                                                readonly minLength: 2;
                                                readonly maxLength: 25;
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                                readonly "x-pattern-message": "must only contain alphanumeric characters";
                                                readonly examples: readonly ["VODAFONE"];
                                            };
                                            readonly msisdn: {
                                                readonly description: "recipient phone number";
                                                readonly type: "string";
                                                readonly minLength: 6;
                                                readonly maxLength: 25;
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                                readonly "x-pattern-message": "must only contain alphanumeric characters";
                                                readonly examples: readonly ["251911234567"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["recipient", "sender", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "EGP";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["name", "mobile_money", "national_identification", "address"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly national_identification: {
                                        readonly description: "Recipient government identification";
                                        readonly type: "object";
                                        readonly required: readonly ["type", "identifier"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly address: {
                                        readonly description: "Recipient address";
                                        readonly type: "object";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "msisdn"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "recipient network";
                                                readonly type: "string";
                                                readonly minLength: 2;
                                                readonly maxLength: 25;
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                                readonly "x-pattern-message": "must only contain alphanumeric characters";
                                                readonly examples: readonly ["VODAFONE"];
                                            };
                                            readonly msisdn: {
                                                readonly description: "recipient phone number";
                                                readonly type: "string";
                                                readonly minLength: 6;
                                                readonly maxLength: 25;
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                                readonly "x-pattern-message": "must only contain alphanumeric characters";
                                                readonly examples: readonly ["201234567890"];
                                            };
                                        };
                                    };
                                };
                            };
                            readonly sender: {
                                readonly type: "object";
                                readonly description: "Sender information for EGP mobile money transfers.";
                                readonly required: readonly ["name", "national_identification", "date_of_birth", "phone", "email", "address"];
                                readonly properties: {
                                    readonly name: {
                                        readonly description: "The Sender's full name.";
                                        readonly type: "object";
                                        readonly required: readonly ["first", "middle", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly national_identification: {
                                        readonly description: "The Sender's official government ID.";
                                        readonly type: "object";
                                        readonly required: readonly ["type", "identifier", "expiration_date"];
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly description: "The Sender's mobile number.";
                                        readonly type: "object";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly description: "Sender's date of birth in YYYY-MM-DD.";
                                        readonly type: "string";
                                        readonly examples: readonly ["2000-07-08"];
                                    };
                                    readonly email: {
                                        readonly description: "The Sender's email address.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["erik@devxpay.com"];
                                    };
                                    readonly address: {
                                        readonly description: "The Sender's residential address.";
                                        readonly type: "object";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["recipient", "destination_currency", "source_currency", "amount"];
                        readonly properties: {
                            readonly destination_currency: {
                                readonly type: "string";
                                readonly default: "XAF";
                                readonly readOnly: true;
                            };
                            readonly source_currency: {
                                readonly description: "ISO 4217 currency code.";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly amount: {
                                readonly type: "object";
                                readonly required: readonly ["value", "applies_to"];
                                readonly properties: {
                                    readonly value: {
                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly minimum: 1;
                                        readonly examples: readonly [3000.44];
                                    };
                                    readonly applies_to: {
                                        readonly type: "string";
                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                    };
                                };
                            };
                            readonly recipient: {
                                readonly type: "object";
                                readonly required: readonly ["name", "mobile_money"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly required: readonly ["first", "last"];
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "country", "msisdn"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "recipient network";
                                                readonly type: "string";
                                                readonly minLength: 2;
                                                readonly maxLength: 25;
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                                readonly "x-pattern-message": "must only contain alphanumeric characters";
                                                readonly examples: readonly ["VODAFONE"];
                                            };
                                            readonly country: {
                                                readonly description: "recipient country";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["CI"];
                                            };
                                            readonly msisdn: {
                                                readonly description: "recipient phone number";
                                                readonly type: "string";
                                                readonly minLength: 6;
                                                readonly maxLength: 25;
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                                readonly "x-pattern-message": "must only contain alphanumeric characters";
                                                readonly examples: readonly ["251911234567"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "destination_currency";
                        readonly mapping: {
                            readonly ETB: "#/components/schemas/mobile_money_etb_instruction";
                            readonly GHS: "#/components/schemas/mobile_money_etb_instruction";
                            readonly KES: "#/components/schemas/mobile_money_etb_instruction";
                            readonly RWF: "#/components/schemas/mobile_money_etb_instruction";
                            readonly TZS: "#/components/schemas/mobile_money_etb_instruction";
                            readonly UGX: "#/components/schemas/mobile_money_etb_instruction";
                            readonly ZMW: "#/components/schemas/mobile_money_etb_instruction";
                            readonly XAF: "#/components/schemas/mobile_money_xaf_instruction";
                            readonly XOF: "#/components/schemas/mobile_money_xaf_instruction";
                        };
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["action", "payment_instruction"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "wallet";
                    readonly readOnly: true;
                };
                readonly action: {
                    readonly description: "To define whether the transfer should be processed immediately, scheduled for a later date, or deferred for future processing";
                    readonly type: "string";
                    readonly enum: readonly ["instant", "deferred", "scheduled"];
                };
                readonly reference: {
                    readonly type: "string";
                    readonly pattern: "^[a-zA-Z0-9\\-]+$";
                    readonly minLength: 6;
                    readonly maxLength: 42;
                    readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                    readonly "x-pattern-message": "must be an alphanumeric string";
                };
                readonly narration: {
                    readonly description: "transfer description. This cannot be greater than 180 characters";
                    readonly type: "string";
                    readonly minLength: 1;
                    readonly maxLength: 180;
                };
                readonly disburse_option: {
                    readonly type: "object";
                    readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                    readonly properties: {
                        readonly date_time: {
                            readonly type: "string";
                            readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                        };
                        readonly timezone: {
                            readonly type: "string";
                            readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                        };
                    };
                };
                readonly callback_url: {
                    readonly description: "To set a callback url for receiving payout webhook, this will take precedent over the merchant's default webhook url";
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
                readonly payment_instruction: {
                    readonly type: "object";
                    readonly required: readonly ["recipient", "destination_currency", "source_currency", "amount"];
                    readonly properties: {
                        readonly source_currency: {
                            readonly description: "The currency in which the transfer amount will be debited from the merchant's wallet. It must be provided in ISO 4217 format (e.g., USD, EUR, EGP)";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly destination_currency: {
                            readonly type: "string";
                            readonly description: "The currency in which the transfer amount will be credited to the recipient. It must be provided in ISO 4217 format (e.g., USD, EUR, EGP)";
                        };
                        readonly amount: {
                            readonly type: "object";
                            readonly required: readonly ["value", "applies_to"];
                            readonly properties: {
                                readonly value: {
                                    readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                    readonly type: "number";
                                    readonly format: "decimal";
                                    readonly minimum: 1;
                                    readonly examples: readonly [3000.44];
                                };
                                readonly applies_to: {
                                    readonly type: "string";
                                    readonly enum: readonly ["destination_currency", "source_currency"];
                                    readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                                };
                            };
                        };
                        readonly recipient: {
                            readonly type: "object";
                            readonly required: readonly ["wallet"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly default: "wallet";
                                    readonly readOnly: true;
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Customer's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                    readonly readOnly: true;
                                };
                                readonly wallet: {
                                    readonly type: "object";
                                    readonly required: readonly ["provider", "identifier"];
                                    readonly properties: {
                                        readonly provider: {
                                            readonly type: "string";
                                            readonly enum: readonly ["flutterwave"];
                                            readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported";
                                        };
                                        readonly identifier: {
                                            readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                                            readonly type: "string";
                                            readonly minLength: 7;
                                            readonly maxLength: 25;
                                            readonly pattern: "^[a-zA-Z0-9]*$";
                                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                                            readonly examples: readonly ["00118468"];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "type";
            readonly mapping: {
                readonly bank: "#/components/schemas/bank_transfer";
                readonly mobile_money: "#/components/schemas/mobile_money_transfer";
                readonly wallet: "#/components/schemas/wallet_transfer";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "The unique identifier for the transfer";
                            readonly type: "string";
                            readonly examples: readonly ["trf_yuK89vb"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of transfer, indicating the method used to transfer funds.\n\n`bank` `mobile_money` `wallet` `cash_pickup`";
                            readonly enum: readonly ["bank", "mobile_money", "wallet", "cash_pickup"];
                            readonly examples: readonly ["bank"];
                        };
                        readonly action: {
                            readonly description: "Whether to process the transfer instantly or at a later date.\n\n`instant` `deferred` `scheduled` `retry` `duplicate`";
                            readonly type: "string";
                            readonly enum: readonly ["instant", "deferred", "scheduled", "retry", "duplicate"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly description: "The status of the transfer.\n\n`NEW` `PENDING` `FAILED` `SUCCESSFUL` `CANCELLED` `INITIATED`";
                            readonly type: "string";
                            readonly enum: readonly ["NEW", "PENDING", "FAILED", "SUCCESSFUL", "CANCELLED", "INITIATED"];
                        };
                        readonly reversal: {
                            readonly type: "object";
                            readonly properties: {
                                readonly reversal_datetime: {
                                    readonly description: "The transfer reversal date.";
                                    readonly type: "string";
                                    readonly format: "date-time";
                                };
                                readonly initial_status: {
                                    readonly description: "The original status of the transfer before reversal.";
                                    readonly type: "string";
                                    readonly examples: readonly ["SUCCESSFUL"];
                                };
                                readonly reconciliation_status: {
                                    readonly description: "The final status.";
                                    readonly type: "string";
                                    readonly examples: readonly ["REVERSED"];
                                };
                                readonly reconciliation_type: {
                                    readonly description: "Specifies either debit or credit.\n\n`D` `C`";
                                    readonly type: "string";
                                    readonly enum: readonly ["D", "C"];
                                };
                            };
                        };
                        readonly narration: {
                            readonly type: "string";
                            readonly description: "A brief description or message accompanying the transfer, provided by the sender to describe the purpose of the transfer.";
                            readonly examples: readonly ["Salary payment for January"];
                        };
                        readonly source_currency: {
                            readonly description: "The currency in which the transfer was debited.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly destination_currency: {
                            readonly description: "The currency in which the amount will be credited to the recipient.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["EUR"];
                        };
                        readonly amount: {
                            readonly type: "object";
                            readonly required: readonly ["value", "applies_to"];
                            readonly properties: {
                                readonly value: {
                                    readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                    readonly type: "number";
                                    readonly format: "decimal";
                                    readonly minimum: 1;
                                    readonly examples: readonly [3000.44];
                                };
                                readonly applies_to: {
                                    readonly type: "string";
                                    readonly enum: readonly ["destination_currency", "source_currency"];
                                    readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)\n\n`destination_currency` `source_currency`";
                                };
                            };
                        };
                        readonly fee: {
                            readonly type: "object";
                            readonly properties: {
                                readonly currency: {
                                    readonly description: "The currency in which the fee is charged.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly description: "The amount charged as a fee for the transfer.";
                                    readonly format: "double";
                                    readonly minimum: 0;
                                    readonly examples: readonly [10.35];
                                    readonly maximum: 1.7976931348623157e+308;
                                };
                            };
                        };
                        readonly debit_information: {
                            readonly type: "object";
                            readonly properties: {
                                readonly currency: {
                                    readonly description: "The currency in which the fees and charges are applied for the transfer.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                                readonly actual_debit_amount: {
                                    readonly type: "number";
                                    readonly description: "The exact amount deducted for the transfer, including applicable fees.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                                readonly rate_used: {
                                    readonly type: "number";
                                    readonly description: "The exchange rate applied to calculate the transfer amount.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                                readonly vat: {
                                    readonly type: "number";
                                    readonly description: "The Value-Added Tax (VAT) amount charged for the transfer.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                            };
                        };
                        readonly payment_information: {
                            readonly type: "object";
                            readonly properties: {
                                readonly proof: {
                                    readonly type: "string";
                                    readonly description: "Session ID";
                                    readonly examples: readonly ["11000224070317345400001414441712312381"];
                                };
                            };
                        };
                        readonly retry: {
                            readonly description: "Contains the information of the initial transfer that was retried.";
                            readonly type: "object";
                            readonly properties: {
                                readonly parent_id: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the original transfer that is being retried.";
                                    readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                };
                                readonly parent_reference: {
                                    readonly type: "string";
                                    readonly description: "The external reference of the original transfer that is being retried.";
                                    readonly examples: readonly ["flw_z882wFGMjc"];
                                };
                            };
                        };
                        readonly duplicate: {
                            readonly description: "Contains the information of the initial transfer that was duplicated.";
                            readonly type: "object";
                            readonly properties: {
                                readonly parent_id: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the original transfer that is being retried.";
                                    readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                };
                                readonly parent_reference: {
                                    readonly type: "string";
                                    readonly description: "The external reference of the original transfer that is being retried.";
                                    readonly examples: readonly ["flw_z882wFGMjc"];
                                };
                            };
                        };
                        readonly disburse_option: {
                            readonly type: "object";
                            readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                            readonly properties: {
                                readonly date_time: {
                                    readonly type: "string";
                                    readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                                };
                                readonly timezone: {
                                    readonly type: "string";
                                    readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                                    readonly description: "`Africa/Cairo` `Africa/Accra` `Africa/Nairobi` `Africa/Lagos` `Africa/Freetown` `Africa/Dar_es_Salaam` `Africa/Kampala` `Africa/Douala` `Africa/Ndjamena` `Africa/Kinshasa` `Africa/Lubumbashi` `Africa/Libreville` `Africa/Porto-Novo` `Africa/Abidjan` `Africa/Dakar` `Africa/Johannesburg` `America/New_York` `America/Los_Angeles` `America/Sao_Paulo` `Asia/Dubai` `Asia/Kolkata` `Asia/Tokyo` `Australia/Sydney` `Europe/London` `Europe/Berlin` `Europe/Moscow` `Pacific/Auckland` `Pacific/Honolulu` `UTC`";
                                };
                            };
                        };
                        readonly callback_url: {
                            readonly type: "string";
                            readonly description: "A URL where callbacks or notifications will be sent.";
                            readonly examples: readonly ["https://example.com/flw/callback"];
                        };
                        readonly provider_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly description: "Represents payout error codes. The `type` and `code` fields are separate enums where:\n- `type` indicates the nature of the error.\n- `code` provides the specific error code associated with the error type.\n- `message` explains the meaning of the `type-code` pair\n";
                            readonly properties: {
                                readonly message: {
                                    readonly type: "string";
                                    readonly description: "The processor message for the transfer.";
                                    readonly examples: readonly ["DISBURSE FAILED: Insufficient wallet balance"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payout error, representing the specific error scenario.\n\n\n`transfer_amount_exceeds_limit` `transfer_amount_below_limit` `monthly_transfer_limit_exceeded` `daily_transfer_limit_exceeded` `transfer_limit_not_set_for_currency` `payout_creation_failed` `insufficient_balance` `service_unavailable` `transfer_failed` `pricing_not_set` `currency_conversion_not_set` `rejected_recipient_merchant` `invalid_bank_code` `unable_to_determine_country` `invalid_wallet_currency`";
                                    readonly enum: readonly ["transfer_amount_exceeds_limit", "transfer_amount_below_limit", "monthly_transfer_limit_exceeded", "daily_transfer_limit_exceeded", "transfer_limit_not_set_for_currency", "payout_creation_failed", "insufficient_balance", "service_unavailable", "transfer_failed", "pricing_not_set", "currency_conversion_not_set", "rejected_recipient_merchant", "invalid_bank_code", "unable_to_determine_country", "invalid_wallet_currency"];
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly description: "The unique code associated with the error type. This code follows a pattern of four digits.\n";
                                    readonly pattern: "\\d{4}";
                                };
                            };
                        };
                        readonly recipient: {
                            readonly description: "The recipient details.";
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["bank"];
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "code"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "The Recipient's account number.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly account_type: {
                                                readonly description: "The Recipient's account type.\n\n`checking` `savings` `individual` `corporate`";
                                                readonly type: "string";
                                                readonly enum: readonly ["checking", "savings", "individual", "corporate"];
                                            };
                                            readonly code: {
                                                readonly description: "The Recipient's bank code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly branch: {
                                                readonly description: "The Recipient's bank branch.";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly description: "The Recipient's bank name.";
                                                readonly type: "string";
                                            };
                                            readonly routing_number: {
                                                readonly description: "The Recipient bank routing number.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly swift_code: {
                                                readonly description: "The Recipient bank swift code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly sort_code: {
                                                readonly description: "The Recipient bank sort code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["name"];
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["cornelius@gmail.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "country", "msisdn"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "recipient network";
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly description: "recipient country";
                                                readonly type: "string";
                                            };
                                            readonly msisdn: {
                                                readonly description: "recipient phone number";
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "wallet";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly readOnly: true;
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly wallet: {
                                        readonly type: "object";
                                        readonly required: readonly ["provider", "identifier"];
                                        readonly properties: {
                                            readonly provider: {
                                                readonly type: "string";
                                                readonly enum: readonly ["flutterwave"];
                                                readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported\n\n`flutterwave`";
                                            };
                                            readonly identifier: {
                                                readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                                                readonly type: "string";
                                                readonly examples: readonly ["00118468"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "cash_pickup";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly cash_pickup: {
                                        readonly type: "object";
                                        readonly required: readonly ["network"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "cashpickup network";
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly bank: "#/components/schemas/bank_recipient";
                                    readonly mobile_money: "#/components/schemas/mobile_money_recipient";
                                    readonly wallet: "#/components/schemas/wallet_recipient";
                                    readonly cash_pickup: "#/components/schemas/cashpickup_recipient";
                                };
                            };
                        };
                        readonly sender: {
                            readonly description: "The sender details.";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly description: "ID of the transfer sender";
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Sender's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly national_identification: {
                                    readonly description: "The Sender's government identification.";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                            readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                        };
                                        readonly identifier: {
                                            readonly type: "string";
                                            readonly minLength: 4;
                                            readonly maxLength: 40;
                                            readonly examples: readonly ["FLY5869798686"];
                                        };
                                        readonly expiration_date: {
                                            readonly type: "string";
                                            readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                            readonly examples: readonly ["2029-07-08"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The Sender's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                                readonly date_of_birth: {
                                    readonly description: "The Sender's date of birth.";
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Sender's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "The Sender's residential address.";
                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                    readonly properties: {
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "The name of the city.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly country: {
                                            readonly description: "ISO2 country code";
                                            readonly type: "string";
                                            readonly pattern: "^[A-Z]{2}$";
                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                            readonly examples: readonly ["US"];
                                        };
                                        readonly line1: {
                                            readonly type: "string";
                                            readonly description: "The first line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["123 Main Street"];
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                            readonly description: "The second line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["Apt 4B"];
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["10001"];
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or region.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The date and time when the transfer was submitted for processing.";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const FeesGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly amount: {
                    readonly type: "number";
                    readonly format: "decimal";
                    readonly examples: readonly [12.34];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The amount in decimal format.";
                };
                readonly card6: {
                    readonly type: "string";
                    readonly examples: readonly ["424242"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The card BIN (Bank Identification Number)—the first six digits of the card number.";
                };
                readonly country: {
                    readonly type: "string";
                    readonly examples: readonly ["NG"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The ISO 3166-1 alpha-2 country code.";
                };
                readonly currency: {
                    readonly type: "string";
                    readonly examples: readonly ["NGN"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ISO 4217 currency code.";
                };
                readonly network: {
                    readonly type: "string";
                    readonly examples: readonly ["MTN"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The network for Mobile Money transaction.";
                };
                readonly payment_method: {
                    readonly type: "string";
                    readonly examples: readonly ["card"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The Payment method of the transaction.";
                };
            };
            readonly required: readonly ["amount", "currency", "payment_method"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly additionalProperties: false;
                    readonly properties: {
                        readonly charge_amount: {
                            readonly type: "number";
                            readonly format: "decimal";
                        };
                        readonly fee: {
                            readonly type: "array";
                            readonly description: "Fees charged on payment amount";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                        readonly examples: readonly ["vat"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The fee amount in decimal format.";
                                        readonly examples: readonly [12.3];
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const GetWalletStatement: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly next: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyNC0xMS0yN1QxMjozMjozNC42MjBa"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly previous: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyNC0xMS0yOVQwMjoxMDo1My45OTla"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
                readonly from: {
                    readonly type: "string";
                    readonly examples: readonly ["2025-04-21T10:55:16Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The start date and time for a period. This parameter is used in conjunction with the 'to' parameter to define a time range. The value should be in ISO 8601 format.";
                };
                readonly to: {
                    readonly type: "string";
                    readonly examples: readonly ["2025-05-21T10:48:18Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The end date and time for a period. This parameter is used in conjunction with the 'from' parameter to define a time range. The value should be in **ISO 8601 format**.";
                };
                readonly currency: {
                    readonly description: "The currency code used in the query";
                    readonly type: "string";
                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                    readonly examples: readonly ["NGN"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["currency"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "object";
                            readonly properties: {
                                readonly next: {
                                    readonly type: "string";
                                    readonly examples: readonly ["MjAyNC0xMS0yN1QxMjozMjozNC42MjBa"];
                                };
                                readonly previous: {
                                    readonly type: "string";
                                    readonly examples: readonly ["MjAyNC0xMS0yOVQwMjoxMDo1My45OTla"];
                                };
                                readonly limit: {
                                    readonly type: "integer";
                                    readonly format: "int64";
                                    readonly examples: readonly [10];
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total: {
                                    readonly type: "integer";
                                    readonly format: "int64";
                                    readonly examples: readonly [1000];
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly has_more_items: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly transactions: {
                            readonly type: "array";
                            readonly maxItems: 50;
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly transaction_direction: {
                                        readonly type: "string";
                                        readonly enum: readonly ["credit", "debit"];
                                        readonly description: "Indicates whether the transaction added to (`credit`) or deducted from (`debit`) the wallet balance.\n\n`credit` `debit`";
                                    };
                                    readonly amount: {
                                        readonly type: "object";
                                        readonly description: "The amount that was credited or debited in this transaction.";
                                        readonly properties: {
                                            readonly value: {
                                                readonly type: "number";
                                                readonly format: "decimal";
                                                readonly description: "The numeric value of the transaction amount.";
                                            };
                                            readonly currency: {
                                                readonly description: "The currency in which the transaction was processed.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                readonly examples: readonly ["NGN"];
                                            };
                                        };
                                    };
                                    readonly balance: {
                                        readonly type: "object";
                                        readonly description: "Wallet balance details before and after the transaction.";
                                        readonly properties: {
                                            readonly currency: {
                                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                readonly examples: readonly ["NGN"];
                                            };
                                            readonly before: {
                                                readonly type: "number";
                                                readonly format: "decimal";
                                                readonly description: "Wallet balance before the transaction occurred.";
                                            };
                                            readonly after: {
                                                readonly type: "number";
                                                readonly format: "decimal";
                                                readonly description: "Wallet balance after the transaction was completed.";
                                            };
                                        };
                                    };
                                    readonly reference: {
                                        readonly type: "string";
                                        readonly writeOnly: true;
                                    };
                                    readonly remarks: {
                                        readonly type: "string";
                                        readonly description: "Note associated with the transaction.";
                                    };
                                    readonly sent_amount: {
                                        readonly type: "object";
                                        readonly description: "The original amount sent or requested in the transaction, which may differ from the final amount due to fees, currency conversion, or adjustments.";
                                        readonly properties: {
                                            readonly value: {
                                                readonly type: "number";
                                                readonly format: "decimal";
                                                readonly description: "The value of the amount originally sent, represented as a string to preserve formatting (e.g., precision).";
                                            };
                                            readonly currency: {
                                                readonly description: "The currency of the originally sent amount\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                readonly examples: readonly ["NGN"];
                                            };
                                        };
                                    };
                                    readonly transaction_type: {
                                        readonly type: "string";
                                        readonly description: "Categorizes the nature of the transaction.\n\n`transfer` `fee` `reversal` `reversal_fee` `settlement` `funding` `bill` `chargeback` `card` `card_fee` `otp_saas`";
                                        readonly enum: readonly ["transfer", "fee", "reversal", "reversal_fee", "settlement", "funding", "bill", "chargeback", "card", "card_fee", "otp_saas"];
                                    };
                                    readonly transaction_date: {
                                        readonly type: "string";
                                        readonly description: "The date and time when the transfer was submitted for processing.";
                                    };
                                    readonly transfer: {
                                        readonly description: "Transfer-specific details, populated when the transaction type is related to a transfer.";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly description: "The unique identifier for the transfer";
                                                readonly type: "string";
                                                readonly examples: readonly ["trf_yuK89vb"];
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                                readonly description: "The type of transfer, indicating the method used to transfer funds.\n\n`bank` `mobile_money` `wallet` `cash_pickup`";
                                                readonly enum: readonly ["bank", "mobile_money", "wallet", "cash_pickup"];
                                                readonly examples: readonly ["bank"];
                                            };
                                            readonly action: {
                                                readonly description: "Whether to process the transfer instantly or at a later date.\n\n`instant` `deferred` `scheduled` `retry` `duplicate`";
                                                readonly type: "string";
                                                readonly enum: readonly ["instant", "deferred", "scheduled", "retry", "duplicate"];
                                            };
                                            readonly reference: {
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                                                readonly minLength: 6;
                                                readonly maxLength: 42;
                                                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                                                readonly "x-pattern-message": "must be an alphanumeric string";
                                            };
                                            readonly status: {
                                                readonly description: "The status of the transfer.\n\n`NEW` `PENDING` `FAILED` `SUCCESSFUL` `CANCELLED` `INITIATED`";
                                                readonly type: "string";
                                                readonly enum: readonly ["NEW", "PENDING", "FAILED", "SUCCESSFUL", "CANCELLED", "INITIATED"];
                                            };
                                            readonly reversal: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly reversal_datetime: {
                                                        readonly description: "The transfer reversal date.";
                                                        readonly type: "string";
                                                        readonly format: "date-time";
                                                    };
                                                    readonly initial_status: {
                                                        readonly description: "The original status of the transfer before reversal.";
                                                        readonly type: "string";
                                                        readonly examples: readonly ["SUCCESSFUL"];
                                                    };
                                                    readonly reconciliation_status: {
                                                        readonly description: "The final status.";
                                                        readonly type: "string";
                                                        readonly examples: readonly ["REVERSED"];
                                                    };
                                                    readonly reconciliation_type: {
                                                        readonly description: "Specifies either debit or credit.\n\n`D` `C`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["D", "C"];
                                                    };
                                                };
                                            };
                                            readonly narration: {
                                                readonly type: "string";
                                                readonly description: "A brief description or message accompanying the transfer, provided by the sender to describe the purpose of the transfer.";
                                                readonly examples: readonly ["Salary payment for January"];
                                            };
                                            readonly source_currency: {
                                                readonly description: "The currency in which the transfer was debited.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                readonly examples: readonly ["NGN"];
                                            };
                                            readonly destination_currency: {
                                                readonly description: "The currency in which the amount will be credited to the recipient.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                readonly examples: readonly ["EUR"];
                                            };
                                            readonly amount: {
                                                readonly type: "object";
                                                readonly required: readonly ["value", "applies_to"];
                                                readonly properties: {
                                                    readonly value: {
                                                        readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                                        readonly type: "number";
                                                        readonly format: "decimal";
                                                        readonly minimum: 1;
                                                        readonly examples: readonly [3000.44];
                                                    };
                                                    readonly applies_to: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["destination_currency", "source_currency"];
                                                        readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)\n\n`destination_currency` `source_currency`";
                                                    };
                                                };
                                            };
                                            readonly fee: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly currency: {
                                                        readonly description: "The currency in which the fee is charged.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                        readonly examples: readonly ["NGN"];
                                                    };
                                                    readonly value: {
                                                        readonly type: "number";
                                                        readonly description: "The amount charged as a fee for the transfer.";
                                                        readonly format: "double";
                                                        readonly minimum: 0;
                                                        readonly examples: readonly [10.35];
                                                        readonly maximum: 1.7976931348623157e+308;
                                                    };
                                                };
                                            };
                                            readonly debit_information: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly currency: {
                                                        readonly description: "The currency in which the fees and charges are applied for the transfer.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                        readonly type: "string";
                                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                        readonly examples: readonly ["NGN"];
                                                    };
                                                    readonly actual_debit_amount: {
                                                        readonly type: "number";
                                                        readonly description: "The exact amount deducted for the transfer, including applicable fees.";
                                                        readonly format: "decimal";
                                                        readonly minimum: 0;
                                                        readonly examples: readonly [100.35];
                                                    };
                                                    readonly rate_used: {
                                                        readonly type: "number";
                                                        readonly description: "The exchange rate applied to calculate the transfer amount.";
                                                        readonly format: "decimal";
                                                        readonly minimum: 0;
                                                        readonly examples: readonly [100.35];
                                                    };
                                                    readonly vat: {
                                                        readonly type: "number";
                                                        readonly description: "The Value-Added Tax (VAT) amount charged for the transfer.";
                                                        readonly format: "decimal";
                                                        readonly minimum: 0;
                                                        readonly examples: readonly [100.35];
                                                    };
                                                };
                                            };
                                            readonly payment_information: {
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly proof: {
                                                        readonly type: "string";
                                                        readonly description: "Session ID";
                                                        readonly examples: readonly ["11000224070317345400001414441712312381"];
                                                    };
                                                };
                                            };
                                            readonly retry: {
                                                readonly description: "Contains the information of the initial transfer that was retried.";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly parent_id: {
                                                        readonly type: "string";
                                                        readonly description: "The unique identifier of the original transfer that is being retried.";
                                                        readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                                    };
                                                    readonly parent_reference: {
                                                        readonly type: "string";
                                                        readonly description: "The external reference of the original transfer that is being retried.";
                                                        readonly examples: readonly ["flw_z882wFGMjc"];
                                                    };
                                                };
                                            };
                                            readonly duplicate: {
                                                readonly description: "Contains the information of the initial transfer that was duplicated.";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly parent_id: {
                                                        readonly type: "string";
                                                        readonly description: "The unique identifier of the original transfer that is being retried.";
                                                        readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                                    };
                                                    readonly parent_reference: {
                                                        readonly type: "string";
                                                        readonly description: "The external reference of the original transfer that is being retried.";
                                                        readonly examples: readonly ["flw_z882wFGMjc"];
                                                    };
                                                };
                                            };
                                            readonly disburse_option: {
                                                readonly type: "object";
                                                readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                                                readonly properties: {
                                                    readonly date_time: {
                                                        readonly type: "string";
                                                        readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                                                    };
                                                    readonly timezone: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                                                        readonly description: "`Africa/Cairo` `Africa/Accra` `Africa/Nairobi` `Africa/Lagos` `Africa/Freetown` `Africa/Dar_es_Salaam` `Africa/Kampala` `Africa/Douala` `Africa/Ndjamena` `Africa/Kinshasa` `Africa/Lubumbashi` `Africa/Libreville` `Africa/Porto-Novo` `Africa/Abidjan` `Africa/Dakar` `Africa/Johannesburg` `America/New_York` `America/Los_Angeles` `America/Sao_Paulo` `Asia/Dubai` `Asia/Kolkata` `Asia/Tokyo` `Australia/Sydney` `Europe/London` `Europe/Berlin` `Europe/Moscow` `Pacific/Auckland` `Pacific/Honolulu` `UTC`";
                                                    };
                                                };
                                            };
                                            readonly callback_url: {
                                                readonly type: "string";
                                                readonly description: "A URL where callbacks or notifications will be sent.";
                                                readonly examples: readonly ["https://example.com/flw/callback"];
                                            };
                                            readonly provider_response: {
                                                readonly type: "object";
                                                readonly required: readonly ["type", "code"];
                                                readonly description: "Represents payout error codes. The `type` and `code` fields are separate enums where:\n- `type` indicates the nature of the error.\n- `code` provides the specific error code associated with the error type.\n- `message` explains the meaning of the `type-code` pair\n";
                                                readonly properties: {
                                                    readonly message: {
                                                        readonly type: "string";
                                                        readonly description: "The processor message for the transfer.";
                                                        readonly examples: readonly ["DISBURSE FAILED: Insufficient wallet balance"];
                                                    };
                                                    readonly type: {
                                                        readonly type: "string";
                                                        readonly description: "The type of the payout error, representing the specific error scenario.\n\n\n`transfer_amount_exceeds_limit` `transfer_amount_below_limit` `monthly_transfer_limit_exceeded` `daily_transfer_limit_exceeded` `transfer_limit_not_set_for_currency` `payout_creation_failed` `insufficient_balance` `service_unavailable` `transfer_failed` `pricing_not_set` `currency_conversion_not_set` `rejected_recipient_merchant` `invalid_bank_code` `unable_to_determine_country` `invalid_wallet_currency`";
                                                        readonly enum: readonly ["transfer_amount_exceeds_limit", "transfer_amount_below_limit", "monthly_transfer_limit_exceeded", "daily_transfer_limit_exceeded", "transfer_limit_not_set_for_currency", "payout_creation_failed", "insufficient_balance", "service_unavailable", "transfer_failed", "pricing_not_set", "currency_conversion_not_set", "rejected_recipient_merchant", "invalid_bank_code", "unable_to_determine_country", "invalid_wallet_currency"];
                                                    };
                                                    readonly code: {
                                                        readonly type: "string";
                                                        readonly description: "The unique code associated with the error type. This code follows a pattern of four digits.\n";
                                                        readonly pattern: "\\d{4}";
                                                    };
                                                };
                                            };
                                            readonly recipient: {
                                                readonly description: "The recipient details.";
                                                readonly oneOf: readonly [{
                                                    readonly type: "object";
                                                    readonly required: readonly ["bank"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly description: "ID of the transfer recipient";
                                                            readonly type: "string";
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                            readonly default: "bank";
                                                            readonly readOnly: true;
                                                        };
                                                        readonly name: {
                                                            readonly type: "object";
                                                            readonly description: "The Customer's full name.";
                                                            readonly properties: {
                                                                readonly first: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's first name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["King"];
                                                                };
                                                                readonly middle: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's middle name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["Leo"];
                                                                };
                                                                readonly last: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's last name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["LeBron"];
                                                                };
                                                            };
                                                        };
                                                        readonly currency: {
                                                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                            readonly examples: readonly ["NGN"];
                                                        };
                                                        readonly national_identification: {
                                                            readonly description: "Sender government identification";
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly type: {
                                                                    readonly type: "string";
                                                                    readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                                    readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                                };
                                                                readonly identifier: {
                                                                    readonly type: "string";
                                                                    readonly minLength: 4;
                                                                    readonly maxLength: 40;
                                                                    readonly examples: readonly ["FLY5869798686"];
                                                                };
                                                                readonly expiration_date: {
                                                                    readonly type: "string";
                                                                    readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                                    readonly examples: readonly ["2029-07-08"];
                                                                };
                                                            };
                                                        };
                                                        readonly phone: {
                                                            readonly type: "object";
                                                            readonly description: "The customer's mobile number.";
                                                            readonly required: readonly ["number", "country_code"];
                                                            readonly properties: {
                                                                readonly country_code: {
                                                                    readonly description: "ISO 3166 alpha-3 country code.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[0-9]{1,3}$";
                                                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                                    readonly examples: readonly ["234"];
                                                                };
                                                                readonly number: {
                                                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[0-9]{7,10}$";
                                                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                                    readonly examples: readonly ["8001122334"];
                                                                };
                                                            };
                                                        };
                                                        readonly date_of_birth: {
                                                            readonly type: "string";
                                                            readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                                            readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                        };
                                                        readonly email: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's email address.";
                                                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                                            readonly "x-pattern-message": "must be an email format";
                                                            readonly examples: readonly ["hi@flutterwave.com"];
                                                        };
                                                        readonly address: {
                                                            readonly type: "object";
                                                            readonly description: "Customer address information.";
                                                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                            readonly properties: {
                                                                readonly city: {
                                                                    readonly type: "string";
                                                                    readonly description: "The name of the city.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["New York"];
                                                                };
                                                                readonly country: {
                                                                    readonly description: "ISO2 country code";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[A-Z]{2}$";
                                                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                                    readonly examples: readonly ["US"];
                                                                };
                                                                readonly line1: {
                                                                    readonly type: "string";
                                                                    readonly description: "The first line of the Customer's address.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["123 Main Street"];
                                                                };
                                                                readonly line2: {
                                                                    readonly type: "string";
                                                                    readonly description: "The second line of the Customer's address.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["Apt 4B"];
                                                                };
                                                                readonly postal_code: {
                                                                    readonly type: "string";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["10001"];
                                                                };
                                                                readonly state: {
                                                                    readonly type: "string";
                                                                    readonly description: "The state or region.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["New York"];
                                                                };
                                                            };
                                                        };
                                                        readonly bank: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["account_number", "code"];
                                                            readonly properties: {
                                                                readonly account_number: {
                                                                    readonly description: "The Recipient's account number.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[a-zA-Z0-9]*$";
                                                                };
                                                                readonly account_type: {
                                                                    readonly description: "The Recipient's account type.\n\n`checking` `savings` `individual` `corporate`";
                                                                    readonly type: "string";
                                                                    readonly enum: readonly ["checking", "savings", "individual", "corporate"];
                                                                };
                                                                readonly code: {
                                                                    readonly description: "The Recipient's bank code.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[a-zA-Z0-9]*$";
                                                                };
                                                                readonly branch: {
                                                                    readonly description: "The Recipient's bank branch.";
                                                                    readonly type: "string";
                                                                };
                                                                readonly name: {
                                                                    readonly description: "The Recipient's bank name.";
                                                                    readonly type: "string";
                                                                };
                                                                readonly routing_number: {
                                                                    readonly description: "The Recipient bank routing number.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[a-zA-Z0-9]*$";
                                                                };
                                                                readonly swift_code: {
                                                                    readonly description: "The Recipient bank swift code.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[a-zA-Z0-9]*$";
                                                                };
                                                                readonly sort_code: {
                                                                    readonly description: "The Recipient bank sort code.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[a-zA-Z0-9]*$";
                                                                };
                                                            };
                                                        };
                                                    };
                                                }, {
                                                    readonly type: "object";
                                                    readonly required: readonly ["name"];
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly description: "ID of the transfer recipient";
                                                            readonly type: "string";
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                            readonly default: "mobile_money";
                                                            readonly readOnly: true;
                                                        };
                                                        readonly name: {
                                                            readonly type: "object";
                                                            readonly description: "The Customer's full name.";
                                                            readonly properties: {
                                                                readonly first: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's first name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["King"];
                                                                };
                                                                readonly middle: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's middle name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["Leo"];
                                                                };
                                                                readonly last: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's last name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["LeBron"];
                                                                };
                                                            };
                                                        };
                                                        readonly currency: {
                                                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                            readonly examples: readonly ["NGN"];
                                                        };
                                                        readonly national_identification: {
                                                            readonly description: "Sender government identification";
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly type: {
                                                                    readonly type: "string";
                                                                    readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                                    readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                                };
                                                                readonly identifier: {
                                                                    readonly type: "string";
                                                                    readonly minLength: 4;
                                                                    readonly maxLength: 40;
                                                                    readonly examples: readonly ["FLY5869798686"];
                                                                };
                                                                readonly expiration_date: {
                                                                    readonly type: "string";
                                                                    readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                                    readonly examples: readonly ["2029-07-08"];
                                                                };
                                                            };
                                                        };
                                                        readonly phone: {
                                                            readonly type: "object";
                                                            readonly description: "The customer's mobile number.";
                                                            readonly required: readonly ["number", "country_code"];
                                                            readonly properties: {
                                                                readonly country_code: {
                                                                    readonly description: "ISO 3166 alpha-3 country code.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[0-9]{1,3}$";
                                                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                                    readonly examples: readonly ["234"];
                                                                };
                                                                readonly number: {
                                                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[0-9]{7,10}$";
                                                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                                    readonly examples: readonly ["8001122334"];
                                                                };
                                                            };
                                                        };
                                                        readonly date_of_birth: {
                                                            readonly type: "string";
                                                            readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                                            readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                        };
                                                        readonly email: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's email address.";
                                                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                                            readonly "x-pattern-message": "must be an email format";
                                                            readonly examples: readonly ["cornelius@gmail.com"];
                                                        };
                                                        readonly address: {
                                                            readonly type: "object";
                                                            readonly description: "Customer address information.";
                                                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                            readonly properties: {
                                                                readonly city: {
                                                                    readonly type: "string";
                                                                    readonly description: "The name of the city.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["New York"];
                                                                };
                                                                readonly country: {
                                                                    readonly description: "ISO2 country code";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[A-Z]{2}$";
                                                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                                    readonly examples: readonly ["US"];
                                                                };
                                                                readonly line1: {
                                                                    readonly type: "string";
                                                                    readonly description: "The first line of the Customer's address.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["123 Main Street"];
                                                                };
                                                                readonly line2: {
                                                                    readonly type: "string";
                                                                    readonly description: "The second line of the Customer's address.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["Apt 4B"];
                                                                };
                                                                readonly postal_code: {
                                                                    readonly type: "string";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["10001"];
                                                                };
                                                                readonly state: {
                                                                    readonly type: "string";
                                                                    readonly description: "The state or region.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["New York"];
                                                                };
                                                            };
                                                        };
                                                        readonly mobile_money: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["network", "country", "msisdn"];
                                                            readonly properties: {
                                                                readonly network: {
                                                                    readonly description: "recipient network";
                                                                    readonly type: "string";
                                                                };
                                                                readonly country: {
                                                                    readonly description: "recipient country";
                                                                    readonly type: "string";
                                                                };
                                                                readonly msisdn: {
                                                                    readonly description: "recipient phone number";
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                    };
                                                }, {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly description: "ID of the transfer recipient";
                                                            readonly type: "string";
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                            readonly default: "wallet";
                                                            readonly readOnly: true;
                                                        };
                                                        readonly name: {
                                                            readonly type: "object";
                                                            readonly description: "The Customer's full name.";
                                                            readonly readOnly: true;
                                                            readonly properties: {
                                                                readonly first: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's first name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["King"];
                                                                };
                                                                readonly middle: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's middle name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["Leo"];
                                                                };
                                                                readonly last: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's last name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["LeBron"];
                                                                };
                                                            };
                                                        };
                                                        readonly currency: {
                                                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                            readonly examples: readonly ["NGN"];
                                                        };
                                                        readonly wallet: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["provider", "identifier"];
                                                            readonly properties: {
                                                                readonly provider: {
                                                                    readonly type: "string";
                                                                    readonly enum: readonly ["flutterwave"];
                                                                    readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported\n\n`flutterwave`";
                                                                };
                                                                readonly identifier: {
                                                                    readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                                                                    readonly type: "string";
                                                                    readonly examples: readonly ["00118468"];
                                                                };
                                                            };
                                                        };
                                                    };
                                                }, {
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly id: {
                                                            readonly description: "ID of the transfer recipient";
                                                            readonly type: "string";
                                                        };
                                                        readonly type: {
                                                            readonly type: "string";
                                                            readonly default: "cash_pickup";
                                                            readonly readOnly: true;
                                                        };
                                                        readonly name: {
                                                            readonly type: "object";
                                                            readonly description: "The Customer's full name.";
                                                            readonly properties: {
                                                                readonly first: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's first name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["King"];
                                                                };
                                                                readonly middle: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's middle name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["Leo"];
                                                                };
                                                                readonly last: {
                                                                    readonly type: "string";
                                                                    readonly description: "The Customer's last name.";
                                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                    readonly examples: readonly ["LeBron"];
                                                                };
                                                            };
                                                        };
                                                        readonly currency: {
                                                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                            readonly examples: readonly ["NGN"];
                                                        };
                                                        readonly national_identification: {
                                                            readonly description: "Sender government identification";
                                                            readonly type: "object";
                                                            readonly properties: {
                                                                readonly type: {
                                                                    readonly type: "string";
                                                                    readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                                    readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                                };
                                                                readonly identifier: {
                                                                    readonly type: "string";
                                                                    readonly minLength: 4;
                                                                    readonly maxLength: 40;
                                                                    readonly examples: readonly ["FLY5869798686"];
                                                                };
                                                                readonly expiration_date: {
                                                                    readonly type: "string";
                                                                    readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                                    readonly examples: readonly ["2029-07-08"];
                                                                };
                                                            };
                                                        };
                                                        readonly phone: {
                                                            readonly type: "object";
                                                            readonly description: "The customer's mobile number.";
                                                            readonly required: readonly ["number", "country_code"];
                                                            readonly properties: {
                                                                readonly country_code: {
                                                                    readonly description: "ISO 3166 alpha-3 country code.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[0-9]{1,3}$";
                                                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                                    readonly examples: readonly ["234"];
                                                                };
                                                                readonly number: {
                                                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[0-9]{7,10}$";
                                                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                                    readonly examples: readonly ["8001122334"];
                                                                };
                                                            };
                                                        };
                                                        readonly date_of_birth: {
                                                            readonly type: "string";
                                                            readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                                            readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                        };
                                                        readonly email: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's email address.";
                                                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                                            readonly "x-pattern-message": "must be an email format";
                                                            readonly examples: readonly ["hi@flutterwave.com"];
                                                        };
                                                        readonly address: {
                                                            readonly type: "object";
                                                            readonly description: "Customer address information.";
                                                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                            readonly properties: {
                                                                readonly city: {
                                                                    readonly type: "string";
                                                                    readonly description: "The name of the city.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["New York"];
                                                                };
                                                                readonly country: {
                                                                    readonly description: "ISO2 country code";
                                                                    readonly type: "string";
                                                                    readonly pattern: "^[A-Z]{2}$";
                                                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                                    readonly examples: readonly ["US"];
                                                                };
                                                                readonly line1: {
                                                                    readonly type: "string";
                                                                    readonly description: "The first line of the Customer's address.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["123 Main Street"];
                                                                };
                                                                readonly line2: {
                                                                    readonly type: "string";
                                                                    readonly description: "The second line of the Customer's address.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["Apt 4B"];
                                                                };
                                                                readonly postal_code: {
                                                                    readonly type: "string";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["10001"];
                                                                };
                                                                readonly state: {
                                                                    readonly type: "string";
                                                                    readonly description: "The state or region.";
                                                                    readonly pattern: "^.+$";
                                                                    readonly "x-pattern-message": "value must not be empty";
                                                                    readonly examples: readonly ["New York"];
                                                                };
                                                            };
                                                        };
                                                        readonly cash_pickup: {
                                                            readonly type: "object";
                                                            readonly required: readonly ["network"];
                                                            readonly properties: {
                                                                readonly network: {
                                                                    readonly description: "cashpickup network";
                                                                    readonly type: "string";
                                                                };
                                                            };
                                                        };
                                                    };
                                                }];
                                                readonly discriminator: {
                                                    readonly propertyName: "type";
                                                    readonly mapping: {
                                                        readonly bank: "#/components/schemas/bank_recipient";
                                                        readonly mobile_money: "#/components/schemas/mobile_money_recipient";
                                                        readonly wallet: "#/components/schemas/wallet_recipient";
                                                        readonly cash_pickup: "#/components/schemas/cashpickup_recipient";
                                                    };
                                                };
                                            };
                                            readonly sender: {
                                                readonly description: "The sender details.";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly id: {
                                                        readonly description: "ID of the transfer sender";
                                                        readonly type: "string";
                                                    };
                                                    readonly name: {
                                                        readonly type: "object";
                                                        readonly description: "The Sender's full name.";
                                                        readonly properties: {
                                                            readonly first: {
                                                                readonly type: "string";
                                                                readonly description: "The Customer's first name.";
                                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                readonly examples: readonly ["King"];
                                                            };
                                                            readonly middle: {
                                                                readonly type: "string";
                                                                readonly description: "The Customer's middle name.";
                                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                readonly examples: readonly ["Leo"];
                                                            };
                                                            readonly last: {
                                                                readonly type: "string";
                                                                readonly description: "The Customer's last name.";
                                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                                readonly examples: readonly ["LeBron"];
                                                            };
                                                        };
                                                    };
                                                    readonly national_identification: {
                                                        readonly description: "The Sender's government identification.";
                                                        readonly type: "object";
                                                        readonly properties: {
                                                            readonly type: {
                                                                readonly type: "string";
                                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                            };
                                                            readonly identifier: {
                                                                readonly type: "string";
                                                                readonly minLength: 4;
                                                                readonly maxLength: 40;
                                                                readonly examples: readonly ["FLY5869798686"];
                                                            };
                                                            readonly expiration_date: {
                                                                readonly type: "string";
                                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                                readonly examples: readonly ["2029-07-08"];
                                                            };
                                                        };
                                                    };
                                                    readonly phone: {
                                                        readonly type: "object";
                                                        readonly description: "The Sender's mobile number.";
                                                        readonly required: readonly ["number", "country_code"];
                                                        readonly properties: {
                                                            readonly country_code: {
                                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                                readonly type: "string";
                                                                readonly pattern: "^[0-9]{1,3}$";
                                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                                readonly examples: readonly ["234"];
                                                            };
                                                            readonly number: {
                                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                                readonly type: "string";
                                                                readonly pattern: "^[0-9]{7,10}$";
                                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                                readonly examples: readonly ["8001122334"];
                                                            };
                                                        };
                                                    };
                                                    readonly date_of_birth: {
                                                        readonly description: "The Sender's date of birth.";
                                                        readonly type: "string";
                                                    };
                                                    readonly email: {
                                                        readonly type: "string";
                                                        readonly description: "The Sender's email address.";
                                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                                        readonly "x-pattern-message": "must be an email format";
                                                        readonly examples: readonly ["cornelius@gmail.com"];
                                                    };
                                                    readonly address: {
                                                        readonly type: "object";
                                                        readonly description: "The Sender's residential address.";
                                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                        readonly properties: {
                                                            readonly city: {
                                                                readonly type: "string";
                                                                readonly description: "The name of the city.";
                                                                readonly pattern: "^.+$";
                                                                readonly "x-pattern-message": "value must not be empty";
                                                                readonly examples: readonly ["New York"];
                                                            };
                                                            readonly country: {
                                                                readonly description: "ISO2 country code";
                                                                readonly type: "string";
                                                                readonly pattern: "^[A-Z]{2}$";
                                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                                readonly examples: readonly ["US"];
                                                            };
                                                            readonly line1: {
                                                                readonly type: "string";
                                                                readonly description: "The first line of the Customer's address.";
                                                                readonly pattern: "^.+$";
                                                                readonly "x-pattern-message": "value must not be empty";
                                                                readonly examples: readonly ["123 Main Street"];
                                                            };
                                                            readonly line2: {
                                                                readonly type: "string";
                                                                readonly description: "The second line of the Customer's address.";
                                                                readonly pattern: "^.+$";
                                                                readonly "x-pattern-message": "value must not be empty";
                                                                readonly examples: readonly ["Apt 4B"];
                                                            };
                                                            readonly postal_code: {
                                                                readonly type: "string";
                                                                readonly pattern: "^.+$";
                                                                readonly "x-pattern-message": "value must not be empty";
                                                                readonly examples: readonly ["10001"];
                                                            };
                                                            readonly state: {
                                                                readonly type: "string";
                                                                readonly description: "The state or region.";
                                                                readonly pattern: "^.+$";
                                                                readonly "x-pattern-message": "value must not be empty";
                                                                readonly examples: readonly ["New York"];
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                            readonly meta: {
                                                readonly type: "object";
                                                readonly additionalProperties: {
                                                    readonly type: "string";
                                                };
                                            };
                                            readonly created_datetime: {
                                                readonly type: "string";
                                                readonly description: "The date and time when the transfer was submitted for processing.";
                                                readonly format: "date-time";
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const IdentityTokenExchange: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly token: {
                readonly type: "string";
            };
            readonly token_type: {
                readonly type: "string";
                readonly enum: readonly ["auth_code", "refresh_token"];
            };
            readonly redirect_uri: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly access_token: {
                            readonly type: "string";
                        };
                        readonly refresh_token: {
                            readonly type: "string";
                        };
                        readonly access_expires_in: {
                            readonly type: "integer";
                            readonly format: "int64";
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly refresh_expires_in: {
                            readonly type: "integer";
                            readonly format: "int64";
                            readonly minimum: -9223372036854776000;
                            readonly maximum: 9223372036854776000;
                        };
                        readonly token_type: {
                            readonly type: "string";
                        };
                        readonly id_token: {
                            readonly type: "string";
                        };
                        readonly session_state: {
                            readonly type: "string";
                        };
                        readonly scope: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const MobileNetworksGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly country: {
                    readonly type: "string";
                    readonly description: "The ISO 3166-1 alpha-2 country code.";
                    readonly enum: readonly ["CG", "CM", "CI", "EG", "ET", "GA", "GH", "KE", "MW", "RW", "SN", "TZ", "TD", "UG", "ZM"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["country"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "The mobile network ID.";
                                readonly format: "string";
                                readonly examples: readonly ["mob_cYjd92Qk"];
                            };
                            readonly network: {
                                readonly type: "string";
                                readonly description: "The mobile network.";
                                readonly examples: readonly ["MTN"];
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "The name of the mobile network operator.";
                                readonly examples: readonly ["MTN Mobile Money"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const OrchestrationDirectChargePost: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["amount", "currency", "customer", "payment_method", "reference"];
        readonly properties: {
            readonly amount: {
                readonly description: "The payment amount in decimals.";
                readonly type: "number";
                readonly format: "decimal";
                readonly minimum: 0.01;
                readonly examples: readonly [12.34];
            };
            readonly currency: {
                readonly description: "ISO 4217 currency code.";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                readonly examples: readonly ["NGN"];
            };
            readonly reference: {
                readonly type: "string";
                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                readonly minLength: 6;
                readonly maxLength: 42;
                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                readonly "x-pattern-message": "must be an alphanumeric string";
            };
            readonly customer: {
                readonly type: "object";
                readonly required: readonly ["email"];
                readonly properties: {
                    readonly address: {
                        readonly type: "object";
                        readonly description: "Customer address information.";
                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                        readonly properties: {
                            readonly city: {
                                readonly type: "string";
                                readonly description: "The name of the city.";
                                readonly pattern: "^.+$";
                                readonly "x-pattern-message": "value must not be empty";
                                readonly examples: readonly ["New York"];
                            };
                            readonly country: {
                                readonly description: "ISO2 country code";
                                readonly type: "string";
                                readonly pattern: "^[A-Z]{2}$";
                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                readonly examples: readonly ["US"];
                            };
                            readonly line1: {
                                readonly type: "string";
                                readonly description: "The first line of the Customer's address.";
                                readonly pattern: "^.+$";
                                readonly "x-pattern-message": "value must not be empty";
                                readonly examples: readonly ["123 Main Street"];
                            };
                            readonly line2: {
                                readonly type: "string";
                                readonly description: "The second line of the Customer's address.";
                                readonly pattern: "^.+$";
                                readonly "x-pattern-message": "value must not be empty";
                                readonly examples: readonly ["Apt 4B"];
                            };
                            readonly postal_code: {
                                readonly type: "string";
                                readonly pattern: "^.+$";
                                readonly "x-pattern-message": "value must not be empty";
                                readonly examples: readonly ["10001"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "The state or region.";
                                readonly pattern: "^.+$";
                                readonly "x-pattern-message": "value must not be empty";
                                readonly examples: readonly ["New York"];
                            };
                        };
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "The Customer's email address.";
                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                        readonly "x-pattern-message": "must be an email format";
                        readonly examples: readonly ["cornelius@gmail.com"];
                    };
                    readonly meta: {
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: "string";
                        };
                    };
                    readonly name: {
                        readonly type: "object";
                        readonly description: "The Customer's full name.";
                        readonly properties: {
                            readonly first: {
                                readonly type: "string";
                                readonly description: "The Customer's first name.";
                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                readonly examples: readonly ["King"];
                            };
                            readonly middle: {
                                readonly type: "string";
                                readonly description: "The Customer's middle name.";
                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                readonly examples: readonly ["Leo"];
                            };
                            readonly last: {
                                readonly type: "string";
                                readonly description: "The Customer's last name.";
                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                readonly examples: readonly ["LeBron"];
                            };
                        };
                    };
                    readonly phone: {
                        readonly type: "object";
                        readonly description: "The customer's mobile number.";
                        readonly required: readonly ["number", "country_code"];
                        readonly properties: {
                            readonly country_code: {
                                readonly description: "ISO 3166 alpha-3 country code.";
                                readonly type: "string";
                                readonly pattern: "^[0-9]{1,3}$";
                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                readonly examples: readonly ["234"];
                            };
                            readonly number: {
                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                readonly type: "string";
                                readonly pattern: "^[0-9]{7,10}$";
                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                readonly examples: readonly ["8001122334"];
                            };
                        };
                    };
                };
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly payment_method: {
                readonly oneOf: readonly [{
                    readonly type: "object";
                    readonly required: readonly ["type", "card"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "card";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly card: {
                            readonly type: "object";
                            readonly required: readonly ["encrypted_expiry_month", "encrypted_expiry_year", "encrypted_card_number", "nonce"];
                            readonly properties: {
                                readonly nonce: {
                                    readonly type: "string";
                                    readonly pattern: "^[a-zA-Z0-9]+$";
                                    readonly minLength: 12;
                                    readonly maxLength: 12;
                                    readonly description: "A single-use 12 character alphanumeric string for field-level encryption.";
                                    readonly "x-pattern-message": "must be an alphanumeric string of length 12";
                                };
                                readonly encrypted_expiry_month: {
                                    readonly type: "string";
                                    readonly description: "Encrypted value of the card's expiry month.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["sQpvQEb7GrUCjPuEN/NmHiPl"];
                                };
                                readonly encrypted_expiry_year: {
                                    readonly type: "string";
                                    readonly description: "Encrypted value of the card's expiry year.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["sgHNEDkJ/RmwuWWq/RymToU5"];
                                };
                                readonly encrypted_card_number: {
                                    readonly type: "string";
                                    readonly description: "Encrypted value of the card number.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["sAE3hEDaDQ+yLzo4Py+Lx15OZjBGduHu/DcdILh3En0="];
                                };
                                readonly encrypted_cvv: {
                                    readonly type: "string";
                                    readonly description: "Encrypted value of the card's security code (CVV/CSC).";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["tAUzH7Qjma7diGdi7938F/ESNA=="];
                                };
                                readonly billing_address: {
                                    readonly type: "object";
                                    readonly description: "Customer address information.";
                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                    readonly properties: {
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "The name of the city.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly country: {
                                            readonly description: "ISO2 country code";
                                            readonly type: "string";
                                            readonly pattern: "^[A-Z]{2}$";
                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                            readonly examples: readonly ["US"];
                                        };
                                        readonly line1: {
                                            readonly type: "string";
                                            readonly description: "The first line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["123 Main Street"];
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                            readonly description: "The second line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["Apt 4B"];
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["10001"];
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or region.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                    };
                                };
                                readonly cof: {
                                    readonly type: "object";
                                    readonly required: readonly ["enabled"];
                                    readonly properties: {
                                        readonly enabled: {
                                            readonly type: "boolean";
                                            readonly description: "Set to true to enable recurring card charge with Credential-on-File (COF).";
                                            readonly examples: readonly [true];
                                        };
                                        readonly agreement_id: {
                                            readonly type: "string";
                                            readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                            readonly examples: readonly ["Agreement00w02W1"];
                                        };
                                        readonly trace_id: {
                                            readonly type: "string";
                                            readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                            readonly examples: readonly ["123456789"];
                                        };
                                    };
                                };
                                readonly card_holder_name: {
                                    readonly type: "string";
                                    readonly description: "Name on the card";
                                    readonly examples: readonly ["Alex James"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "bank_account";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly bank_account: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type", "mobile_money"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "mobile_money";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly mobile_money: {
                            readonly type: "object";
                            readonly required: readonly ["network", "phone_number", "country_code"];
                            readonly properties: {
                                readonly network: {
                                    readonly type: "string";
                                    readonly description: "The mobile network of the customer's phone number.";
                                    readonly examples: readonly ["MTN"];
                                };
                                readonly country_code: {
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{1,3}$";
                                    readonly description: "ISO 3166 alpha-3 country code.";
                                    readonly "x-pattern-message": "must be a valid 3 digit country code";
                                    readonly examples: readonly ["234"];
                                };
                                readonly phone_number: {
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{7,10}$";
                                    readonly "x-pattern-message": "must be a valid 7 to 10 digit phone number";
                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                    readonly examples: readonly ["8001122334"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "opay";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly opay: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "applepay";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly applepay: {
                            readonly type: "object";
                            readonly properties: {
                                readonly card_holder_name: {
                                    readonly type: "string";
                                    readonly description: "The cardholder name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["Yohan Blake"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "googlepay";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly googlepay: {
                            readonly type: "object";
                            readonly properties: {
                                readonly card_holder_name: {
                                    readonly type: "string";
                                    readonly description: "The cardholder name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["Yohan Blake"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type", "ussd"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "ussd";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly ussd: {
                            readonly type: "object";
                            readonly required: readonly ["account_bank"];
                            readonly properties: {
                                readonly account_bank: {
                                    readonly type: "string";
                                    readonly pattern: "^\\d{3,}$";
                                    readonly description: "A valid Nigerian bank code consisting of 3 or more digits.";
                                    readonly "x-pattern-message": "must be more than 3 digits long and contain only numbers.";
                                    readonly examples: readonly ["050"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type", "bank_transfer"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "bank_transfer";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly bank_transfer: {
                            readonly type: "object";
                            readonly required: readonly ["account_type"];
                            readonly properties: {
                                readonly account_expires_in: {
                                    readonly type: "integer";
                                    readonly description: "The expiry time of the virtual account.";
                                    readonly maximum: 432000;
                                };
                                readonly account_type: {
                                    readonly type: "string";
                                    readonly description: "The type of virtual account.";
                                    readonly enum: readonly ["static", "dynamic"];
                                    readonly examples: readonly ["static"];
                                };
                                readonly bvn: {
                                    readonly type: "string";
                                    readonly description: "This is the customer's Bank Verification Number.";
                                    readonly pattern: "^[1-9][0-9]{10}$";
                                    readonly "x-pattern-message": "bvn must be exactly 11 characters long and a signed integer";
                                    readonly examples: readonly ["12345678912"];
                                };
                                readonly nin: {
                                    readonly type: "string";
                                    readonly description: "This is the customer's National Identity Number.";
                                    readonly pattern: "^[1-9][0-9]{10}$";
                                    readonly "x-pattern-message": "nin must be exactly 11 characters long and a signed integer";
                                    readonly examples: readonly ["12345678912"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }];
                readonly discriminator: {
                    readonly propertyName: "type";
                    readonly mapping: {
                        readonly card: "#/components/schemas/card_payment_method_in";
                        readonly bank_account: "#/components/schemas/bank_account_payment_method_in";
                        readonly mobile_money: "#/components/schemas/mobile_money_payment_method_in";
                        readonly opay: "#/components/schemas/opay_payment_method_in";
                        readonly applepay: "#/components/schemas/applepay_payment_method_in";
                        readonly googlepay: "#/components/schemas/googlepay_payment_method_in";
                        readonly ussd: "#/components/schemas/ussd_payment_method_in";
                        readonly bank_transfer: "#/components/schemas/pwbt_payment_method_in";
                    };
                };
            };
            readonly redirect_url: {
                readonly type: "string";
                readonly description: "Specifies the URL to redirect to.";
                readonly examples: readonly ["https://www.google.com"];
            };
            readonly authorization: {
                readonly oneOf: readonly [{
                    readonly type: "object";
                    readonly description: "OTP authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "otp";
                            readonly readOnly: true;
                        };
                        readonly otp: {
                            readonly type: "object";
                            readonly required: readonly ["code"];
                            readonly properties: {
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "^\\d{4,8}$";
                                    readonly description: "One-time password(OTP) sent by the Bank.";
                                    readonly "x-pattern-message": "must be a numeric value between 4 and 8 digits long.";
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "PIN authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "pin";
                            readonly readOnly: true;
                        };
                        readonly pin: {
                            readonly type: "object";
                            readonly description: "PIN authorization object.";
                            readonly required: readonly ["encrypted_pin", "nonce"];
                            readonly properties: {
                                readonly nonce: {
                                    readonly type: "string";
                                    readonly pattern: "^[a-zA-Z0-9]+$";
                                    readonly minLength: 12;
                                    readonly maxLength: 12;
                                    readonly description: "A single-use 12 character alphanumeric string for field-level encryption.";
                                    readonly "x-pattern-message": "must be an alphanumeric string of length 12";
                                };
                                readonly encrypted_pin: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "External 3DS authorization object.";
                    readonly required: readonly ["type", "external_3ds"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "external_3ds";
                            readonly readOnly: true;
                        };
                        readonly external_3ds: {
                            readonly type: "object";
                            readonly required: readonly ["eci", "authentication_token", "transaction_id", "version", "transaction_status", "status_reason_code", "amount", "time"];
                            readonly properties: {
                                readonly eci: {
                                    readonly type: "string";
                                    readonly description: "Electronic Commerce Indicator from the issuer's Access Control Server (ACS), showing the outcome of the payer's authentication attempt.";
                                    readonly examples: readonly ["03"];
                                };
                                readonly time: {
                                    readonly type: "string";
                                    readonly description: "The time of the payer's authentication in UTC.";
                                    readonly examples: readonly ["2024-04-11T08:08:43.974Z"];
                                };
                                readonly authentication_token: {
                                    readonly type: "string";
                                    readonly description: "Base64 encoded value generated by the card issuer.";
                                    readonly examples: readonly ["zPkn+YYYYYY53434HFHDss="];
                                };
                                readonly transaction_id: {
                                    readonly type: "string";
                                    readonly description: "The unique transaction identifier from the Access Control Server (ACS).";
                                    readonly examples: readonly ["1F3Uciah9cnh4mrnPPtyT_RA_test"];
                                };
                                readonly version: {
                                    readonly type: "string";
                                    readonly description: "EMV 3D Secure protocol.";
                                    readonly examples: readonly ["2.1.0"];
                                };
                                readonly transaction_status: {
                                    readonly type: "string";
                                    readonly description: "The status of the external authorization attempt.";
                                    readonly enum: readonly ["Y", "N", "U", "A", "R"];
                                    readonly examples: readonly ["Y"];
                                };
                                readonly status_reason_code: {
                                    readonly type: "string";
                                };
                                readonly amount: {
                                    readonly type: "number";
                                    readonly format: "decimal";
                                    readonly description: "The payment amount in decimals.";
                                    readonly minimum: 0.01;
                                    readonly examples: readonly [12.34];
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "AVS authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "avs";
                            readonly readOnly: true;
                        };
                        readonly avs: {
                            readonly type: "object";
                            readonly required: readonly ["address"];
                            readonly properties: {
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "Customer address information.";
                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                    readonly properties: {
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "The name of the city.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly country: {
                                            readonly description: "ISO2 country code";
                                            readonly type: "string";
                                            readonly pattern: "^[A-Z]{2}$";
                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                            readonly examples: readonly ["US"];
                                        };
                                        readonly line1: {
                                            readonly type: "string";
                                            readonly description: "The first line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["123 Main Street"];
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                            readonly description: "The second line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["Apt 4B"];
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["10001"];
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or region.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                    };
                                };
                            };
                        };
                    };
                }];
                readonly discriminator: {
                    readonly propertyName: "type";
                    readonly mapping: {
                        readonly otp: "#/components/schemas/otp_authorization_in";
                        readonly pin: "#/components/schemas/encrypted_pin_authorization_in";
                        readonly external_3ds: "#/components/schemas/external_3ds_authorization_in";
                        readonly avs: "#/components/schemas/avs_authorization_in";
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the charge.";
                            readonly type: "string";
                            readonly examples: readonly ["chg_nONgeAGY97"];
                        };
                        readonly amount: {
                            readonly description: "The payment amount in decimals.";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly fees: {
                            readonly type: "array";
                            readonly description: "Fees charged on payment amount";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                        readonly examples: readonly ["vat"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The fee amount in decimal format.";
                                        readonly examples: readonly [12.3];
                                    };
                                };
                            };
                        };
                        readonly billing_details: {
                            readonly type: "object";
                            readonly description: "The customer's billing information.";
                            readonly properties: {
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Customer's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Customer's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The customer's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer.";
                            readonly type: "string";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly description: {
                            readonly description: "The charge's description.";
                            readonly type: "string";
                        };
                        readonly disputed: {
                            readonly description: "Boolean indicating if the charge was disputed.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly settled: {
                            readonly description: "Boolean indicating if the transaction has been settled.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly settlement_id: {
                            readonly description: "Id for the settlement the transaction belongs to.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly next_action: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "redirect_url";
                                        readonly readOnly: true;
                                    };
                                    readonly redirect_url: {
                                        readonly type: "object";
                                        readonly required: readonly ["url"];
                                        readonly properties: {
                                            readonly url: {
                                                readonly type: "string";
                                                readonly description: "Payment screen URL to redirect customer to.";
                                                readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "requires_additional_fields"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_additional_fields";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_additional_fields: {
                                        readonly type: "object";
                                        readonly required: readonly ["fields"];
                                        readonly properties: {
                                            readonly fields: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly maxItems: 50;
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_pin";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_pin: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_requery";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_requery: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_otp";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_otp: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "payment_instruction"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "payment_instruction";
                                        readonly readOnly: true;
                                    };
                                    readonly payment_instruction: {
                                        readonly type: "object";
                                        readonly required: readonly ["note"];
                                        readonly properties: {
                                            readonly note: {
                                                readonly type: "string";
                                                readonly description: "Custom field containing the payment instruction.";
                                                readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_capture";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_capture: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_bank_transfer";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly type: "string";
                                                readonly description: "The account number designated for receiving payments.";
                                            };
                                            readonly account_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The Bank name.";
                                            };
                                            readonly account_expiration_datetime: {
                                                readonly type: "string";
                                                readonly description: "Specifies when the virtual account expires.";
                                                readonly format: "date-time";
                                            };
                                            readonly note: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                    readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                    readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                    readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                    readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                    readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                    readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                    readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                };
                            };
                        };
                        readonly payment_method_details: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["card", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "card";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly card: {
                                        readonly type: "object";
                                        readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                        readonly properties: {
                                            readonly expiry_month: {
                                                readonly type: "integer";
                                                readonly description: "Expiry month of the card.";
                                                readonly examples: readonly ["09"];
                                            };
                                            readonly expiry_year: {
                                                readonly type: "integer";
                                                readonly description: "Expiry year of the card.";
                                                readonly examples: readonly ["32"];
                                            };
                                            readonly first6: {
                                                readonly type: "string";
                                                readonly description: "Bank identification number (BIN) of the card.";
                                                readonly minLength: 6;
                                                readonly maxLength: 6;
                                                readonly examples: readonly ["123412"];
                                            };
                                            readonly last4: {
                                                readonly type: "string";
                                                readonly description: "The last four digits of the card number.";
                                                readonly minLength: 4;
                                                readonly maxLength: 4;
                                                readonly examples: readonly ["1234"];
                                            };
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                readonly examples: readonly ["MASTERCARD"];
                                            };
                                            readonly billing_address: {
                                                readonly type: "object";
                                                readonly description: "Customer address information.";
                                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                readonly properties: {
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the city.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                    readonly country: {
                                                        readonly description: "ISO2 country code";
                                                        readonly type: "string";
                                                        readonly pattern: "^[A-Z]{2}$";
                                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                        readonly examples: readonly ["US"];
                                                    };
                                                    readonly line1: {
                                                        readonly type: "string";
                                                        readonly description: "The first line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["123 Main Street"];
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                        readonly description: "The second line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["Apt 4B"];
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["10001"];
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "The state or region.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                };
                                            };
                                            readonly cof: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                        readonly examples: readonly [true];
                                                    };
                                                    readonly agreement_id: {
                                                        readonly type: "string";
                                                        readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["Agreement00w02W1"];
                                                    };
                                                    readonly recurring_amount_variability: {
                                                        readonly type: "string";
                                                        readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                        readonly enum: readonly ["VARIABLE"];
                                                        readonly examples: readonly ["VARIABLE"];
                                                    };
                                                    readonly agreement_type: {
                                                        readonly type: "string";
                                                        readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                        readonly enum: readonly ["UNSCHEDULED"];
                                                        readonly examples: readonly ["UNSCHEDULED"];
                                                        readonly description: "`UNSCHEDULED`";
                                                    };
                                                    readonly trace_id: {
                                                        readonly type: "string";
                                                        readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["123456789"];
                                                    };
                                                };
                                            };
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "Name on the card";
                                                readonly examples: readonly ["Alex James"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_account";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_account: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "mobile_money", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "phone_number", "country_code"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The mobile network of the customer's phone number.";
                                                readonly examples: readonly ["MTN"];
                                            };
                                            readonly country_code: {
                                                readonly type: "string";
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly examples: readonly ["233"];
                                            };
                                            readonly phone_number: {
                                                readonly type: "string";
                                                readonly description: "The phone number of customer.";
                                                readonly examples: readonly ["9012345678"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "opay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly opay: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "applepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly applepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "googlepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly googlepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "ussd";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly ussd: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly account_bank: {
                                                readonly type: "string";
                                                readonly description: "The bank code of the USSD string to generate.";
                                                readonly examples: readonly ["050"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["bank_transfer", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_transfer";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_type"];
                                        readonly properties: {
                                            readonly account_expires_in: {
                                                readonly type: "integer";
                                                readonly description: "The expiry time of the virtual account.";
                                                readonly maximum: 432000;
                                                readonly examples: readonly [360];
                                            };
                                            readonly account_display_name: {
                                                readonly type: "string";
                                                readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                readonly minLength: 3;
                                                readonly maxLength: 256;
                                                readonly examples: readonly ["Alex James"];
                                            };
                                            readonly account_type: {
                                                readonly type: "string";
                                                readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                readonly enum: readonly ["static", "dynamic"];
                                                readonly examples: readonly ["static"];
                                            };
                                            readonly originator_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's Bank name";
                                                readonly examples: readonly ["Mock Bank"];
                                            };
                                            readonly originator_account_number: {
                                                readonly type: "string";
                                                readonly description: "The Sender's masked account number";
                                                readonly examples: readonly ["002*******78"];
                                            };
                                            readonly originator_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's name";
                                                readonly examples: readonly ["Jane Doe"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly card: "#/components/schemas/card_payment_method";
                                    readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                    readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                    readonly opay: "#/components/schemas/opay_payment_method";
                                    readonly applepay: "#/components/schemas/applepay_payment_method";
                                    readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                    readonly ussd: "#/components/schemas/ussd_payment_method";
                                    readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                };
                            };
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to.";
                            readonly examples: readonly ["https://www.google.com"];
                        };
                        readonly refunded: {
                            readonly description: "Boolean indicating if the transaction has been refunded.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the charge.\n\n`succeeded` `pending` `failed` `voided`";
                            readonly enum: readonly ["succeeded", "pending", "failed", "voided"];
                            readonly examples: readonly ["succeeded"];
                        };
                        readonly processor_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "\\d{2}";
                                    readonly "x-pattern-message": "must be two digits";
                                };
                            };
                            readonly enum: readonly [{
                                readonly type: "approved";
                                readonly code: "00";
                            }, {
                                readonly type: "refer_to_issuer";
                                readonly code: "01";
                            }, {
                                readonly type: "refer_to_issuer_special_condition";
                                readonly code: "02";
                            }, {
                                readonly type: "invalid_merchant";
                                readonly code: "03";
                            }, {
                                readonly type: "pick_up_card_no_fraud";
                                readonly code: "04";
                            }, {
                                readonly type: "do_not_honor";
                                readonly code: "05";
                            }, {
                                readonly type: "error";
                                readonly code: "06";
                            }, {
                                readonly type: "pick_up_card_fraud";
                                readonly code: "07";
                            }, {
                                readonly type: "partial_approval";
                                readonly code: "10";
                            }, {
                                readonly type: "invalid_transaction";
                                readonly code: "12";
                            }, {
                                readonly type: "invalid_amount";
                                readonly code: "13";
                            }, {
                                readonly type: "invalid_account_number";
                                readonly code: "14";
                            }, {
                                readonly type: "no_such_issuer";
                                readonly code: "15";
                            }, {
                                readonly type: "reenter_transaction";
                                readonly code: "19";
                            }, {
                                readonly type: "no_action_taken";
                                readonly code: "21";
                            }, {
                                readonly type: "unable_to_locate_record_in_file";
                                readonly code: "25";
                            }, {
                                readonly type: "file_temporarily_not_available";
                                readonly code: "28";
                            }, {
                                readonly type: "lost_card_pick_up";
                                readonly code: "41";
                            }, {
                                readonly type: "stolen_card_pick_up";
                                readonly code: "43";
                            }, {
                                readonly type: "insufficient_funds";
                                readonly code: "51";
                            }, {
                                readonly type: "no_checking_account";
                                readonly code: "52";
                            }, {
                                readonly type: "no_savings_account";
                                readonly code: "53";
                            }, {
                                readonly type: "expired_card";
                                readonly code: "54";
                            }, {
                                readonly type: "incorrect_pin";
                                readonly code: "55";
                            }, {
                                readonly type: "transaction_not_permitted_card";
                                readonly code: "57";
                            }, {
                                readonly type: "transaction_not_permitted_terminal";
                                readonly code: "58";
                            }, {
                                readonly type: "suspected_fraud";
                                readonly code: "59";
                            }, {
                                readonly type: "exceeds_approval_amount_limit";
                                readonly code: "61";
                            }, {
                                readonly type: "invalid_restricted_service_code";
                                readonly code: "62";
                            }, {
                                readonly type: "security_violation";
                                readonly code: "63";
                            }, {
                                readonly type: "transaction_does_not_fulfill_aml_req";
                                readonly code: "64";
                            }, {
                                readonly type: "exceeds_withdrawal_limit";
                                readonly code: "65";
                            }, {
                                readonly type: "pin_data_required";
                                readonly code: "70";
                            }, {
                                readonly type: "pin_entry_tries_exceeded";
                                readonly code: "75";
                            }, {
                                readonly type: "unsolicited_reversal";
                                readonly code: "76";
                            }, {
                                readonly type: "blocked_first_use";
                                readonly code: "78";
                            }, {
                                readonly type: "already_reversed";
                                readonly code: "79";
                            }, {
                                readonly type: "negative_cvv_result";
                                readonly code: "82";
                            }, {
                                readonly type: "no_reason_to_decline";
                                readonly code: "85";
                            }, {
                                readonly type: "cannot_verify_pin";
                                readonly code: "86";
                            }, {
                                readonly type: "issuer_unavailable";
                                readonly code: "91";
                            }, {
                                readonly type: "unable_to_route_transaction";
                                readonly code: "92";
                            }, {
                                readonly type: "cannot_complete_violation_of_law";
                                readonly code: "93";
                            }, {
                                readonly type: "system_error";
                                readonly code: "96";
                            }, {
                                readonly type: "invalid_cvv";
                                readonly code: "97";
                            }];
                            readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Timestamp for when the transaction was created.";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const OrchestrationDirectOrderPost: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["amount", "currency", "customer", "payment_method", "reference"];
        readonly properties: {
            readonly amount: {
                readonly description: "The payment amount in decimals.";
                readonly type: "number";
                readonly format: "decimal";
                readonly minimum: 0.01;
                readonly examples: readonly [12.34];
            };
            readonly currency: {
                readonly description: "ISO 4217 currency code.";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                readonly examples: readonly ["NGN"];
            };
            readonly reference: {
                readonly type: "string";
                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                readonly minLength: 6;
                readonly maxLength: 42;
                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                readonly "x-pattern-message": "must be an alphanumeric string";
            };
            readonly customer: {
                readonly type: "object";
                readonly required: readonly ["email"];
                readonly properties: {
                    readonly address: {
                        readonly type: "object";
                        readonly description: "Customer address information.";
                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                        readonly properties: {
                            readonly city: {
                                readonly type: "string";
                                readonly description: "The name of the city.";
                                readonly pattern: "^.+$";
                                readonly "x-pattern-message": "value must not be empty";
                                readonly examples: readonly ["New York"];
                            };
                            readonly country: {
                                readonly description: "ISO2 country code";
                                readonly type: "string";
                                readonly pattern: "^[A-Z]{2}$";
                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                readonly examples: readonly ["US"];
                            };
                            readonly line1: {
                                readonly type: "string";
                                readonly description: "The first line of the Customer's address.";
                                readonly pattern: "^.+$";
                                readonly "x-pattern-message": "value must not be empty";
                                readonly examples: readonly ["123 Main Street"];
                            };
                            readonly line2: {
                                readonly type: "string";
                                readonly description: "The second line of the Customer's address.";
                                readonly pattern: "^.+$";
                                readonly "x-pattern-message": "value must not be empty";
                                readonly examples: readonly ["Apt 4B"];
                            };
                            readonly postal_code: {
                                readonly type: "string";
                                readonly pattern: "^.+$";
                                readonly "x-pattern-message": "value must not be empty";
                                readonly examples: readonly ["10001"];
                            };
                            readonly state: {
                                readonly type: "string";
                                readonly description: "The state or region.";
                                readonly pattern: "^.+$";
                                readonly "x-pattern-message": "value must not be empty";
                                readonly examples: readonly ["New York"];
                            };
                        };
                    };
                    readonly email: {
                        readonly type: "string";
                        readonly description: "The Customer's email address.";
                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                        readonly "x-pattern-message": "must be an email format";
                        readonly examples: readonly ["cornelius@gmail.com"];
                    };
                    readonly meta: {
                        readonly type: "object";
                        readonly additionalProperties: {
                            readonly type: "string";
                        };
                    };
                    readonly name: {
                        readonly type: "object";
                        readonly description: "The Customer's full name.";
                        readonly properties: {
                            readonly first: {
                                readonly type: "string";
                                readonly description: "The Customer's first name.";
                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                readonly examples: readonly ["King"];
                            };
                            readonly middle: {
                                readonly type: "string";
                                readonly description: "The Customer's middle name.";
                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                readonly examples: readonly ["Leo"];
                            };
                            readonly last: {
                                readonly type: "string";
                                readonly description: "The Customer's last name.";
                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                readonly examples: readonly ["LeBron"];
                            };
                        };
                    };
                    readonly phone: {
                        readonly type: "object";
                        readonly description: "The customer's mobile number.";
                        readonly required: readonly ["number", "country_code"];
                        readonly properties: {
                            readonly country_code: {
                                readonly description: "ISO 3166 alpha-3 country code.";
                                readonly type: "string";
                                readonly pattern: "^[0-9]{1,3}$";
                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                readonly examples: readonly ["234"];
                            };
                            readonly number: {
                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                readonly type: "string";
                                readonly pattern: "^[0-9]{7,10}$";
                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                readonly examples: readonly ["8001122334"];
                            };
                        };
                    };
                };
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly payment_method: {
                readonly oneOf: readonly [{
                    readonly type: "object";
                    readonly required: readonly ["type", "card"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "card";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly card: {
                            readonly type: "object";
                            readonly required: readonly ["encrypted_expiry_month", "encrypted_expiry_year", "encrypted_card_number", "nonce"];
                            readonly properties: {
                                readonly nonce: {
                                    readonly type: "string";
                                    readonly pattern: "^[a-zA-Z0-9]+$";
                                    readonly minLength: 12;
                                    readonly maxLength: 12;
                                    readonly description: "A single-use 12 character alphanumeric string for field-level encryption.";
                                    readonly "x-pattern-message": "must be an alphanumeric string of length 12";
                                };
                                readonly encrypted_expiry_month: {
                                    readonly type: "string";
                                    readonly description: "Encrypted value of the card's expiry month.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["sQpvQEb7GrUCjPuEN/NmHiPl"];
                                };
                                readonly encrypted_expiry_year: {
                                    readonly type: "string";
                                    readonly description: "Encrypted value of the card's expiry year.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["sgHNEDkJ/RmwuWWq/RymToU5"];
                                };
                                readonly encrypted_card_number: {
                                    readonly type: "string";
                                    readonly description: "Encrypted value of the card number.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["sAE3hEDaDQ+yLzo4Py+Lx15OZjBGduHu/DcdILh3En0="];
                                };
                                readonly encrypted_cvv: {
                                    readonly type: "string";
                                    readonly description: "Encrypted value of the card's security code (CVV/CSC).";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["tAUzH7Qjma7diGdi7938F/ESNA=="];
                                };
                                readonly billing_address: {
                                    readonly type: "object";
                                    readonly description: "Customer address information.";
                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                    readonly properties: {
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "The name of the city.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly country: {
                                            readonly description: "ISO2 country code";
                                            readonly type: "string";
                                            readonly pattern: "^[A-Z]{2}$";
                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                            readonly examples: readonly ["US"];
                                        };
                                        readonly line1: {
                                            readonly type: "string";
                                            readonly description: "The first line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["123 Main Street"];
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                            readonly description: "The second line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["Apt 4B"];
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["10001"];
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or region.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                    };
                                };
                                readonly cof: {
                                    readonly type: "object";
                                    readonly required: readonly ["enabled"];
                                    readonly properties: {
                                        readonly enabled: {
                                            readonly type: "boolean";
                                            readonly description: "Set to true to enable recurring card charge with Credential-on-File (COF).";
                                            readonly examples: readonly [true];
                                        };
                                        readonly agreement_id: {
                                            readonly type: "string";
                                            readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                            readonly examples: readonly ["Agreement00w02W1"];
                                        };
                                        readonly trace_id: {
                                            readonly type: "string";
                                            readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                            readonly examples: readonly ["123456789"];
                                        };
                                    };
                                };
                                readonly card_holder_name: {
                                    readonly type: "string";
                                    readonly description: "Name on the card";
                                    readonly examples: readonly ["Alex James"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "bank_account";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly bank_account: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type", "mobile_money"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "mobile_money";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly mobile_money: {
                            readonly type: "object";
                            readonly required: readonly ["network", "phone_number", "country_code"];
                            readonly properties: {
                                readonly network: {
                                    readonly type: "string";
                                    readonly description: "The mobile network of the customer's phone number.";
                                    readonly examples: readonly ["MTN"];
                                };
                                readonly country_code: {
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{1,3}$";
                                    readonly description: "ISO 3166 alpha-3 country code.";
                                    readonly "x-pattern-message": "must be a valid 3 digit country code";
                                    readonly examples: readonly ["234"];
                                };
                                readonly phone_number: {
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{7,10}$";
                                    readonly "x-pattern-message": "must be a valid 7 to 10 digit phone number";
                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                    readonly examples: readonly ["8001122334"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "opay";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly opay: {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "applepay";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly applepay: {
                            readonly type: "object";
                            readonly properties: {
                                readonly card_holder_name: {
                                    readonly type: "string";
                                    readonly description: "The cardholder name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["Yohan Blake"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "googlepay";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly googlepay: {
                            readonly type: "object";
                            readonly properties: {
                                readonly card_holder_name: {
                                    readonly type: "string";
                                    readonly description: "The cardholder name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["Yohan Blake"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type", "ussd"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "ussd";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly ussd: {
                            readonly type: "object";
                            readonly required: readonly ["account_bank"];
                            readonly properties: {
                                readonly account_bank: {
                                    readonly type: "string";
                                    readonly pattern: "^\\d{3,}$";
                                    readonly description: "A valid Nigerian bank code consisting of 3 or more digits.";
                                    readonly "x-pattern-message": "must be more than 3 digits long and contain only numbers.";
                                    readonly examples: readonly ["050"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly required: readonly ["type", "bank_transfer"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of the payment method.";
                            readonly default: "bank_transfer";
                            readonly readOnly: true;
                            readonly examples: readonly ["card"];
                        };
                        readonly bank_transfer: {
                            readonly type: "object";
                            readonly required: readonly ["account_type"];
                            readonly properties: {
                                readonly account_expires_in: {
                                    readonly type: "integer";
                                    readonly description: "The expiry time of the virtual account.";
                                    readonly maximum: 432000;
                                };
                                readonly account_type: {
                                    readonly type: "string";
                                    readonly description: "The type of virtual account.";
                                    readonly enum: readonly ["static", "dynamic"];
                                    readonly examples: readonly ["static"];
                                };
                                readonly bvn: {
                                    readonly type: "string";
                                    readonly description: "This is the customer's Bank Verification Number.";
                                    readonly pattern: "^[1-9][0-9]{10}$";
                                    readonly "x-pattern-message": "bvn must be exactly 11 characters long and a signed integer";
                                    readonly examples: readonly ["12345678912"];
                                };
                                readonly nin: {
                                    readonly type: "string";
                                    readonly description: "This is the customer's National Identity Number.";
                                    readonly pattern: "^[1-9][0-9]{10}$";
                                    readonly "x-pattern-message": "nin must be exactly 11 characters long and a signed integer";
                                    readonly examples: readonly ["12345678912"];
                                };
                            };
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "ID of the customer.";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                    };
                }];
                readonly discriminator: {
                    readonly propertyName: "type";
                    readonly mapping: {
                        readonly card: "#/components/schemas/card_payment_method_in";
                        readonly bank_account: "#/components/schemas/bank_account_payment_method_in";
                        readonly mobile_money: "#/components/schemas/mobile_money_payment_method_in";
                        readonly opay: "#/components/schemas/opay_payment_method_in";
                        readonly applepay: "#/components/schemas/applepay_payment_method_in";
                        readonly googlepay: "#/components/schemas/googlepay_payment_method_in";
                        readonly ussd: "#/components/schemas/ussd_payment_method_in";
                        readonly bank_transfer: "#/components/schemas/pwbt_payment_method_in";
                    };
                };
            };
            readonly redirect_url: {
                readonly type: "string";
                readonly description: "Specifies the URL to redirect to.";
            };
            readonly authorization: {
                readonly oneOf: readonly [{
                    readonly type: "object";
                    readonly description: "3DS authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "3ds";
                            readonly readOnly: true;
                        };
                        readonly "3ds": {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                }];
                readonly discriminator: {
                    readonly propertyName: "type";
                    readonly mapping: {
                        readonly "3ds": "#/components/schemas/3ds_authorization_in";
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the order.";
                            readonly examples: readonly ["ord_WRq7L4TM8p"];
                        };
                        readonly amount: {
                            readonly description: "The order amount in decimals.";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly fees: {
                            readonly type: "array";
                            readonly description: "Fees charged on payment amount";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                        readonly examples: readonly ["vat"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The fee amount in decimal format.";
                                        readonly examples: readonly [12.3];
                                    };
                                };
                            };
                        };
                        readonly billing_details: {
                            readonly type: "object";
                            readonly properties: {
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Customer's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Customer's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The customer's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer.";
                            readonly type: "string";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly description: {
                            readonly description: "Description of the order";
                            readonly type: "string";
                            readonly examples: readonly ["Payment for a Suit Skirt"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly next_action: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "redirect_url";
                                        readonly readOnly: true;
                                    };
                                    readonly redirect_url: {
                                        readonly type: "object";
                                        readonly required: readonly ["url"];
                                        readonly properties: {
                                            readonly url: {
                                                readonly type: "string";
                                                readonly description: "Payment screen URL to redirect customer to.";
                                                readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "requires_additional_fields"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_additional_fields";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_additional_fields: {
                                        readonly type: "object";
                                        readonly required: readonly ["fields"];
                                        readonly properties: {
                                            readonly fields: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly maxItems: 50;
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_pin";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_pin: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_requery";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_requery: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_otp";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_otp: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "payment_instruction"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "payment_instruction";
                                        readonly readOnly: true;
                                    };
                                    readonly payment_instruction: {
                                        readonly type: "object";
                                        readonly required: readonly ["note"];
                                        readonly properties: {
                                            readonly note: {
                                                readonly type: "string";
                                                readonly description: "Custom field containing the payment instruction.";
                                                readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_capture";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_capture: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_bank_transfer";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly type: "string";
                                                readonly description: "The account number designated for receiving payments.";
                                            };
                                            readonly account_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The Bank name.";
                                            };
                                            readonly account_expiration_datetime: {
                                                readonly type: "string";
                                                readonly description: "Specifies when the virtual account expires.";
                                                readonly format: "date-time";
                                            };
                                            readonly note: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                    readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                    readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                    readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                    readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                    readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                    readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                    readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                };
                            };
                        };
                        readonly payment_method_details: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["card", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "card";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly card: {
                                        readonly type: "object";
                                        readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                        readonly properties: {
                                            readonly expiry_month: {
                                                readonly type: "integer";
                                                readonly description: "Expiry month of the card.";
                                                readonly examples: readonly ["09"];
                                            };
                                            readonly expiry_year: {
                                                readonly type: "integer";
                                                readonly description: "Expiry year of the card.";
                                                readonly examples: readonly ["32"];
                                            };
                                            readonly first6: {
                                                readonly type: "string";
                                                readonly description: "Bank identification number (BIN) of the card.";
                                                readonly minLength: 6;
                                                readonly maxLength: 6;
                                                readonly examples: readonly ["123412"];
                                            };
                                            readonly last4: {
                                                readonly type: "string";
                                                readonly description: "The last four digits of the card number.";
                                                readonly minLength: 4;
                                                readonly maxLength: 4;
                                                readonly examples: readonly ["1234"];
                                            };
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                readonly examples: readonly ["MASTERCARD"];
                                            };
                                            readonly billing_address: {
                                                readonly type: "object";
                                                readonly description: "Customer address information.";
                                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                readonly properties: {
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the city.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                    readonly country: {
                                                        readonly description: "ISO2 country code";
                                                        readonly type: "string";
                                                        readonly pattern: "^[A-Z]{2}$";
                                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                        readonly examples: readonly ["US"];
                                                    };
                                                    readonly line1: {
                                                        readonly type: "string";
                                                        readonly description: "The first line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["123 Main Street"];
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                        readonly description: "The second line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["Apt 4B"];
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["10001"];
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "The state or region.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                };
                                            };
                                            readonly cof: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                        readonly examples: readonly [true];
                                                    };
                                                    readonly agreement_id: {
                                                        readonly type: "string";
                                                        readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["Agreement00w02W1"];
                                                    };
                                                    readonly recurring_amount_variability: {
                                                        readonly type: "string";
                                                        readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                        readonly enum: readonly ["VARIABLE"];
                                                        readonly examples: readonly ["VARIABLE"];
                                                    };
                                                    readonly agreement_type: {
                                                        readonly type: "string";
                                                        readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                        readonly enum: readonly ["UNSCHEDULED"];
                                                        readonly examples: readonly ["UNSCHEDULED"];
                                                        readonly description: "`UNSCHEDULED`";
                                                    };
                                                    readonly trace_id: {
                                                        readonly type: "string";
                                                        readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["123456789"];
                                                    };
                                                };
                                            };
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "Name on the card";
                                                readonly examples: readonly ["Alex James"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_account";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_account: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "mobile_money", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "phone_number", "country_code"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The mobile network of the customer's phone number.";
                                                readonly examples: readonly ["MTN"];
                                            };
                                            readonly country_code: {
                                                readonly type: "string";
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly examples: readonly ["233"];
                                            };
                                            readonly phone_number: {
                                                readonly type: "string";
                                                readonly description: "The phone number of customer.";
                                                readonly examples: readonly ["9012345678"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "opay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly opay: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "applepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly applepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "googlepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly googlepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "ussd";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly ussd: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly account_bank: {
                                                readonly type: "string";
                                                readonly description: "The bank code of the USSD string to generate.";
                                                readonly examples: readonly ["050"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["bank_transfer", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_transfer";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_type"];
                                        readonly properties: {
                                            readonly account_expires_in: {
                                                readonly type: "integer";
                                                readonly description: "The expiry time of the virtual account.";
                                                readonly maximum: 432000;
                                                readonly examples: readonly [360];
                                            };
                                            readonly account_display_name: {
                                                readonly type: "string";
                                                readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                readonly minLength: 3;
                                                readonly maxLength: 256;
                                                readonly examples: readonly ["Alex James"];
                                            };
                                            readonly account_type: {
                                                readonly type: "string";
                                                readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                readonly enum: readonly ["static", "dynamic"];
                                                readonly examples: readonly ["static"];
                                            };
                                            readonly originator_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's Bank name";
                                                readonly examples: readonly ["Mock Bank"];
                                            };
                                            readonly originator_account_number: {
                                                readonly type: "string";
                                                readonly description: "The Sender's masked account number";
                                                readonly examples: readonly ["002*******78"];
                                            };
                                            readonly originator_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's name";
                                                readonly examples: readonly ["Jane Doe"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly card: "#/components/schemas/card_payment_method";
                                    readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                    readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                    readonly opay: "#/components/schemas/opay_payment_method";
                                    readonly applepay: "#/components/schemas/applepay_payment_method";
                                    readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                    readonly ussd: "#/components/schemas/ussd_payment_method";
                                    readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                };
                            };
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to.";
                            readonly examples: readonly ["https://flutterwave.com"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the order.\n\n`completed` `pending` `authorized` `partially-completed` `voided` `failed`";
                            readonly enum: readonly ["completed", "pending", "authorized", "partially-completed", "voided", "failed"];
                        };
                        readonly processor_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "\\d{2}";
                                    readonly "x-pattern-message": "must be two digits";
                                };
                            };
                            readonly enum: readonly [{
                                readonly type: "approved";
                                readonly code: "00";
                            }, {
                                readonly type: "refer_to_issuer";
                                readonly code: "01";
                            }, {
                                readonly type: "refer_to_issuer_special_condition";
                                readonly code: "02";
                            }, {
                                readonly type: "invalid_merchant";
                                readonly code: "03";
                            }, {
                                readonly type: "pick_up_card_no_fraud";
                                readonly code: "04";
                            }, {
                                readonly type: "do_not_honor";
                                readonly code: "05";
                            }, {
                                readonly type: "error";
                                readonly code: "06";
                            }, {
                                readonly type: "pick_up_card_fraud";
                                readonly code: "07";
                            }, {
                                readonly type: "partial_approval";
                                readonly code: "10";
                            }, {
                                readonly type: "invalid_transaction";
                                readonly code: "12";
                            }, {
                                readonly type: "invalid_amount";
                                readonly code: "13";
                            }, {
                                readonly type: "invalid_account_number";
                                readonly code: "14";
                            }, {
                                readonly type: "no_such_issuer";
                                readonly code: "15";
                            }, {
                                readonly type: "reenter_transaction";
                                readonly code: "19";
                            }, {
                                readonly type: "no_action_taken";
                                readonly code: "21";
                            }, {
                                readonly type: "unable_to_locate_record_in_file";
                                readonly code: "25";
                            }, {
                                readonly type: "file_temporarily_not_available";
                                readonly code: "28";
                            }, {
                                readonly type: "lost_card_pick_up";
                                readonly code: "41";
                            }, {
                                readonly type: "stolen_card_pick_up";
                                readonly code: "43";
                            }, {
                                readonly type: "insufficient_funds";
                                readonly code: "51";
                            }, {
                                readonly type: "no_checking_account";
                                readonly code: "52";
                            }, {
                                readonly type: "no_savings_account";
                                readonly code: "53";
                            }, {
                                readonly type: "expired_card";
                                readonly code: "54";
                            }, {
                                readonly type: "incorrect_pin";
                                readonly code: "55";
                            }, {
                                readonly type: "transaction_not_permitted_card";
                                readonly code: "57";
                            }, {
                                readonly type: "transaction_not_permitted_terminal";
                                readonly code: "58";
                            }, {
                                readonly type: "suspected_fraud";
                                readonly code: "59";
                            }, {
                                readonly type: "exceeds_approval_amount_limit";
                                readonly code: "61";
                            }, {
                                readonly type: "invalid_restricted_service_code";
                                readonly code: "62";
                            }, {
                                readonly type: "security_violation";
                                readonly code: "63";
                            }, {
                                readonly type: "transaction_does_not_fulfill_aml_req";
                                readonly code: "64";
                            }, {
                                readonly type: "exceeds_withdrawal_limit";
                                readonly code: "65";
                            }, {
                                readonly type: "pin_data_required";
                                readonly code: "70";
                            }, {
                                readonly type: "pin_entry_tries_exceeded";
                                readonly code: "75";
                            }, {
                                readonly type: "unsolicited_reversal";
                                readonly code: "76";
                            }, {
                                readonly type: "blocked_first_use";
                                readonly code: "78";
                            }, {
                                readonly type: "already_reversed";
                                readonly code: "79";
                            }, {
                                readonly type: "negative_cvv_result";
                                readonly code: "82";
                            }, {
                                readonly type: "no_reason_to_decline";
                                readonly code: "85";
                            }, {
                                readonly type: "cannot_verify_pin";
                                readonly code: "86";
                            }, {
                                readonly type: "issuer_unavailable";
                                readonly code: "91";
                            }, {
                                readonly type: "unable_to_route_transaction";
                                readonly code: "92";
                            }, {
                                readonly type: "cannot_complete_violation_of_law";
                                readonly code: "93";
                            }, {
                                readonly type: "system_error";
                                readonly code: "96";
                            }, {
                                readonly type: "invalid_cvv";
                                readonly code: "97";
                            }];
                            readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Timestamp for when the order was created.";
                            readonly examples: readonly ["2025-03-27T10:00:00Z"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const OrdersGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the order.";
                    readonly type: "string";
                    readonly examples: readonly ["ord_EFAHCzELJb"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the order.";
                            readonly examples: readonly ["ord_WRq7L4TM8p"];
                        };
                        readonly amount: {
                            readonly description: "The order amount in decimals.";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly fees: {
                            readonly type: "array";
                            readonly description: "Fees charged on payment amount";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                        readonly examples: readonly ["vat"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The fee amount in decimal format.";
                                        readonly examples: readonly [12.3];
                                    };
                                };
                            };
                        };
                        readonly billing_details: {
                            readonly type: "object";
                            readonly properties: {
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Customer's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Customer's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The customer's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer.";
                            readonly type: "string";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly description: {
                            readonly description: "Description of the order";
                            readonly type: "string";
                            readonly examples: readonly ["Payment for a Suit Skirt"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly next_action: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "redirect_url";
                                        readonly readOnly: true;
                                    };
                                    readonly redirect_url: {
                                        readonly type: "object";
                                        readonly required: readonly ["url"];
                                        readonly properties: {
                                            readonly url: {
                                                readonly type: "string";
                                                readonly description: "Payment screen URL to redirect customer to.";
                                                readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "requires_additional_fields"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_additional_fields";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_additional_fields: {
                                        readonly type: "object";
                                        readonly required: readonly ["fields"];
                                        readonly properties: {
                                            readonly fields: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly maxItems: 50;
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_pin";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_pin: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_requery";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_requery: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_otp";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_otp: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "payment_instruction"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "payment_instruction";
                                        readonly readOnly: true;
                                    };
                                    readonly payment_instruction: {
                                        readonly type: "object";
                                        readonly required: readonly ["note"];
                                        readonly properties: {
                                            readonly note: {
                                                readonly type: "string";
                                                readonly description: "Custom field containing the payment instruction.";
                                                readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_capture";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_capture: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_bank_transfer";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly type: "string";
                                                readonly description: "The account number designated for receiving payments.";
                                            };
                                            readonly account_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The Bank name.";
                                            };
                                            readonly account_expiration_datetime: {
                                                readonly type: "string";
                                                readonly description: "Specifies when the virtual account expires.";
                                                readonly format: "date-time";
                                            };
                                            readonly note: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                    readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                    readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                    readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                    readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                    readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                    readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                    readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                };
                            };
                        };
                        readonly payment_method_details: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["card", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "card";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly card: {
                                        readonly type: "object";
                                        readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                        readonly properties: {
                                            readonly expiry_month: {
                                                readonly type: "integer";
                                                readonly description: "Expiry month of the card.";
                                                readonly examples: readonly ["09"];
                                            };
                                            readonly expiry_year: {
                                                readonly type: "integer";
                                                readonly description: "Expiry year of the card.";
                                                readonly examples: readonly ["32"];
                                            };
                                            readonly first6: {
                                                readonly type: "string";
                                                readonly description: "Bank identification number (BIN) of the card.";
                                                readonly minLength: 6;
                                                readonly maxLength: 6;
                                                readonly examples: readonly ["123412"];
                                            };
                                            readonly last4: {
                                                readonly type: "string";
                                                readonly description: "The last four digits of the card number.";
                                                readonly minLength: 4;
                                                readonly maxLength: 4;
                                                readonly examples: readonly ["1234"];
                                            };
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                readonly examples: readonly ["MASTERCARD"];
                                            };
                                            readonly billing_address: {
                                                readonly type: "object";
                                                readonly description: "Customer address information.";
                                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                readonly properties: {
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the city.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                    readonly country: {
                                                        readonly description: "ISO2 country code";
                                                        readonly type: "string";
                                                        readonly pattern: "^[A-Z]{2}$";
                                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                        readonly examples: readonly ["US"];
                                                    };
                                                    readonly line1: {
                                                        readonly type: "string";
                                                        readonly description: "The first line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["123 Main Street"];
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                        readonly description: "The second line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["Apt 4B"];
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["10001"];
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "The state or region.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                };
                                            };
                                            readonly cof: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                        readonly examples: readonly [true];
                                                    };
                                                    readonly agreement_id: {
                                                        readonly type: "string";
                                                        readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["Agreement00w02W1"];
                                                    };
                                                    readonly recurring_amount_variability: {
                                                        readonly type: "string";
                                                        readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                        readonly enum: readonly ["VARIABLE"];
                                                        readonly examples: readonly ["VARIABLE"];
                                                    };
                                                    readonly agreement_type: {
                                                        readonly type: "string";
                                                        readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                        readonly enum: readonly ["UNSCHEDULED"];
                                                        readonly examples: readonly ["UNSCHEDULED"];
                                                        readonly description: "`UNSCHEDULED`";
                                                    };
                                                    readonly trace_id: {
                                                        readonly type: "string";
                                                        readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["123456789"];
                                                    };
                                                };
                                            };
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "Name on the card";
                                                readonly examples: readonly ["Alex James"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_account";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_account: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "mobile_money", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "phone_number", "country_code"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The mobile network of the customer's phone number.";
                                                readonly examples: readonly ["MTN"];
                                            };
                                            readonly country_code: {
                                                readonly type: "string";
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly examples: readonly ["233"];
                                            };
                                            readonly phone_number: {
                                                readonly type: "string";
                                                readonly description: "The phone number of customer.";
                                                readonly examples: readonly ["9012345678"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "opay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly opay: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "applepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly applepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "googlepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly googlepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "ussd";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly ussd: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly account_bank: {
                                                readonly type: "string";
                                                readonly description: "The bank code of the USSD string to generate.";
                                                readonly examples: readonly ["050"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["bank_transfer", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_transfer";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_type"];
                                        readonly properties: {
                                            readonly account_expires_in: {
                                                readonly type: "integer";
                                                readonly description: "The expiry time of the virtual account.";
                                                readonly maximum: 432000;
                                                readonly examples: readonly [360];
                                            };
                                            readonly account_display_name: {
                                                readonly type: "string";
                                                readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                readonly minLength: 3;
                                                readonly maxLength: 256;
                                                readonly examples: readonly ["Alex James"];
                                            };
                                            readonly account_type: {
                                                readonly type: "string";
                                                readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                readonly enum: readonly ["static", "dynamic"];
                                                readonly examples: readonly ["static"];
                                            };
                                            readonly originator_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's Bank name";
                                                readonly examples: readonly ["Mock Bank"];
                                            };
                                            readonly originator_account_number: {
                                                readonly type: "string";
                                                readonly description: "The Sender's masked account number";
                                                readonly examples: readonly ["002*******78"];
                                            };
                                            readonly originator_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's name";
                                                readonly examples: readonly ["Jane Doe"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly card: "#/components/schemas/card_payment_method";
                                    readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                    readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                    readonly opay: "#/components/schemas/opay_payment_method";
                                    readonly applepay: "#/components/schemas/applepay_payment_method";
                                    readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                    readonly ussd: "#/components/schemas/ussd_payment_method";
                                    readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                };
                            };
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to.";
                            readonly examples: readonly ["https://flutterwave.com"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the order.\n\n`completed` `pending` `authorized` `partially-completed` `voided` `failed`";
                            readonly enum: readonly ["completed", "pending", "authorized", "partially-completed", "voided", "failed"];
                        };
                        readonly processor_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "\\d{2}";
                                    readonly "x-pattern-message": "must be two digits";
                                };
                            };
                            readonly enum: readonly [{
                                readonly type: "approved";
                                readonly code: "00";
                            }, {
                                readonly type: "refer_to_issuer";
                                readonly code: "01";
                            }, {
                                readonly type: "refer_to_issuer_special_condition";
                                readonly code: "02";
                            }, {
                                readonly type: "invalid_merchant";
                                readonly code: "03";
                            }, {
                                readonly type: "pick_up_card_no_fraud";
                                readonly code: "04";
                            }, {
                                readonly type: "do_not_honor";
                                readonly code: "05";
                            }, {
                                readonly type: "error";
                                readonly code: "06";
                            }, {
                                readonly type: "pick_up_card_fraud";
                                readonly code: "07";
                            }, {
                                readonly type: "partial_approval";
                                readonly code: "10";
                            }, {
                                readonly type: "invalid_transaction";
                                readonly code: "12";
                            }, {
                                readonly type: "invalid_amount";
                                readonly code: "13";
                            }, {
                                readonly type: "invalid_account_number";
                                readonly code: "14";
                            }, {
                                readonly type: "no_such_issuer";
                                readonly code: "15";
                            }, {
                                readonly type: "reenter_transaction";
                                readonly code: "19";
                            }, {
                                readonly type: "no_action_taken";
                                readonly code: "21";
                            }, {
                                readonly type: "unable_to_locate_record_in_file";
                                readonly code: "25";
                            }, {
                                readonly type: "file_temporarily_not_available";
                                readonly code: "28";
                            }, {
                                readonly type: "lost_card_pick_up";
                                readonly code: "41";
                            }, {
                                readonly type: "stolen_card_pick_up";
                                readonly code: "43";
                            }, {
                                readonly type: "insufficient_funds";
                                readonly code: "51";
                            }, {
                                readonly type: "no_checking_account";
                                readonly code: "52";
                            }, {
                                readonly type: "no_savings_account";
                                readonly code: "53";
                            }, {
                                readonly type: "expired_card";
                                readonly code: "54";
                            }, {
                                readonly type: "incorrect_pin";
                                readonly code: "55";
                            }, {
                                readonly type: "transaction_not_permitted_card";
                                readonly code: "57";
                            }, {
                                readonly type: "transaction_not_permitted_terminal";
                                readonly code: "58";
                            }, {
                                readonly type: "suspected_fraud";
                                readonly code: "59";
                            }, {
                                readonly type: "exceeds_approval_amount_limit";
                                readonly code: "61";
                            }, {
                                readonly type: "invalid_restricted_service_code";
                                readonly code: "62";
                            }, {
                                readonly type: "security_violation";
                                readonly code: "63";
                            }, {
                                readonly type: "transaction_does_not_fulfill_aml_req";
                                readonly code: "64";
                            }, {
                                readonly type: "exceeds_withdrawal_limit";
                                readonly code: "65";
                            }, {
                                readonly type: "pin_data_required";
                                readonly code: "70";
                            }, {
                                readonly type: "pin_entry_tries_exceeded";
                                readonly code: "75";
                            }, {
                                readonly type: "unsolicited_reversal";
                                readonly code: "76";
                            }, {
                                readonly type: "blocked_first_use";
                                readonly code: "78";
                            }, {
                                readonly type: "already_reversed";
                                readonly code: "79";
                            }, {
                                readonly type: "negative_cvv_result";
                                readonly code: "82";
                            }, {
                                readonly type: "no_reason_to_decline";
                                readonly code: "85";
                            }, {
                                readonly type: "cannot_verify_pin";
                                readonly code: "86";
                            }, {
                                readonly type: "issuer_unavailable";
                                readonly code: "91";
                            }, {
                                readonly type: "unable_to_route_transaction";
                                readonly code: "92";
                            }, {
                                readonly type: "cannot_complete_violation_of_law";
                                readonly code: "93";
                            }, {
                                readonly type: "system_error";
                                readonly code: "96";
                            }, {
                                readonly type: "invalid_cvv";
                                readonly code: "97";
                            }];
                            readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Timestamp for when the order was created.";
                            readonly examples: readonly ["2025-03-27T10:00:00Z"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const OrdersList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly description: "The status of the order.";
                    readonly enum: readonly ["completed", "pending", "authorized", "partially-completed", "voided", "failed"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly to: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-05-21T10:48:18Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The end date and time for a period. This parameter is used in conjunction with the 'from' parameter to define a time range. The value should be in **ISO 8601 format**.";
                };
                readonly from: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-04-21T10:55:16Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The start date and time for a period. This parameter is used in conjunction with the 'to' parameter to define a time range. The value should be in ISO 8601 format.";
                };
                readonly customer_id: {
                    readonly type: "string";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The customer ID";
                };
                readonly payment_method_id: {
                    readonly type: "string";
                    readonly examples: readonly ["pmd_WRq7L4TM8p"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ID of the payment method.";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 10;
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the order.";
                                readonly examples: readonly ["ord_WRq7L4TM8p"];
                            };
                            readonly amount: {
                                readonly description: "The order amount in decimals.";
                                readonly type: "number";
                                readonly format: "decimal";
                                readonly minimum: 0.01;
                                readonly examples: readonly [12.34];
                            };
                            readonly fees: {
                                readonly type: "array";
                                readonly description: "Fees charged on payment amount";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                            readonly examples: readonly ["vat"];
                                        };
                                        readonly amount: {
                                            readonly type: "number";
                                            readonly format: "decimal";
                                            readonly description: "The fee amount in decimal format.";
                                            readonly examples: readonly [12.3];
                                        };
                                    };
                                };
                            };
                            readonly billing_details: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["cornelius@gmail.com"];
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                };
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly description: {
                                readonly description: "Description of the order";
                                readonly type: "string";
                                readonly examples: readonly ["Payment for a Suit Skirt"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly next_action: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["type", "redirect_url"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "redirect_url";
                                            readonly readOnly: true;
                                        };
                                        readonly redirect_url: {
                                            readonly type: "object";
                                            readonly required: readonly ["url"];
                                            readonly properties: {
                                                readonly url: {
                                                    readonly type: "string";
                                                    readonly description: "Payment screen URL to redirect customer to.";
                                                    readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type", "requires_additional_fields"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_additional_fields";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_additional_fields: {
                                            readonly type: "object";
                                            readonly required: readonly ["fields"];
                                            readonly properties: {
                                                readonly fields: {
                                                    readonly type: "array";
                                                    readonly items: {
                                                        readonly type: "string";
                                                    };
                                                    readonly maxItems: 50;
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_pin";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_pin: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_requery";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_requery: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_otp";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_otp: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type", "payment_instruction"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "payment_instruction";
                                            readonly readOnly: true;
                                        };
                                        readonly payment_instruction: {
                                            readonly type: "object";
                                            readonly required: readonly ["note"];
                                            readonly properties: {
                                                readonly note: {
                                                    readonly type: "string";
                                                    readonly description: "Custom field containing the payment instruction.";
                                                    readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_capture";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_capture: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["type", "redirect_url"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "requires_bank_transfer";
                                            readonly readOnly: true;
                                        };
                                        readonly requires_bank_transfer: {
                                            readonly type: "object";
                                            readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                            readonly properties: {
                                                readonly account_number: {
                                                    readonly type: "string";
                                                    readonly description: "The account number designated for receiving payments.";
                                                };
                                                readonly account_bank_name: {
                                                    readonly type: "string";
                                                    readonly description: "The Bank name.";
                                                };
                                                readonly account_expiration_datetime: {
                                                    readonly type: "string";
                                                    readonly description: "Specifies when the virtual account expires.";
                                                    readonly format: "date-time";
                                                };
                                                readonly note: {
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }];
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                        readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                        readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                        readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                        readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                        readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                        readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                        readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                    };
                                };
                            };
                            readonly payment_method_details: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["card", "id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "card";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly card: {
                                            readonly type: "object";
                                            readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                            readonly properties: {
                                                readonly expiry_month: {
                                                    readonly type: "integer";
                                                    readonly description: "Expiry month of the card.";
                                                    readonly examples: readonly ["09"];
                                                };
                                                readonly expiry_year: {
                                                    readonly type: "integer";
                                                    readonly description: "Expiry year of the card.";
                                                    readonly examples: readonly ["32"];
                                                };
                                                readonly first6: {
                                                    readonly type: "string";
                                                    readonly description: "Bank identification number (BIN) of the card.";
                                                    readonly minLength: 6;
                                                    readonly maxLength: 6;
                                                    readonly examples: readonly ["123412"];
                                                };
                                                readonly last4: {
                                                    readonly type: "string";
                                                    readonly description: "The last four digits of the card number.";
                                                    readonly minLength: 4;
                                                    readonly maxLength: 4;
                                                    readonly examples: readonly ["1234"];
                                                };
                                                readonly network: {
                                                    readonly type: "string";
                                                    readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                    readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                    readonly examples: readonly ["MASTERCARD"];
                                                };
                                                readonly billing_address: {
                                                    readonly type: "object";
                                                    readonly description: "Customer address information.";
                                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                    readonly properties: {
                                                        readonly city: {
                                                            readonly type: "string";
                                                            readonly description: "The name of the city.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                        readonly country: {
                                                            readonly description: "ISO2 country code";
                                                            readonly type: "string";
                                                            readonly pattern: "^[A-Z]{2}$";
                                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                            readonly examples: readonly ["US"];
                                                        };
                                                        readonly line1: {
                                                            readonly type: "string";
                                                            readonly description: "The first line of the Customer's address.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["123 Main Street"];
                                                        };
                                                        readonly line2: {
                                                            readonly type: "string";
                                                            readonly description: "The second line of the Customer's address.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["Apt 4B"];
                                                        };
                                                        readonly postal_code: {
                                                            readonly type: "string";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["10001"];
                                                        };
                                                        readonly state: {
                                                            readonly type: "string";
                                                            readonly description: "The state or region.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                    };
                                                };
                                                readonly cof: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["enabled"];
                                                    readonly properties: {
                                                        readonly enabled: {
                                                            readonly type: "boolean";
                                                            readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                            readonly examples: readonly [true];
                                                        };
                                                        readonly agreement_id: {
                                                            readonly type: "string";
                                                            readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                            readonly examples: readonly ["Agreement00w02W1"];
                                                        };
                                                        readonly recurring_amount_variability: {
                                                            readonly type: "string";
                                                            readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                            readonly enum: readonly ["VARIABLE"];
                                                            readonly examples: readonly ["VARIABLE"];
                                                        };
                                                        readonly agreement_type: {
                                                            readonly type: "string";
                                                            readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                            readonly enum: readonly ["UNSCHEDULED"];
                                                            readonly examples: readonly ["UNSCHEDULED"];
                                                            readonly description: "`UNSCHEDULED`";
                                                        };
                                                        readonly trace_id: {
                                                            readonly type: "string";
                                                            readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                            readonly examples: readonly ["123456789"];
                                                        };
                                                    };
                                                };
                                                readonly card_holder_name: {
                                                    readonly type: "string";
                                                    readonly description: "Name on the card";
                                                    readonly examples: readonly ["Alex James"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "bank_account";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly bank_account: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "mobile_money", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "mobile_money";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly mobile_money: {
                                            readonly type: "object";
                                            readonly required: readonly ["network", "phone_number", "country_code"];
                                            readonly properties: {
                                                readonly network: {
                                                    readonly type: "string";
                                                    readonly description: "The mobile network of the customer's phone number.";
                                                    readonly examples: readonly ["MTN"];
                                                };
                                                readonly country_code: {
                                                    readonly type: "string";
                                                    readonly description: "ISO 3166 alpha-3 country code.";
                                                    readonly examples: readonly ["233"];
                                                };
                                                readonly phone_number: {
                                                    readonly type: "string";
                                                    readonly description: "The phone number of customer.";
                                                    readonly examples: readonly ["9012345678"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "opay";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly opay: {
                                            readonly type: "object";
                                            readonly additionalProperties: true;
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "applepay";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly applepay: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly card_holder_name: {
                                                    readonly type: "string";
                                                    readonly description: "The cardholder name.";
                                                    readonly examples: readonly ["Yohan Blake"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "googlepay";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly googlepay: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly card_holder_name: {
                                                    readonly type: "string";
                                                    readonly description: "The cardholder name.";
                                                    readonly examples: readonly ["Yohan Blake"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "ussd";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly ussd: {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly account_bank: {
                                                    readonly type: "string";
                                                    readonly description: "The bank code of the USSD string to generate.";
                                                    readonly examples: readonly ["050"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["bank_transfer", "id", "type"];
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of the payment method.";
                                            readonly default: "bank_transfer";
                                            readonly readOnly: true;
                                            readonly examples: readonly ["card"];
                                        };
                                        readonly bank_transfer: {
                                            readonly type: "object";
                                            readonly required: readonly ["account_type"];
                                            readonly properties: {
                                                readonly account_expires_in: {
                                                    readonly type: "integer";
                                                    readonly description: "The expiry time of the virtual account.";
                                                    readonly maximum: 432000;
                                                    readonly examples: readonly [360];
                                                };
                                                readonly account_display_name: {
                                                    readonly type: "string";
                                                    readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                    readonly minLength: 3;
                                                    readonly maxLength: 256;
                                                    readonly examples: readonly ["Alex James"];
                                                };
                                                readonly account_type: {
                                                    readonly type: "string";
                                                    readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                    readonly enum: readonly ["static", "dynamic"];
                                                    readonly examples: readonly ["static"];
                                                };
                                                readonly originator_bank_name: {
                                                    readonly type: "string";
                                                    readonly description: "The sender's Bank name";
                                                    readonly examples: readonly ["Mock Bank"];
                                                };
                                                readonly originator_account_number: {
                                                    readonly type: "string";
                                                    readonly description: "The Sender's masked account number";
                                                    readonly examples: readonly ["002*******78"];
                                                };
                                                readonly originator_name: {
                                                    readonly type: "string";
                                                    readonly description: "The sender's name";
                                                    readonly examples: readonly ["Jane Doe"];
                                                };
                                            };
                                        };
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "ID of the payment method.";
                                            readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                        };
                                        readonly customer_id: {
                                            readonly description: "ID of the customer.";
                                            readonly type: "string";
                                            readonly examples: readonly ["cus_3XarBILKQS"];
                                        };
                                        readonly meta: {
                                            readonly type: "object";
                                            readonly additionalProperties: {
                                                readonly type: "string";
                                            };
                                        };
                                        readonly device_fingerprint: {
                                            readonly description: "The customer's device fingerprint.";
                                            readonly type: "string";
                                            readonly examples: readonly ["62wd23423rq324323qew1"];
                                        };
                                        readonly client_ip: {
                                            readonly description: "The customer's device IP.";
                                            readonly type: "string";
                                            readonly examples: readonly ["154.123.220.1"];
                                        };
                                        readonly created_datetime: {
                                            readonly type: "string";
                                            readonly format: "date-time";
                                            readonly description: "The date and time when the virtual account was created.";
                                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                        };
                                    };
                                }];
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly card: "#/components/schemas/card_payment_method";
                                        readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                        readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                        readonly opay: "#/components/schemas/opay_payment_method";
                                        readonly applepay: "#/components/schemas/applepay_payment_method";
                                        readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                        readonly ussd: "#/components/schemas/ussd_payment_method";
                                        readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                    };
                                };
                            };
                            readonly redirect_url: {
                                readonly type: "string";
                                readonly description: "Specifies the URL to redirect to.";
                                readonly examples: readonly ["https://flutterwave.com"];
                            };
                            readonly reference: {
                                readonly type: "string";
                                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                                readonly minLength: 6;
                                readonly maxLength: 42;
                                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                                readonly "x-pattern-message": "must be an alphanumeric string";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "The status of the order.\n\n`completed` `pending` `authorized` `partially-completed` `voided` `failed`";
                                readonly enum: readonly ["completed", "pending", "authorized", "partially-completed", "voided", "failed"];
                            };
                            readonly processor_response: {
                                readonly type: "object";
                                readonly required: readonly ["type", "code"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                    };
                                    readonly code: {
                                        readonly type: "string";
                                        readonly pattern: "\\d{2}";
                                        readonly "x-pattern-message": "must be two digits";
                                    };
                                };
                                readonly enum: readonly [{
                                    readonly type: "approved";
                                    readonly code: "00";
                                }, {
                                    readonly type: "refer_to_issuer";
                                    readonly code: "01";
                                }, {
                                    readonly type: "refer_to_issuer_special_condition";
                                    readonly code: "02";
                                }, {
                                    readonly type: "invalid_merchant";
                                    readonly code: "03";
                                }, {
                                    readonly type: "pick_up_card_no_fraud";
                                    readonly code: "04";
                                }, {
                                    readonly type: "do_not_honor";
                                    readonly code: "05";
                                }, {
                                    readonly type: "error";
                                    readonly code: "06";
                                }, {
                                    readonly type: "pick_up_card_fraud";
                                    readonly code: "07";
                                }, {
                                    readonly type: "partial_approval";
                                    readonly code: "10";
                                }, {
                                    readonly type: "invalid_transaction";
                                    readonly code: "12";
                                }, {
                                    readonly type: "invalid_amount";
                                    readonly code: "13";
                                }, {
                                    readonly type: "invalid_account_number";
                                    readonly code: "14";
                                }, {
                                    readonly type: "no_such_issuer";
                                    readonly code: "15";
                                }, {
                                    readonly type: "reenter_transaction";
                                    readonly code: "19";
                                }, {
                                    readonly type: "no_action_taken";
                                    readonly code: "21";
                                }, {
                                    readonly type: "unable_to_locate_record_in_file";
                                    readonly code: "25";
                                }, {
                                    readonly type: "file_temporarily_not_available";
                                    readonly code: "28";
                                }, {
                                    readonly type: "lost_card_pick_up";
                                    readonly code: "41";
                                }, {
                                    readonly type: "stolen_card_pick_up";
                                    readonly code: "43";
                                }, {
                                    readonly type: "insufficient_funds";
                                    readonly code: "51";
                                }, {
                                    readonly type: "no_checking_account";
                                    readonly code: "52";
                                }, {
                                    readonly type: "no_savings_account";
                                    readonly code: "53";
                                }, {
                                    readonly type: "expired_card";
                                    readonly code: "54";
                                }, {
                                    readonly type: "incorrect_pin";
                                    readonly code: "55";
                                }, {
                                    readonly type: "transaction_not_permitted_card";
                                    readonly code: "57";
                                }, {
                                    readonly type: "transaction_not_permitted_terminal";
                                    readonly code: "58";
                                }, {
                                    readonly type: "suspected_fraud";
                                    readonly code: "59";
                                }, {
                                    readonly type: "exceeds_approval_amount_limit";
                                    readonly code: "61";
                                }, {
                                    readonly type: "invalid_restricted_service_code";
                                    readonly code: "62";
                                }, {
                                    readonly type: "security_violation";
                                    readonly code: "63";
                                }, {
                                    readonly type: "transaction_does_not_fulfill_aml_req";
                                    readonly code: "64";
                                }, {
                                    readonly type: "exceeds_withdrawal_limit";
                                    readonly code: "65";
                                }, {
                                    readonly type: "pin_data_required";
                                    readonly code: "70";
                                }, {
                                    readonly type: "pin_entry_tries_exceeded";
                                    readonly code: "75";
                                }, {
                                    readonly type: "unsolicited_reversal";
                                    readonly code: "76";
                                }, {
                                    readonly type: "blocked_first_use";
                                    readonly code: "78";
                                }, {
                                    readonly type: "already_reversed";
                                    readonly code: "79";
                                }, {
                                    readonly type: "negative_cvv_result";
                                    readonly code: "82";
                                }, {
                                    readonly type: "no_reason_to_decline";
                                    readonly code: "85";
                                }, {
                                    readonly type: "cannot_verify_pin";
                                    readonly code: "86";
                                }, {
                                    readonly type: "issuer_unavailable";
                                    readonly code: "91";
                                }, {
                                    readonly type: "unable_to_route_transaction";
                                    readonly code: "92";
                                }, {
                                    readonly type: "cannot_complete_violation_of_law";
                                    readonly code: "93";
                                }, {
                                    readonly type: "system_error";
                                    readonly code: "96";
                                }, {
                                    readonly type: "invalid_cvv";
                                    readonly code: "97";
                                }];
                                readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "Timestamp for when the order was created.";
                                readonly examples: readonly ["2025-03-27T10:00:00Z"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const OrdersPost: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["amount", "currency", "reference", "customer_id", "payment_method_id"];
        readonly properties: {
            readonly amount: {
                readonly description: "The order amount in decimals.";
                readonly type: "number";
                readonly format: "decimal";
                readonly minimum: 0.01;
                readonly examples: readonly [12.34];
            };
            readonly currency: {
                readonly description: "ISO 4217 currency code.";
                readonly type: "string";
                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                readonly examples: readonly ["NGN"];
            };
            readonly reference: {
                readonly type: "string";
                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                readonly minLength: 6;
                readonly maxLength: 42;
                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                readonly "x-pattern-message": "must be an alphanumeric string";
            };
            readonly customer_id: {
                readonly type: "string";
                readonly description: "ID of the customer.";
                readonly examples: readonly ["cus_3XarBILKQS"];
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly payment_method_id: {
                readonly type: "string";
                readonly description: "ID of the payment method.";
                readonly examples: readonly ["pmd_WRq7L4TM8p"];
            };
            readonly redirect_url: {
                readonly type: "string";
                readonly description: "Specifies the URL to redirect to.";
            };
            readonly authorization: {
                readonly oneOf: readonly [{
                    readonly type: "object";
                    readonly description: "3DS authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "3ds";
                            readonly readOnly: true;
                        };
                        readonly "3ds": {
                            readonly type: "object";
                            readonly additionalProperties: true;
                        };
                    };
                }];
                readonly discriminator: {
                    readonly propertyName: "type";
                    readonly mapping: {
                        readonly "3ds": "#/components/schemas/3ds_authorization_in";
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the order.";
                            readonly examples: readonly ["ord_WRq7L4TM8p"];
                        };
                        readonly amount: {
                            readonly description: "The order amount in decimals.";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly fees: {
                            readonly type: "array";
                            readonly description: "Fees charged on payment amount";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                        readonly examples: readonly ["vat"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The fee amount in decimal format.";
                                        readonly examples: readonly [12.3];
                                    };
                                };
                            };
                        };
                        readonly billing_details: {
                            readonly type: "object";
                            readonly properties: {
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Customer's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Customer's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The customer's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer.";
                            readonly type: "string";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly description: {
                            readonly description: "Description of the order";
                            readonly type: "string";
                            readonly examples: readonly ["Payment for a Suit Skirt"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly next_action: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "redirect_url";
                                        readonly readOnly: true;
                                    };
                                    readonly redirect_url: {
                                        readonly type: "object";
                                        readonly required: readonly ["url"];
                                        readonly properties: {
                                            readonly url: {
                                                readonly type: "string";
                                                readonly description: "Payment screen URL to redirect customer to.";
                                                readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "requires_additional_fields"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_additional_fields";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_additional_fields: {
                                        readonly type: "object";
                                        readonly required: readonly ["fields"];
                                        readonly properties: {
                                            readonly fields: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly maxItems: 50;
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_pin";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_pin: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_requery";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_requery: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_otp";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_otp: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "payment_instruction"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "payment_instruction";
                                        readonly readOnly: true;
                                    };
                                    readonly payment_instruction: {
                                        readonly type: "object";
                                        readonly required: readonly ["note"];
                                        readonly properties: {
                                            readonly note: {
                                                readonly type: "string";
                                                readonly description: "Custom field containing the payment instruction.";
                                                readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_capture";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_capture: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_bank_transfer";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly type: "string";
                                                readonly description: "The account number designated for receiving payments.";
                                            };
                                            readonly account_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The Bank name.";
                                            };
                                            readonly account_expiration_datetime: {
                                                readonly type: "string";
                                                readonly description: "Specifies when the virtual account expires.";
                                                readonly format: "date-time";
                                            };
                                            readonly note: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                    readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                    readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                    readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                    readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                    readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                    readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                    readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                };
                            };
                        };
                        readonly payment_method_details: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["card", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "card";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly card: {
                                        readonly type: "object";
                                        readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                        readonly properties: {
                                            readonly expiry_month: {
                                                readonly type: "integer";
                                                readonly description: "Expiry month of the card.";
                                                readonly examples: readonly ["09"];
                                            };
                                            readonly expiry_year: {
                                                readonly type: "integer";
                                                readonly description: "Expiry year of the card.";
                                                readonly examples: readonly ["32"];
                                            };
                                            readonly first6: {
                                                readonly type: "string";
                                                readonly description: "Bank identification number (BIN) of the card.";
                                                readonly minLength: 6;
                                                readonly maxLength: 6;
                                                readonly examples: readonly ["123412"];
                                            };
                                            readonly last4: {
                                                readonly type: "string";
                                                readonly description: "The last four digits of the card number.";
                                                readonly minLength: 4;
                                                readonly maxLength: 4;
                                                readonly examples: readonly ["1234"];
                                            };
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                readonly examples: readonly ["MASTERCARD"];
                                            };
                                            readonly billing_address: {
                                                readonly type: "object";
                                                readonly description: "Customer address information.";
                                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                readonly properties: {
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the city.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                    readonly country: {
                                                        readonly description: "ISO2 country code";
                                                        readonly type: "string";
                                                        readonly pattern: "^[A-Z]{2}$";
                                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                        readonly examples: readonly ["US"];
                                                    };
                                                    readonly line1: {
                                                        readonly type: "string";
                                                        readonly description: "The first line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["123 Main Street"];
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                        readonly description: "The second line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["Apt 4B"];
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["10001"];
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "The state or region.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                };
                                            };
                                            readonly cof: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                        readonly examples: readonly [true];
                                                    };
                                                    readonly agreement_id: {
                                                        readonly type: "string";
                                                        readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["Agreement00w02W1"];
                                                    };
                                                    readonly recurring_amount_variability: {
                                                        readonly type: "string";
                                                        readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                        readonly enum: readonly ["VARIABLE"];
                                                        readonly examples: readonly ["VARIABLE"];
                                                    };
                                                    readonly agreement_type: {
                                                        readonly type: "string";
                                                        readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                        readonly enum: readonly ["UNSCHEDULED"];
                                                        readonly examples: readonly ["UNSCHEDULED"];
                                                        readonly description: "`UNSCHEDULED`";
                                                    };
                                                    readonly trace_id: {
                                                        readonly type: "string";
                                                        readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["123456789"];
                                                    };
                                                };
                                            };
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "Name on the card";
                                                readonly examples: readonly ["Alex James"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_account";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_account: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "mobile_money", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "phone_number", "country_code"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The mobile network of the customer's phone number.";
                                                readonly examples: readonly ["MTN"];
                                            };
                                            readonly country_code: {
                                                readonly type: "string";
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly examples: readonly ["233"];
                                            };
                                            readonly phone_number: {
                                                readonly type: "string";
                                                readonly description: "The phone number of customer.";
                                                readonly examples: readonly ["9012345678"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "opay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly opay: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "applepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly applepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "googlepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly googlepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "ussd";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly ussd: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly account_bank: {
                                                readonly type: "string";
                                                readonly description: "The bank code of the USSD string to generate.";
                                                readonly examples: readonly ["050"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["bank_transfer", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_transfer";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_type"];
                                        readonly properties: {
                                            readonly account_expires_in: {
                                                readonly type: "integer";
                                                readonly description: "The expiry time of the virtual account.";
                                                readonly maximum: 432000;
                                                readonly examples: readonly [360];
                                            };
                                            readonly account_display_name: {
                                                readonly type: "string";
                                                readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                readonly minLength: 3;
                                                readonly maxLength: 256;
                                                readonly examples: readonly ["Alex James"];
                                            };
                                            readonly account_type: {
                                                readonly type: "string";
                                                readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                readonly enum: readonly ["static", "dynamic"];
                                                readonly examples: readonly ["static"];
                                            };
                                            readonly originator_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's Bank name";
                                                readonly examples: readonly ["Mock Bank"];
                                            };
                                            readonly originator_account_number: {
                                                readonly type: "string";
                                                readonly description: "The Sender's masked account number";
                                                readonly examples: readonly ["002*******78"];
                                            };
                                            readonly originator_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's name";
                                                readonly examples: readonly ["Jane Doe"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly card: "#/components/schemas/card_payment_method";
                                    readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                    readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                    readonly opay: "#/components/schemas/opay_payment_method";
                                    readonly applepay: "#/components/schemas/applepay_payment_method";
                                    readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                    readonly ussd: "#/components/schemas/ussd_payment_method";
                                    readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                };
                            };
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to.";
                            readonly examples: readonly ["https://flutterwave.com"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the order.\n\n`completed` `pending` `authorized` `partially-completed` `voided` `failed`";
                            readonly enum: readonly ["completed", "pending", "authorized", "partially-completed", "voided", "failed"];
                        };
                        readonly processor_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "\\d{2}";
                                    readonly "x-pattern-message": "must be two digits";
                                };
                            };
                            readonly enum: readonly [{
                                readonly type: "approved";
                                readonly code: "00";
                            }, {
                                readonly type: "refer_to_issuer";
                                readonly code: "01";
                            }, {
                                readonly type: "refer_to_issuer_special_condition";
                                readonly code: "02";
                            }, {
                                readonly type: "invalid_merchant";
                                readonly code: "03";
                            }, {
                                readonly type: "pick_up_card_no_fraud";
                                readonly code: "04";
                            }, {
                                readonly type: "do_not_honor";
                                readonly code: "05";
                            }, {
                                readonly type: "error";
                                readonly code: "06";
                            }, {
                                readonly type: "pick_up_card_fraud";
                                readonly code: "07";
                            }, {
                                readonly type: "partial_approval";
                                readonly code: "10";
                            }, {
                                readonly type: "invalid_transaction";
                                readonly code: "12";
                            }, {
                                readonly type: "invalid_amount";
                                readonly code: "13";
                            }, {
                                readonly type: "invalid_account_number";
                                readonly code: "14";
                            }, {
                                readonly type: "no_such_issuer";
                                readonly code: "15";
                            }, {
                                readonly type: "reenter_transaction";
                                readonly code: "19";
                            }, {
                                readonly type: "no_action_taken";
                                readonly code: "21";
                            }, {
                                readonly type: "unable_to_locate_record_in_file";
                                readonly code: "25";
                            }, {
                                readonly type: "file_temporarily_not_available";
                                readonly code: "28";
                            }, {
                                readonly type: "lost_card_pick_up";
                                readonly code: "41";
                            }, {
                                readonly type: "stolen_card_pick_up";
                                readonly code: "43";
                            }, {
                                readonly type: "insufficient_funds";
                                readonly code: "51";
                            }, {
                                readonly type: "no_checking_account";
                                readonly code: "52";
                            }, {
                                readonly type: "no_savings_account";
                                readonly code: "53";
                            }, {
                                readonly type: "expired_card";
                                readonly code: "54";
                            }, {
                                readonly type: "incorrect_pin";
                                readonly code: "55";
                            }, {
                                readonly type: "transaction_not_permitted_card";
                                readonly code: "57";
                            }, {
                                readonly type: "transaction_not_permitted_terminal";
                                readonly code: "58";
                            }, {
                                readonly type: "suspected_fraud";
                                readonly code: "59";
                            }, {
                                readonly type: "exceeds_approval_amount_limit";
                                readonly code: "61";
                            }, {
                                readonly type: "invalid_restricted_service_code";
                                readonly code: "62";
                            }, {
                                readonly type: "security_violation";
                                readonly code: "63";
                            }, {
                                readonly type: "transaction_does_not_fulfill_aml_req";
                                readonly code: "64";
                            }, {
                                readonly type: "exceeds_withdrawal_limit";
                                readonly code: "65";
                            }, {
                                readonly type: "pin_data_required";
                                readonly code: "70";
                            }, {
                                readonly type: "pin_entry_tries_exceeded";
                                readonly code: "75";
                            }, {
                                readonly type: "unsolicited_reversal";
                                readonly code: "76";
                            }, {
                                readonly type: "blocked_first_use";
                                readonly code: "78";
                            }, {
                                readonly type: "already_reversed";
                                readonly code: "79";
                            }, {
                                readonly type: "negative_cvv_result";
                                readonly code: "82";
                            }, {
                                readonly type: "no_reason_to_decline";
                                readonly code: "85";
                            }, {
                                readonly type: "cannot_verify_pin";
                                readonly code: "86";
                            }, {
                                readonly type: "issuer_unavailable";
                                readonly code: "91";
                            }, {
                                readonly type: "unable_to_route_transaction";
                                readonly code: "92";
                            }, {
                                readonly type: "cannot_complete_violation_of_law";
                                readonly code: "93";
                            }, {
                                readonly type: "system_error";
                                readonly code: "96";
                            }, {
                                readonly type: "invalid_cvv";
                                readonly code: "97";
                            }];
                            readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Timestamp for when the order was created.";
                            readonly examples: readonly ["2025-03-27T10:00:00Z"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const OrdersPut: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly action: {
                readonly type: "string";
                readonly description: "Action to be carried out on an order";
                readonly enum: readonly ["void", "capture"];
                readonly examples: readonly ["void"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the order.";
                    readonly type: "string";
                    readonly examples: readonly ["ord_EFAHCzELJb"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the order.";
                            readonly examples: readonly ["ord_WRq7L4TM8p"];
                        };
                        readonly amount: {
                            readonly description: "The order amount in decimals.";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly fees: {
                            readonly type: "array";
                            readonly description: "Fees charged on payment amount";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                        readonly examples: readonly ["vat"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The fee amount in decimal format.";
                                        readonly examples: readonly [12.3];
                                    };
                                };
                            };
                        };
                        readonly billing_details: {
                            readonly type: "object";
                            readonly properties: {
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Customer's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Customer's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The customer's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer.";
                            readonly type: "string";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly description: {
                            readonly description: "Description of the order";
                            readonly type: "string";
                            readonly examples: readonly ["Payment for a Suit Skirt"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly next_action: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "redirect_url";
                                        readonly readOnly: true;
                                    };
                                    readonly redirect_url: {
                                        readonly type: "object";
                                        readonly required: readonly ["url"];
                                        readonly properties: {
                                            readonly url: {
                                                readonly type: "string";
                                                readonly description: "Payment screen URL to redirect customer to.";
                                                readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "requires_additional_fields"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_additional_fields";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_additional_fields: {
                                        readonly type: "object";
                                        readonly required: readonly ["fields"];
                                        readonly properties: {
                                            readonly fields: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly maxItems: 50;
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_pin";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_pin: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_requery";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_requery: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_otp";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_otp: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "payment_instruction"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "payment_instruction";
                                        readonly readOnly: true;
                                    };
                                    readonly payment_instruction: {
                                        readonly type: "object";
                                        readonly required: readonly ["note"];
                                        readonly properties: {
                                            readonly note: {
                                                readonly type: "string";
                                                readonly description: "Custom field containing the payment instruction.";
                                                readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_capture";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_capture: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_bank_transfer";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly type: "string";
                                                readonly description: "The account number designated for receiving payments.";
                                            };
                                            readonly account_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The Bank name.";
                                            };
                                            readonly account_expiration_datetime: {
                                                readonly type: "string";
                                                readonly description: "Specifies when the virtual account expires.";
                                                readonly format: "date-time";
                                            };
                                            readonly note: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                    readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                    readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                    readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                    readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                    readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                    readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                    readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                };
                            };
                        };
                        readonly payment_method_details: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["card", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "card";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly card: {
                                        readonly type: "object";
                                        readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                        readonly properties: {
                                            readonly expiry_month: {
                                                readonly type: "integer";
                                                readonly description: "Expiry month of the card.";
                                                readonly examples: readonly ["09"];
                                            };
                                            readonly expiry_year: {
                                                readonly type: "integer";
                                                readonly description: "Expiry year of the card.";
                                                readonly examples: readonly ["32"];
                                            };
                                            readonly first6: {
                                                readonly type: "string";
                                                readonly description: "Bank identification number (BIN) of the card.";
                                                readonly minLength: 6;
                                                readonly maxLength: 6;
                                                readonly examples: readonly ["123412"];
                                            };
                                            readonly last4: {
                                                readonly type: "string";
                                                readonly description: "The last four digits of the card number.";
                                                readonly minLength: 4;
                                                readonly maxLength: 4;
                                                readonly examples: readonly ["1234"];
                                            };
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                readonly examples: readonly ["MASTERCARD"];
                                            };
                                            readonly billing_address: {
                                                readonly type: "object";
                                                readonly description: "Customer address information.";
                                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                readonly properties: {
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the city.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                    readonly country: {
                                                        readonly description: "ISO2 country code";
                                                        readonly type: "string";
                                                        readonly pattern: "^[A-Z]{2}$";
                                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                        readonly examples: readonly ["US"];
                                                    };
                                                    readonly line1: {
                                                        readonly type: "string";
                                                        readonly description: "The first line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["123 Main Street"];
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                        readonly description: "The second line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["Apt 4B"];
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["10001"];
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "The state or region.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                };
                                            };
                                            readonly cof: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                        readonly examples: readonly [true];
                                                    };
                                                    readonly agreement_id: {
                                                        readonly type: "string";
                                                        readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["Agreement00w02W1"];
                                                    };
                                                    readonly recurring_amount_variability: {
                                                        readonly type: "string";
                                                        readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                        readonly enum: readonly ["VARIABLE"];
                                                        readonly examples: readonly ["VARIABLE"];
                                                    };
                                                    readonly agreement_type: {
                                                        readonly type: "string";
                                                        readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                        readonly enum: readonly ["UNSCHEDULED"];
                                                        readonly examples: readonly ["UNSCHEDULED"];
                                                        readonly description: "`UNSCHEDULED`";
                                                    };
                                                    readonly trace_id: {
                                                        readonly type: "string";
                                                        readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["123456789"];
                                                    };
                                                };
                                            };
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "Name on the card";
                                                readonly examples: readonly ["Alex James"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_account";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_account: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "mobile_money", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "phone_number", "country_code"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The mobile network of the customer's phone number.";
                                                readonly examples: readonly ["MTN"];
                                            };
                                            readonly country_code: {
                                                readonly type: "string";
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly examples: readonly ["233"];
                                            };
                                            readonly phone_number: {
                                                readonly type: "string";
                                                readonly description: "The phone number of customer.";
                                                readonly examples: readonly ["9012345678"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "opay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly opay: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "applepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly applepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "googlepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly googlepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "ussd";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly ussd: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly account_bank: {
                                                readonly type: "string";
                                                readonly description: "The bank code of the USSD string to generate.";
                                                readonly examples: readonly ["050"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["bank_transfer", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_transfer";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_type"];
                                        readonly properties: {
                                            readonly account_expires_in: {
                                                readonly type: "integer";
                                                readonly description: "The expiry time of the virtual account.";
                                                readonly maximum: 432000;
                                                readonly examples: readonly [360];
                                            };
                                            readonly account_display_name: {
                                                readonly type: "string";
                                                readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                readonly minLength: 3;
                                                readonly maxLength: 256;
                                                readonly examples: readonly ["Alex James"];
                                            };
                                            readonly account_type: {
                                                readonly type: "string";
                                                readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                readonly enum: readonly ["static", "dynamic"];
                                                readonly examples: readonly ["static"];
                                            };
                                            readonly originator_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's Bank name";
                                                readonly examples: readonly ["Mock Bank"];
                                            };
                                            readonly originator_account_number: {
                                                readonly type: "string";
                                                readonly description: "The Sender's masked account number";
                                                readonly examples: readonly ["002*******78"];
                                            };
                                            readonly originator_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's name";
                                                readonly examples: readonly ["Jane Doe"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly card: "#/components/schemas/card_payment_method";
                                    readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                    readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                    readonly opay: "#/components/schemas/opay_payment_method";
                                    readonly applepay: "#/components/schemas/applepay_payment_method";
                                    readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                    readonly ussd: "#/components/schemas/ussd_payment_method";
                                    readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                };
                            };
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to.";
                            readonly examples: readonly ["https://flutterwave.com"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the order.\n\n`completed` `pending` `authorized` `partially-completed` `voided` `failed`";
                            readonly enum: readonly ["completed", "pending", "authorized", "partially-completed", "voided", "failed"];
                        };
                        readonly processor_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "\\d{2}";
                                    readonly "x-pattern-message": "must be two digits";
                                };
                            };
                            readonly enum: readonly [{
                                readonly type: "approved";
                                readonly code: "00";
                            }, {
                                readonly type: "refer_to_issuer";
                                readonly code: "01";
                            }, {
                                readonly type: "refer_to_issuer_special_condition";
                                readonly code: "02";
                            }, {
                                readonly type: "invalid_merchant";
                                readonly code: "03";
                            }, {
                                readonly type: "pick_up_card_no_fraud";
                                readonly code: "04";
                            }, {
                                readonly type: "do_not_honor";
                                readonly code: "05";
                            }, {
                                readonly type: "error";
                                readonly code: "06";
                            }, {
                                readonly type: "pick_up_card_fraud";
                                readonly code: "07";
                            }, {
                                readonly type: "partial_approval";
                                readonly code: "10";
                            }, {
                                readonly type: "invalid_transaction";
                                readonly code: "12";
                            }, {
                                readonly type: "invalid_amount";
                                readonly code: "13";
                            }, {
                                readonly type: "invalid_account_number";
                                readonly code: "14";
                            }, {
                                readonly type: "no_such_issuer";
                                readonly code: "15";
                            }, {
                                readonly type: "reenter_transaction";
                                readonly code: "19";
                            }, {
                                readonly type: "no_action_taken";
                                readonly code: "21";
                            }, {
                                readonly type: "unable_to_locate_record_in_file";
                                readonly code: "25";
                            }, {
                                readonly type: "file_temporarily_not_available";
                                readonly code: "28";
                            }, {
                                readonly type: "lost_card_pick_up";
                                readonly code: "41";
                            }, {
                                readonly type: "stolen_card_pick_up";
                                readonly code: "43";
                            }, {
                                readonly type: "insufficient_funds";
                                readonly code: "51";
                            }, {
                                readonly type: "no_checking_account";
                                readonly code: "52";
                            }, {
                                readonly type: "no_savings_account";
                                readonly code: "53";
                            }, {
                                readonly type: "expired_card";
                                readonly code: "54";
                            }, {
                                readonly type: "incorrect_pin";
                                readonly code: "55";
                            }, {
                                readonly type: "transaction_not_permitted_card";
                                readonly code: "57";
                            }, {
                                readonly type: "transaction_not_permitted_terminal";
                                readonly code: "58";
                            }, {
                                readonly type: "suspected_fraud";
                                readonly code: "59";
                            }, {
                                readonly type: "exceeds_approval_amount_limit";
                                readonly code: "61";
                            }, {
                                readonly type: "invalid_restricted_service_code";
                                readonly code: "62";
                            }, {
                                readonly type: "security_violation";
                                readonly code: "63";
                            }, {
                                readonly type: "transaction_does_not_fulfill_aml_req";
                                readonly code: "64";
                            }, {
                                readonly type: "exceeds_withdrawal_limit";
                                readonly code: "65";
                            }, {
                                readonly type: "pin_data_required";
                                readonly code: "70";
                            }, {
                                readonly type: "pin_entry_tries_exceeded";
                                readonly code: "75";
                            }, {
                                readonly type: "unsolicited_reversal";
                                readonly code: "76";
                            }, {
                                readonly type: "blocked_first_use";
                                readonly code: "78";
                            }, {
                                readonly type: "already_reversed";
                                readonly code: "79";
                            }, {
                                readonly type: "negative_cvv_result";
                                readonly code: "82";
                            }, {
                                readonly type: "no_reason_to_decline";
                                readonly code: "85";
                            }, {
                                readonly type: "cannot_verify_pin";
                                readonly code: "86";
                            }, {
                                readonly type: "issuer_unavailable";
                                readonly code: "91";
                            }, {
                                readonly type: "unable_to_route_transaction";
                                readonly code: "92";
                            }, {
                                readonly type: "cannot_complete_violation_of_law";
                                readonly code: "93";
                            }, {
                                readonly type: "system_error";
                                readonly code: "96";
                            }, {
                                readonly type: "invalid_cvv";
                                readonly code: "97";
                            }];
                            readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Timestamp for when the order was created.";
                            readonly examples: readonly ["2025-03-27T10:00:00Z"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PaymentMethodsGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the payment method.";
                    readonly type: "string";
                    readonly examples: readonly ["pmd_le6FjifCF7"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["card", "id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "card";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly card: {
                                readonly type: "object";
                                readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                readonly properties: {
                                    readonly expiry_month: {
                                        readonly type: "integer";
                                        readonly description: "Expiry month of the card.";
                                        readonly examples: readonly ["09"];
                                    };
                                    readonly expiry_year: {
                                        readonly type: "integer";
                                        readonly description: "Expiry year of the card.";
                                        readonly examples: readonly ["32"];
                                    };
                                    readonly first6: {
                                        readonly type: "string";
                                        readonly description: "Bank identification number (BIN) of the card.";
                                        readonly minLength: 6;
                                        readonly maxLength: 6;
                                        readonly examples: readonly ["123412"];
                                    };
                                    readonly last4: {
                                        readonly type: "string";
                                        readonly description: "The last four digits of the card number.";
                                        readonly minLength: 4;
                                        readonly maxLength: 4;
                                        readonly examples: readonly ["1234"];
                                    };
                                    readonly network: {
                                        readonly type: "string";
                                        readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                        readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                        readonly examples: readonly ["MASTERCARD"];
                                    };
                                    readonly billing_address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly cof: {
                                        readonly type: "object";
                                        readonly required: readonly ["enabled"];
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                                readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                readonly examples: readonly [true];
                                            };
                                            readonly agreement_id: {
                                                readonly type: "string";
                                                readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                readonly examples: readonly ["Agreement00w02W1"];
                                            };
                                            readonly recurring_amount_variability: {
                                                readonly type: "string";
                                                readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                readonly enum: readonly ["VARIABLE"];
                                                readonly examples: readonly ["VARIABLE"];
                                            };
                                            readonly agreement_type: {
                                                readonly type: "string";
                                                readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                readonly enum: readonly ["UNSCHEDULED"];
                                                readonly examples: readonly ["UNSCHEDULED"];
                                                readonly description: "`UNSCHEDULED`";
                                            };
                                            readonly trace_id: {
                                                readonly type: "string";
                                                readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                readonly examples: readonly ["123456789"];
                                            };
                                        };
                                    };
                                    readonly card_holder_name: {
                                        readonly type: "string";
                                        readonly description: "Name on the card";
                                        readonly examples: readonly ["Alex James"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "bank_account";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly bank_account: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "mobile_money", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "mobile_money";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly mobile_money: {
                                readonly type: "object";
                                readonly required: readonly ["network", "phone_number", "country_code"];
                                readonly properties: {
                                    readonly network: {
                                        readonly type: "string";
                                        readonly description: "The mobile network of the customer's phone number.";
                                        readonly examples: readonly ["MTN"];
                                    };
                                    readonly country_code: {
                                        readonly type: "string";
                                        readonly description: "ISO 3166 alpha-3 country code.";
                                        readonly examples: readonly ["233"];
                                    };
                                    readonly phone_number: {
                                        readonly type: "string";
                                        readonly description: "The phone number of customer.";
                                        readonly examples: readonly ["9012345678"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "opay";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly opay: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "applepay";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly applepay: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly card_holder_name: {
                                        readonly type: "string";
                                        readonly description: "The cardholder name.";
                                        readonly examples: readonly ["Yohan Blake"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "googlepay";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly googlepay: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly card_holder_name: {
                                        readonly type: "string";
                                        readonly description: "The cardholder name.";
                                        readonly examples: readonly ["Yohan Blake"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "ussd";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly ussd: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly account_bank: {
                                        readonly type: "string";
                                        readonly description: "The bank code of the USSD string to generate.";
                                        readonly examples: readonly ["050"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["bank_transfer", "id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "bank_transfer";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly bank_transfer: {
                                readonly type: "object";
                                readonly required: readonly ["account_type"];
                                readonly properties: {
                                    readonly account_expires_in: {
                                        readonly type: "integer";
                                        readonly description: "The expiry time of the virtual account.";
                                        readonly maximum: 432000;
                                        readonly examples: readonly [360];
                                    };
                                    readonly account_display_name: {
                                        readonly type: "string";
                                        readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                        readonly minLength: 3;
                                        readonly maxLength: 256;
                                        readonly examples: readonly ["Alex James"];
                                    };
                                    readonly account_type: {
                                        readonly type: "string";
                                        readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                        readonly enum: readonly ["static", "dynamic"];
                                        readonly examples: readonly ["static"];
                                    };
                                    readonly originator_bank_name: {
                                        readonly type: "string";
                                        readonly description: "The sender's Bank name";
                                        readonly examples: readonly ["Mock Bank"];
                                    };
                                    readonly originator_account_number: {
                                        readonly type: "string";
                                        readonly description: "The Sender's masked account number";
                                        readonly examples: readonly ["002*******78"];
                                    };
                                    readonly originator_name: {
                                        readonly type: "string";
                                        readonly description: "The sender's name";
                                        readonly examples: readonly ["Jane Doe"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly card: "#/components/schemas/card_payment_method";
                            readonly bank_account: "#/components/schemas/bank_account_payment_method";
                            readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                            readonly opay: "#/components/schemas/opay_payment_method";
                            readonly applepay: "#/components/schemas/applepay_payment_method";
                            readonly googlepay: "#/components/schemas/googlepay_payment_method";
                            readonly ussd: "#/components/schemas/ussd_payment_method";
                            readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PaymentMethodsList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 10;
                    readonly items: {
                        readonly oneOf: readonly [{
                            readonly type: "object";
                            readonly required: readonly ["card", "id", "type"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payment method.";
                                    readonly default: "card";
                                    readonly readOnly: true;
                                    readonly examples: readonly ["card"];
                                };
                                readonly card: {
                                    readonly type: "object";
                                    readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                    readonly properties: {
                                        readonly expiry_month: {
                                            readonly type: "integer";
                                            readonly description: "Expiry month of the card.";
                                            readonly examples: readonly ["09"];
                                        };
                                        readonly expiry_year: {
                                            readonly type: "integer";
                                            readonly description: "Expiry year of the card.";
                                            readonly examples: readonly ["32"];
                                        };
                                        readonly first6: {
                                            readonly type: "string";
                                            readonly description: "Bank identification number (BIN) of the card.";
                                            readonly minLength: 6;
                                            readonly maxLength: 6;
                                            readonly examples: readonly ["123412"];
                                        };
                                        readonly last4: {
                                            readonly type: "string";
                                            readonly description: "The last four digits of the card number.";
                                            readonly minLength: 4;
                                            readonly maxLength: 4;
                                            readonly examples: readonly ["1234"];
                                        };
                                        readonly network: {
                                            readonly type: "string";
                                            readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                            readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                            readonly examples: readonly ["MASTERCARD"];
                                        };
                                        readonly billing_address: {
                                            readonly type: "object";
                                            readonly description: "Customer address information.";
                                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                            readonly properties: {
                                                readonly city: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the city.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["New York"];
                                                };
                                                readonly country: {
                                                    readonly description: "ISO2 country code";
                                                    readonly type: "string";
                                                    readonly pattern: "^[A-Z]{2}$";
                                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                    readonly examples: readonly ["US"];
                                                };
                                                readonly line1: {
                                                    readonly type: "string";
                                                    readonly description: "The first line of the Customer's address.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["123 Main Street"];
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                    readonly description: "The second line of the Customer's address.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["Apt 4B"];
                                                };
                                                readonly postal_code: {
                                                    readonly type: "string";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["10001"];
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                    readonly description: "The state or region.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["New York"];
                                                };
                                            };
                                        };
                                        readonly cof: {
                                            readonly type: "object";
                                            readonly required: readonly ["enabled"];
                                            readonly properties: {
                                                readonly enabled: {
                                                    readonly type: "boolean";
                                                    readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                    readonly examples: readonly [true];
                                                };
                                                readonly agreement_id: {
                                                    readonly type: "string";
                                                    readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                    readonly examples: readonly ["Agreement00w02W1"];
                                                };
                                                readonly recurring_amount_variability: {
                                                    readonly type: "string";
                                                    readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                    readonly enum: readonly ["VARIABLE"];
                                                    readonly examples: readonly ["VARIABLE"];
                                                };
                                                readonly agreement_type: {
                                                    readonly type: "string";
                                                    readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                    readonly enum: readonly ["UNSCHEDULED"];
                                                    readonly examples: readonly ["UNSCHEDULED"];
                                                    readonly description: "`UNSCHEDULED`";
                                                };
                                                readonly trace_id: {
                                                    readonly type: "string";
                                                    readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                    readonly examples: readonly ["123456789"];
                                                };
                                            };
                                        };
                                        readonly card_holder_name: {
                                            readonly type: "string";
                                            readonly description: "Name on the card";
                                            readonly examples: readonly ["Alex James"];
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "ID of the payment method.";
                                    readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                };
                                readonly customer_id: {
                                    readonly description: "ID of the customer.";
                                    readonly type: "string";
                                    readonly examples: readonly ["cus_3XarBILKQS"];
                                };
                                readonly meta: {
                                    readonly type: "object";
                                    readonly additionalProperties: {
                                        readonly type: "string";
                                    };
                                };
                                readonly device_fingerprint: {
                                    readonly description: "The customer's device fingerprint.";
                                    readonly type: "string";
                                    readonly examples: readonly ["62wd23423rq324323qew1"];
                                };
                                readonly client_ip: {
                                    readonly description: "The customer's device IP.";
                                    readonly type: "string";
                                    readonly examples: readonly ["154.123.220.1"];
                                };
                                readonly created_datetime: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "The date and time when the virtual account was created.";
                                    readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly required: readonly ["id", "type"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payment method.";
                                    readonly default: "bank_account";
                                    readonly readOnly: true;
                                    readonly examples: readonly ["card"];
                                };
                                readonly bank_account: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "ID of the payment method.";
                                    readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                };
                                readonly customer_id: {
                                    readonly description: "ID of the customer.";
                                    readonly type: "string";
                                    readonly examples: readonly ["cus_3XarBILKQS"];
                                };
                                readonly meta: {
                                    readonly type: "object";
                                    readonly additionalProperties: {
                                        readonly type: "string";
                                    };
                                };
                                readonly device_fingerprint: {
                                    readonly description: "The customer's device fingerprint.";
                                    readonly type: "string";
                                    readonly examples: readonly ["62wd23423rq324323qew1"];
                                };
                                readonly client_ip: {
                                    readonly description: "The customer's device IP.";
                                    readonly type: "string";
                                    readonly examples: readonly ["154.123.220.1"];
                                };
                                readonly created_datetime: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "The date and time when the virtual account was created.";
                                    readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly required: readonly ["id", "mobile_money", "type"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payment method.";
                                    readonly default: "mobile_money";
                                    readonly readOnly: true;
                                    readonly examples: readonly ["card"];
                                };
                                readonly mobile_money: {
                                    readonly type: "object";
                                    readonly required: readonly ["network", "phone_number", "country_code"];
                                    readonly properties: {
                                        readonly network: {
                                            readonly type: "string";
                                            readonly description: "The mobile network of the customer's phone number.";
                                            readonly examples: readonly ["MTN"];
                                        };
                                        readonly country_code: {
                                            readonly type: "string";
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly examples: readonly ["233"];
                                        };
                                        readonly phone_number: {
                                            readonly type: "string";
                                            readonly description: "The phone number of customer.";
                                            readonly examples: readonly ["9012345678"];
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "ID of the payment method.";
                                    readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                };
                                readonly customer_id: {
                                    readonly description: "ID of the customer.";
                                    readonly type: "string";
                                    readonly examples: readonly ["cus_3XarBILKQS"];
                                };
                                readonly meta: {
                                    readonly type: "object";
                                    readonly additionalProperties: {
                                        readonly type: "string";
                                    };
                                };
                                readonly device_fingerprint: {
                                    readonly description: "The customer's device fingerprint.";
                                    readonly type: "string";
                                    readonly examples: readonly ["62wd23423rq324323qew1"];
                                };
                                readonly client_ip: {
                                    readonly description: "The customer's device IP.";
                                    readonly type: "string";
                                    readonly examples: readonly ["154.123.220.1"];
                                };
                                readonly created_datetime: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "The date and time when the virtual account was created.";
                                    readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly required: readonly ["id", "type"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payment method.";
                                    readonly default: "opay";
                                    readonly readOnly: true;
                                    readonly examples: readonly ["card"];
                                };
                                readonly opay: {
                                    readonly type: "object";
                                    readonly additionalProperties: true;
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "ID of the payment method.";
                                    readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                };
                                readonly customer_id: {
                                    readonly description: "ID of the customer.";
                                    readonly type: "string";
                                    readonly examples: readonly ["cus_3XarBILKQS"];
                                };
                                readonly meta: {
                                    readonly type: "object";
                                    readonly additionalProperties: {
                                        readonly type: "string";
                                    };
                                };
                                readonly device_fingerprint: {
                                    readonly description: "The customer's device fingerprint.";
                                    readonly type: "string";
                                    readonly examples: readonly ["62wd23423rq324323qew1"];
                                };
                                readonly client_ip: {
                                    readonly description: "The customer's device IP.";
                                    readonly type: "string";
                                    readonly examples: readonly ["154.123.220.1"];
                                };
                                readonly created_datetime: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "The date and time when the virtual account was created.";
                                    readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly required: readonly ["id", "type"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payment method.";
                                    readonly default: "applepay";
                                    readonly readOnly: true;
                                    readonly examples: readonly ["card"];
                                };
                                readonly applepay: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly card_holder_name: {
                                            readonly type: "string";
                                            readonly description: "The cardholder name.";
                                            readonly examples: readonly ["Yohan Blake"];
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "ID of the payment method.";
                                    readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                };
                                readonly customer_id: {
                                    readonly description: "ID of the customer.";
                                    readonly type: "string";
                                    readonly examples: readonly ["cus_3XarBILKQS"];
                                };
                                readonly meta: {
                                    readonly type: "object";
                                    readonly additionalProperties: {
                                        readonly type: "string";
                                    };
                                };
                                readonly device_fingerprint: {
                                    readonly description: "The customer's device fingerprint.";
                                    readonly type: "string";
                                    readonly examples: readonly ["62wd23423rq324323qew1"];
                                };
                                readonly client_ip: {
                                    readonly description: "The customer's device IP.";
                                    readonly type: "string";
                                    readonly examples: readonly ["154.123.220.1"];
                                };
                                readonly created_datetime: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "The date and time when the virtual account was created.";
                                    readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly required: readonly ["id", "type"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payment method.";
                                    readonly default: "googlepay";
                                    readonly readOnly: true;
                                    readonly examples: readonly ["card"];
                                };
                                readonly googlepay: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly card_holder_name: {
                                            readonly type: "string";
                                            readonly description: "The cardholder name.";
                                            readonly examples: readonly ["Yohan Blake"];
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "ID of the payment method.";
                                    readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                };
                                readonly customer_id: {
                                    readonly description: "ID of the customer.";
                                    readonly type: "string";
                                    readonly examples: readonly ["cus_3XarBILKQS"];
                                };
                                readonly meta: {
                                    readonly type: "object";
                                    readonly additionalProperties: {
                                        readonly type: "string";
                                    };
                                };
                                readonly device_fingerprint: {
                                    readonly description: "The customer's device fingerprint.";
                                    readonly type: "string";
                                    readonly examples: readonly ["62wd23423rq324323qew1"];
                                };
                                readonly client_ip: {
                                    readonly description: "The customer's device IP.";
                                    readonly type: "string";
                                    readonly examples: readonly ["154.123.220.1"];
                                };
                                readonly created_datetime: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "The date and time when the virtual account was created.";
                                    readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly required: readonly ["id", "type"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payment method.";
                                    readonly default: "ussd";
                                    readonly readOnly: true;
                                    readonly examples: readonly ["card"];
                                };
                                readonly ussd: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly account_bank: {
                                            readonly type: "string";
                                            readonly description: "The bank code of the USSD string to generate.";
                                            readonly examples: readonly ["050"];
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "ID of the payment method.";
                                    readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                };
                                readonly customer_id: {
                                    readonly description: "ID of the customer.";
                                    readonly type: "string";
                                    readonly examples: readonly ["cus_3XarBILKQS"];
                                };
                                readonly meta: {
                                    readonly type: "object";
                                    readonly additionalProperties: {
                                        readonly type: "string";
                                    };
                                };
                                readonly device_fingerprint: {
                                    readonly description: "The customer's device fingerprint.";
                                    readonly type: "string";
                                    readonly examples: readonly ["62wd23423rq324323qew1"];
                                };
                                readonly client_ip: {
                                    readonly description: "The customer's device IP.";
                                    readonly type: "string";
                                    readonly examples: readonly ["154.123.220.1"];
                                };
                                readonly created_datetime: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "The date and time when the virtual account was created.";
                                    readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                };
                            };
                        }, {
                            readonly type: "object";
                            readonly required: readonly ["bank_transfer", "id", "type"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payment method.";
                                    readonly default: "bank_transfer";
                                    readonly readOnly: true;
                                    readonly examples: readonly ["card"];
                                };
                                readonly bank_transfer: {
                                    readonly type: "object";
                                    readonly required: readonly ["account_type"];
                                    readonly properties: {
                                        readonly account_expires_in: {
                                            readonly type: "integer";
                                            readonly description: "The expiry time of the virtual account.";
                                            readonly maximum: 432000;
                                            readonly examples: readonly [360];
                                        };
                                        readonly account_display_name: {
                                            readonly type: "string";
                                            readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                            readonly minLength: 3;
                                            readonly maxLength: 256;
                                            readonly examples: readonly ["Alex James"];
                                        };
                                        readonly account_type: {
                                            readonly type: "string";
                                            readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                            readonly enum: readonly ["static", "dynamic"];
                                            readonly examples: readonly ["static"];
                                        };
                                        readonly originator_bank_name: {
                                            readonly type: "string";
                                            readonly description: "The sender's Bank name";
                                            readonly examples: readonly ["Mock Bank"];
                                        };
                                        readonly originator_account_number: {
                                            readonly type: "string";
                                            readonly description: "The Sender's masked account number";
                                            readonly examples: readonly ["002*******78"];
                                        };
                                        readonly originator_name: {
                                            readonly type: "string";
                                            readonly description: "The sender's name";
                                            readonly examples: readonly ["Jane Doe"];
                                        };
                                    };
                                };
                                readonly id: {
                                    readonly type: "string";
                                    readonly description: "ID of the payment method.";
                                    readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                };
                                readonly customer_id: {
                                    readonly description: "ID of the customer.";
                                    readonly type: "string";
                                    readonly examples: readonly ["cus_3XarBILKQS"];
                                };
                                readonly meta: {
                                    readonly type: "object";
                                    readonly additionalProperties: {
                                        readonly type: "string";
                                    };
                                };
                                readonly device_fingerprint: {
                                    readonly description: "The customer's device fingerprint.";
                                    readonly type: "string";
                                    readonly examples: readonly ["62wd23423rq324323qew1"];
                                };
                                readonly client_ip: {
                                    readonly description: "The customer's device IP.";
                                    readonly type: "string";
                                    readonly examples: readonly ["154.123.220.1"];
                                };
                                readonly created_datetime: {
                                    readonly type: "string";
                                    readonly format: "date-time";
                                    readonly description: "The date and time when the virtual account was created.";
                                    readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                };
                            };
                        }];
                        readonly discriminator: {
                            readonly propertyName: "type";
                            readonly mapping: {
                                readonly card: "#/components/schemas/card_payment_method";
                                readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                readonly opay: "#/components/schemas/opay_payment_method";
                                readonly applepay: "#/components/schemas/applepay_payment_method";
                                readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                readonly ussd: "#/components/schemas/ussd_payment_method";
                                readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const PaymentMethodsPost: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly required: readonly ["type", "card"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of the payment method.";
                    readonly default: "card";
                    readonly readOnly: true;
                    readonly examples: readonly ["card"];
                };
                readonly card: {
                    readonly type: "object";
                    readonly required: readonly ["encrypted_expiry_month", "encrypted_expiry_year", "encrypted_card_number", "nonce"];
                    readonly properties: {
                        readonly nonce: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9]+$";
                            readonly minLength: 12;
                            readonly maxLength: 12;
                            readonly description: "A single-use 12 character alphanumeric string for field-level encryption.";
                            readonly "x-pattern-message": "must be an alphanumeric string of length 12";
                        };
                        readonly encrypted_expiry_month: {
                            readonly type: "string";
                            readonly description: "Encrypted value of the card's expiry month.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["sQpvQEb7GrUCjPuEN/NmHiPl"];
                        };
                        readonly encrypted_expiry_year: {
                            readonly type: "string";
                            readonly description: "Encrypted value of the card's expiry year.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["sgHNEDkJ/RmwuWWq/RymToU5"];
                        };
                        readonly encrypted_card_number: {
                            readonly type: "string";
                            readonly description: "Encrypted value of the card number.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["sAE3hEDaDQ+yLzo4Py+Lx15OZjBGduHu/DcdILh3En0="];
                        };
                        readonly encrypted_cvv: {
                            readonly type: "string";
                            readonly description: "Encrypted value of the card's security code (CVV/CSC).";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["tAUzH7Qjma7diGdi7938F/ESNA=="];
                        };
                        readonly billing_address: {
                            readonly type: "object";
                            readonly description: "Customer address information.";
                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                            readonly properties: {
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "The name of the city.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                                readonly country: {
                                    readonly description: "ISO2 country code";
                                    readonly type: "string";
                                    readonly pattern: "^[A-Z]{2}$";
                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                    readonly examples: readonly ["US"];
                                };
                                readonly line1: {
                                    readonly type: "string";
                                    readonly description: "The first line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["123 Main Street"];
                                };
                                readonly line2: {
                                    readonly type: "string";
                                    readonly description: "The second line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["Apt 4B"];
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["10001"];
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "The state or region.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                            };
                        };
                        readonly cof: {
                            readonly type: "object";
                            readonly required: readonly ["enabled"];
                            readonly properties: {
                                readonly enabled: {
                                    readonly type: "boolean";
                                    readonly description: "Set to true to enable recurring card charge with Credential-on-File (COF).";
                                    readonly examples: readonly [true];
                                };
                                readonly agreement_id: {
                                    readonly type: "string";
                                    readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                    readonly examples: readonly ["Agreement00w02W1"];
                                };
                                readonly trace_id: {
                                    readonly type: "string";
                                    readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                    readonly examples: readonly ["123456789"];
                                };
                            };
                        };
                        readonly card_holder_name: {
                            readonly type: "string";
                            readonly description: "Name on the card";
                            readonly examples: readonly ["Alex James"];
                        };
                    };
                };
                readonly customer_id: {
                    readonly type: "string";
                    readonly description: "ID of the customer.";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["type"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of the payment method.";
                    readonly default: "bank_account";
                    readonly readOnly: true;
                    readonly examples: readonly ["card"];
                };
                readonly bank_account: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly customer_id: {
                    readonly type: "string";
                    readonly description: "ID of the customer.";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["type", "mobile_money"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of the payment method.";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                    readonly examples: readonly ["card"];
                };
                readonly mobile_money: {
                    readonly type: "object";
                    readonly required: readonly ["network", "phone_number", "country_code"];
                    readonly properties: {
                        readonly network: {
                            readonly type: "string";
                            readonly description: "The mobile network of the customer's phone number.";
                            readonly examples: readonly ["MTN"];
                        };
                        readonly country_code: {
                            readonly type: "string";
                            readonly pattern: "^[0-9]{1,3}$";
                            readonly description: "ISO 3166 alpha-3 country code.";
                            readonly "x-pattern-message": "must be a valid 3 digit country code";
                            readonly examples: readonly ["234"];
                        };
                        readonly phone_number: {
                            readonly type: "string";
                            readonly pattern: "^[0-9]{7,10}$";
                            readonly "x-pattern-message": "must be a valid 7 to 10 digit phone number";
                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                            readonly examples: readonly ["8001122334"];
                        };
                    };
                };
                readonly customer_id: {
                    readonly type: "string";
                    readonly description: "ID of the customer.";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["type"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of the payment method.";
                    readonly default: "opay";
                    readonly readOnly: true;
                    readonly examples: readonly ["card"];
                };
                readonly opay: {
                    readonly type: "object";
                    readonly additionalProperties: true;
                };
                readonly customer_id: {
                    readonly type: "string";
                    readonly description: "ID of the customer.";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["type"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of the payment method.";
                    readonly default: "applepay";
                    readonly readOnly: true;
                    readonly examples: readonly ["card"];
                };
                readonly applepay: {
                    readonly type: "object";
                    readonly properties: {
                        readonly card_holder_name: {
                            readonly type: "string";
                            readonly description: "The cardholder name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Yohan Blake"];
                        };
                    };
                };
                readonly customer_id: {
                    readonly type: "string";
                    readonly description: "ID of the customer.";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["type"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of the payment method.";
                    readonly default: "googlepay";
                    readonly readOnly: true;
                    readonly examples: readonly ["card"];
                };
                readonly googlepay: {
                    readonly type: "object";
                    readonly properties: {
                        readonly card_holder_name: {
                            readonly type: "string";
                            readonly description: "The cardholder name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Yohan Blake"];
                        };
                    };
                };
                readonly customer_id: {
                    readonly type: "string";
                    readonly description: "ID of the customer.";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["type", "ussd"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of the payment method.";
                    readonly default: "ussd";
                    readonly readOnly: true;
                    readonly examples: readonly ["card"];
                };
                readonly ussd: {
                    readonly type: "object";
                    readonly required: readonly ["account_bank"];
                    readonly properties: {
                        readonly account_bank: {
                            readonly type: "string";
                            readonly pattern: "^\\d{3,}$";
                            readonly description: "A valid Nigerian bank code consisting of 3 or more digits.";
                            readonly "x-pattern-message": "must be more than 3 digits long and contain only numbers.";
                            readonly examples: readonly ["050"];
                        };
                    };
                };
                readonly customer_id: {
                    readonly type: "string";
                    readonly description: "ID of the customer.";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["type", "bank_transfer"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly description: "The type of the payment method.";
                    readonly default: "bank_transfer";
                    readonly readOnly: true;
                    readonly examples: readonly ["card"];
                };
                readonly bank_transfer: {
                    readonly type: "object";
                    readonly required: readonly ["account_type"];
                    readonly properties: {
                        readonly account_expires_in: {
                            readonly type: "integer";
                            readonly description: "The expiry time of the virtual account.";
                            readonly maximum: 432000;
                        };
                        readonly account_type: {
                            readonly type: "string";
                            readonly description: "The type of virtual account.";
                            readonly enum: readonly ["static", "dynamic"];
                            readonly examples: readonly ["static"];
                        };
                        readonly bvn: {
                            readonly type: "string";
                            readonly description: "This is the customer's Bank Verification Number.";
                            readonly pattern: "^[1-9][0-9]{10}$";
                            readonly "x-pattern-message": "bvn must be exactly 11 characters long and a signed integer";
                            readonly examples: readonly ["12345678912"];
                        };
                        readonly nin: {
                            readonly type: "string";
                            readonly description: "This is the customer's National Identity Number.";
                            readonly pattern: "^[1-9][0-9]{10}$";
                            readonly "x-pattern-message": "nin must be exactly 11 characters long and a signed integer";
                            readonly examples: readonly ["12345678912"];
                        };
                    };
                };
                readonly customer_id: {
                    readonly type: "string";
                    readonly description: "ID of the customer.";
                    readonly examples: readonly ["cus_3XarBILKQS"];
                };
                readonly meta: {
                    readonly type: "object";
                    readonly additionalProperties: {
                        readonly type: "string";
                    };
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "type";
            readonly mapping: {
                readonly card: "#/components/schemas/card_payment_method_in";
                readonly bank_account: "#/components/schemas/bank_account_payment_method_in";
                readonly mobile_money: "#/components/schemas/mobile_money_payment_method_in";
                readonly opay: "#/components/schemas/opay_payment_method_in";
                readonly applepay: "#/components/schemas/applepay_payment_method_in";
                readonly googlepay: "#/components/schemas/googlepay_payment_method_in";
                readonly ussd: "#/components/schemas/ussd_payment_method_in";
                readonly bank_transfer: "#/components/schemas/pwbt_payment_method_in";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["card", "id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "card";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly card: {
                                readonly type: "object";
                                readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                readonly properties: {
                                    readonly expiry_month: {
                                        readonly type: "integer";
                                        readonly description: "Expiry month of the card.";
                                        readonly examples: readonly ["09"];
                                    };
                                    readonly expiry_year: {
                                        readonly type: "integer";
                                        readonly description: "Expiry year of the card.";
                                        readonly examples: readonly ["32"];
                                    };
                                    readonly first6: {
                                        readonly type: "string";
                                        readonly description: "Bank identification number (BIN) of the card.";
                                        readonly minLength: 6;
                                        readonly maxLength: 6;
                                        readonly examples: readonly ["123412"];
                                    };
                                    readonly last4: {
                                        readonly type: "string";
                                        readonly description: "The last four digits of the card number.";
                                        readonly minLength: 4;
                                        readonly maxLength: 4;
                                        readonly examples: readonly ["1234"];
                                    };
                                    readonly network: {
                                        readonly type: "string";
                                        readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                        readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                        readonly examples: readonly ["MASTERCARD"];
                                    };
                                    readonly billing_address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly cof: {
                                        readonly type: "object";
                                        readonly required: readonly ["enabled"];
                                        readonly properties: {
                                            readonly enabled: {
                                                readonly type: "boolean";
                                                readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                readonly examples: readonly [true];
                                            };
                                            readonly agreement_id: {
                                                readonly type: "string";
                                                readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                readonly examples: readonly ["Agreement00w02W1"];
                                            };
                                            readonly recurring_amount_variability: {
                                                readonly type: "string";
                                                readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                readonly enum: readonly ["VARIABLE"];
                                                readonly examples: readonly ["VARIABLE"];
                                            };
                                            readonly agreement_type: {
                                                readonly type: "string";
                                                readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                readonly enum: readonly ["UNSCHEDULED"];
                                                readonly examples: readonly ["UNSCHEDULED"];
                                                readonly description: "`UNSCHEDULED`";
                                            };
                                            readonly trace_id: {
                                                readonly type: "string";
                                                readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                readonly examples: readonly ["123456789"];
                                            };
                                        };
                                    };
                                    readonly card_holder_name: {
                                        readonly type: "string";
                                        readonly description: "Name on the card";
                                        readonly examples: readonly ["Alex James"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "bank_account";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly bank_account: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "mobile_money", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "mobile_money";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly mobile_money: {
                                readonly type: "object";
                                readonly required: readonly ["network", "phone_number", "country_code"];
                                readonly properties: {
                                    readonly network: {
                                        readonly type: "string";
                                        readonly description: "The mobile network of the customer's phone number.";
                                        readonly examples: readonly ["MTN"];
                                    };
                                    readonly country_code: {
                                        readonly type: "string";
                                        readonly description: "ISO 3166 alpha-3 country code.";
                                        readonly examples: readonly ["233"];
                                    };
                                    readonly phone_number: {
                                        readonly type: "string";
                                        readonly description: "The phone number of customer.";
                                        readonly examples: readonly ["9012345678"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "opay";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly opay: {
                                readonly type: "object";
                                readonly additionalProperties: true;
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "applepay";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly applepay: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly card_holder_name: {
                                        readonly type: "string";
                                        readonly description: "The cardholder name.";
                                        readonly examples: readonly ["Yohan Blake"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "googlepay";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly googlepay: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly card_holder_name: {
                                        readonly type: "string";
                                        readonly description: "The cardholder name.";
                                        readonly examples: readonly ["Yohan Blake"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "ussd";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly ussd: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly account_bank: {
                                        readonly type: "string";
                                        readonly description: "The bank code of the USSD string to generate.";
                                        readonly examples: readonly ["050"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["bank_transfer", "id", "type"];
                        readonly properties: {
                            readonly type: {
                                readonly type: "string";
                                readonly description: "The type of the payment method.";
                                readonly default: "bank_transfer";
                                readonly readOnly: true;
                                readonly examples: readonly ["card"];
                            };
                            readonly bank_transfer: {
                                readonly type: "object";
                                readonly required: readonly ["account_type"];
                                readonly properties: {
                                    readonly account_expires_in: {
                                        readonly type: "integer";
                                        readonly description: "The expiry time of the virtual account.";
                                        readonly maximum: 432000;
                                        readonly examples: readonly [360];
                                    };
                                    readonly account_display_name: {
                                        readonly type: "string";
                                        readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                        readonly minLength: 3;
                                        readonly maxLength: 256;
                                        readonly examples: readonly ["Alex James"];
                                    };
                                    readonly account_type: {
                                        readonly type: "string";
                                        readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                        readonly enum: readonly ["static", "dynamic"];
                                        readonly examples: readonly ["static"];
                                    };
                                    readonly originator_bank_name: {
                                        readonly type: "string";
                                        readonly description: "The sender's Bank name";
                                        readonly examples: readonly ["Mock Bank"];
                                    };
                                    readonly originator_account_number: {
                                        readonly type: "string";
                                        readonly description: "The Sender's masked account number";
                                        readonly examples: readonly ["002*******78"];
                                    };
                                    readonly originator_name: {
                                        readonly type: "string";
                                        readonly description: "The sender's name";
                                        readonly examples: readonly ["Jane Doe"];
                                    };
                                };
                            };
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the payment method.";
                                readonly examples: readonly ["pmd_WRq7L4TM8p"];
                            };
                            readonly customer_id: {
                                readonly description: "ID of the customer.";
                                readonly type: "string";
                                readonly examples: readonly ["cus_3XarBILKQS"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly device_fingerprint: {
                                readonly description: "The customer's device fingerprint.";
                                readonly type: "string";
                                readonly examples: readonly ["62wd23423rq324323qew1"];
                            };
                            readonly client_ip: {
                                readonly description: "The customer's device IP.";
                                readonly type: "string";
                                readonly examples: readonly ["154.123.220.1"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly card: "#/components/schemas/card_payment_method";
                            readonly bank_account: "#/components/schemas/bank_account_payment_method";
                            readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                            readonly opay: "#/components/schemas/opay_payment_method";
                            readonly applepay: "#/components/schemas/applepay_payment_method";
                            readonly googlepay: "#/components/schemas/googlepay_payment_method";
                            readonly ussd: "#/components/schemas/ussd_payment_method";
                            readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ProfileActionsPost: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly action_type: {
                readonly type: "string";
                readonly enum: readonly ["register"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "object";
                            readonly properties: {
                                readonly first: {
                                    readonly type: "string";
                                };
                                readonly last: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly credentials: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly client_id: {
                                    readonly type: "string";
                                };
                                readonly client_secret: {
                                    readonly type: "string";
                                };
                                readonly encryption_key: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ProfileCredentialsActionsPost: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly action_type: {
                readonly type: "string";
                readonly enum: readonly ["reset_encryption_key"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly client_id: {
                            readonly type: "string";
                        };
                        readonly client_secret: {
                            readonly type: "string";
                        };
                        readonly encryption_key: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ProfileCredentialsActionsPut: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["old_password", "new_password"];
        readonly properties: {
            readonly action_type: {
                readonly type: "string";
                readonly enum: readonly ["update_password"];
            };
            readonly old_password: {
                readonly type: "string";
            };
            readonly new_password: {
                readonly type: "string";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ProfileCredentialsGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                        readonly client_id: {
                            readonly type: "string";
                        };
                        readonly client_secret: {
                            readonly type: "string";
                        };
                        readonly encryption_key: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const ProfileGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly name: {
                            readonly type: "object";
                            readonly properties: {
                                readonly first: {
                                    readonly type: "string";
                                };
                                readonly last: {
                                    readonly type: "string";
                                };
                            };
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly credentials: {
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly type: "string";
                                };
                                readonly client_id: {
                                    readonly type: "string";
                                };
                                readonly client_secret: {
                                    readonly type: "string";
                                };
                                readonly encryption_key: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const RedirectSessionsChargesPut: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly authorization: {
                readonly oneOf: readonly [{
                    readonly type: "object";
                    readonly description: "OTP authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "otp";
                            readonly readOnly: true;
                        };
                        readonly otp: {
                            readonly type: "object";
                            readonly required: readonly ["code"];
                            readonly properties: {
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "^\\d{4,8}$";
                                    readonly description: "One-time password(OTP) sent by the Bank.";
                                    readonly "x-pattern-message": "must be a numeric value between 4 and 8 digits long.";
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "PIN authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "pin";
                            readonly readOnly: true;
                        };
                        readonly pin: {
                            readonly type: "object";
                            readonly description: "PIN authorization object.";
                            readonly required: readonly ["encrypted_pin", "nonce"];
                            readonly properties: {
                                readonly nonce: {
                                    readonly type: "string";
                                    readonly pattern: "^[a-zA-Z0-9]+$";
                                    readonly minLength: 12;
                                    readonly maxLength: 12;
                                    readonly description: "A single-use 12 character alphanumeric string for field-level encryption.";
                                    readonly "x-pattern-message": "must be an alphanumeric string of length 12";
                                };
                                readonly encrypted_pin: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "External 3DS authorization object.";
                    readonly required: readonly ["type", "external_3ds"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "external_3ds";
                            readonly readOnly: true;
                        };
                        readonly external_3ds: {
                            readonly type: "object";
                            readonly required: readonly ["eci", "authentication_token", "transaction_id", "version", "transaction_status", "status_reason_code", "amount", "time"];
                            readonly properties: {
                                readonly eci: {
                                    readonly type: "string";
                                    readonly description: "Electronic Commerce Indicator from the issuer's Access Control Server (ACS), showing the outcome of the payer's authentication attempt.";
                                    readonly examples: readonly ["03"];
                                };
                                readonly time: {
                                    readonly type: "string";
                                    readonly description: "The time of the payer's authentication in UTC.";
                                    readonly examples: readonly ["2024-04-11T08:08:43.974Z"];
                                };
                                readonly authentication_token: {
                                    readonly type: "string";
                                    readonly description: "Base64 encoded value generated by the card issuer.";
                                    readonly examples: readonly ["zPkn+YYYYYY53434HFHDss="];
                                };
                                readonly transaction_id: {
                                    readonly type: "string";
                                    readonly description: "The unique transaction identifier from the Access Control Server (ACS).";
                                    readonly examples: readonly ["1F3Uciah9cnh4mrnPPtyT_RA_test"];
                                };
                                readonly version: {
                                    readonly type: "string";
                                    readonly description: "EMV 3D Secure protocol.";
                                    readonly examples: readonly ["2.1.0"];
                                };
                                readonly transaction_status: {
                                    readonly type: "string";
                                    readonly description: "The status of the external authorization attempt.";
                                    readonly enum: readonly ["Y", "N", "U", "A", "R"];
                                    readonly examples: readonly ["Y"];
                                };
                                readonly status_reason_code: {
                                    readonly type: "string";
                                };
                                readonly amount: {
                                    readonly type: "number";
                                    readonly format: "decimal";
                                    readonly description: "The payment amount in decimals.";
                                    readonly minimum: 0.01;
                                    readonly examples: readonly [12.34];
                                };
                            };
                        };
                    };
                }, {
                    readonly type: "object";
                    readonly description: "AVS authorization object.";
                    readonly required: readonly ["type"];
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly default: "avs";
                            readonly readOnly: true;
                        };
                        readonly avs: {
                            readonly type: "object";
                            readonly required: readonly ["address"];
                            readonly properties: {
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "Customer address information.";
                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                    readonly properties: {
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "The name of the city.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly country: {
                                            readonly description: "ISO2 country code";
                                            readonly type: "string";
                                            readonly pattern: "^[A-Z]{2}$";
                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                            readonly examples: readonly ["US"];
                                        };
                                        readonly line1: {
                                            readonly type: "string";
                                            readonly description: "The first line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["123 Main Street"];
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                            readonly description: "The second line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["Apt 4B"];
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["10001"];
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or region.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                    };
                                };
                            };
                        };
                    };
                }];
                readonly discriminator: {
                    readonly propertyName: "type";
                    readonly mapping: {
                        readonly otp: "#/components/schemas/otp_authorization_in";
                        readonly pin: "#/components/schemas/encrypted_pin_authorization_in";
                        readonly external_3ds: "#/components/schemas/external_3ds_authorization_in";
                        readonly avs: "#/components/schemas/avs_authorization_in";
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
                readonly "X-Redirect-Session-Token": {
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the charge.";
                            readonly type: "string";
                            readonly examples: readonly ["chg_nONgeAGY97"];
                        };
                        readonly amount: {
                            readonly description: "The payment amount in decimals.";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly fees: {
                            readonly type: "array";
                            readonly description: "Fees charged on payment amount";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The specific type of fee. i.e., \"vat\", \"app\", \"merchant\", \"stamp_duty\".";
                                        readonly examples: readonly ["vat"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The fee amount in decimal format.";
                                        readonly examples: readonly [12.3];
                                    };
                                };
                            };
                        };
                        readonly billing_details: {
                            readonly type: "object";
                            readonly description: "The customer's billing information.";
                            readonly properties: {
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Customer's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Customer's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The customer's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly customer_id: {
                            readonly description: "ID of the customer.";
                            readonly type: "string";
                            readonly examples: readonly ["cus_3XarBILKQS"];
                        };
                        readonly description: {
                            readonly description: "The charge's description.";
                            readonly type: "string";
                        };
                        readonly disputed: {
                            readonly description: "Boolean indicating if the charge was disputed.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly settled: {
                            readonly description: "Boolean indicating if the transaction has been settled.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly settlement_id: {
                            readonly description: "Id for the settlement the transaction belongs to.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly next_action: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "redirect_url";
                                        readonly readOnly: true;
                                    };
                                    readonly redirect_url: {
                                        readonly type: "object";
                                        readonly required: readonly ["url"];
                                        readonly properties: {
                                            readonly url: {
                                                readonly type: "string";
                                                readonly description: "Payment screen URL to redirect customer to.";
                                                readonly examples: readonly ["https://developer-sandbox-ui-sit.flutterwave.cloud/redirects?opay&token=eyJhbGciOiJIUzI1NiJ9.eyJjbGllbnRJZCI6ImNiYThhMTkwLTE2OGUtNGNmZS05NmY5LTE2NDZhYjFhOWNkYiIsImNoYXJnZUlkIjoiY2hnX25PTmdlQUdZOTciLCJzdWIiOiJjYmE4YTE5MC0xNjhlLTRjZmUtOTZmOS0xNjQ2YWIxYTljZGIiLCJpYXQiOjE3MzgzMTc3MTAsImV4cCI6MTczODMxODAxMH0.QgLoZYfNhHJOJJvOsLA9eLoxOjGF0qnuehPMgMP4zD4"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "requires_additional_fields"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_additional_fields";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_additional_fields: {
                                        readonly type: "object";
                                        readonly required: readonly ["fields"];
                                        readonly properties: {
                                            readonly fields: {
                                                readonly type: "array";
                                                readonly items: {
                                                    readonly type: "string";
                                                };
                                                readonly maxItems: 50;
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_pin";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_pin: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_requery";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_requery: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_otp";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_otp: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "payment_instruction"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "payment_instruction";
                                        readonly readOnly: true;
                                    };
                                    readonly payment_instruction: {
                                        readonly type: "object";
                                        readonly required: readonly ["note"];
                                        readonly properties: {
                                            readonly note: {
                                                readonly type: "string";
                                                readonly description: "Custom field containing the payment instruction.";
                                                readonly examples: readonly ["Please dial *1414# to complete this transaction."];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_capture";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_capture: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["type", "redirect_url"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "requires_bank_transfer";
                                        readonly readOnly: true;
                                    };
                                    readonly requires_bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "account_type", "account_bank_name"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly type: "string";
                                                readonly description: "The account number designated for receiving payments.";
                                            };
                                            readonly account_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The Bank name.";
                                            };
                                            readonly account_expiration_datetime: {
                                                readonly type: "string";
                                                readonly description: "Specifies when the virtual account expires.";
                                                readonly format: "date-time";
                                            };
                                            readonly note: {
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly redirect_url: "#/components/schemas/redirect_url_next_action";
                                    readonly requires_additional_fields: "#/components/schemas/requires_additional_fields_next_action";
                                    readonly requires_pin: "#/components/schemas/requires_pin_next_action";
                                    readonly requires_requery: "#/components/schemas/requires_requery_next_action";
                                    readonly requires_otp: "#/components/schemas/requires_otp_next_action";
                                    readonly requires_capture: "#/components/schemas/requires_capture_next_action";
                                    readonly payment_instruction: "#/components/schemas/payment_instruction_next_action";
                                    readonly requires_bank_transfer: "#/components/schemas/requires_bank_transfer_next_action";
                                };
                            };
                        };
                        readonly payment_method_details: {
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["card", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "card";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly card: {
                                        readonly type: "object";
                                        readonly required: readonly ["expiry_month", "expiry_year", "first6", "last4", "network"];
                                        readonly properties: {
                                            readonly expiry_month: {
                                                readonly type: "integer";
                                                readonly description: "Expiry month of the card.";
                                                readonly examples: readonly ["09"];
                                            };
                                            readonly expiry_year: {
                                                readonly type: "integer";
                                                readonly description: "Expiry year of the card.";
                                                readonly examples: readonly ["32"];
                                            };
                                            readonly first6: {
                                                readonly type: "string";
                                                readonly description: "Bank identification number (BIN) of the card.";
                                                readonly minLength: 6;
                                                readonly maxLength: 6;
                                                readonly examples: readonly ["123412"];
                                            };
                                            readonly last4: {
                                                readonly type: "string";
                                                readonly description: "The last four digits of the card number.";
                                                readonly minLength: 4;
                                                readonly maxLength: 4;
                                                readonly examples: readonly ["1234"];
                                            };
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The card network.\n\n`MASTERCARD` `VISA` `AMERICAN EXPRESS` `DISCOVER` `VERVE` `AFRIGO` `UNKNOWN`";
                                                readonly enum: readonly ["MASTERCARD", "VISA", "AMERICAN EXPRESS", "DISCOVER", "VERVE", "AFRIGO", "UNKNOWN"];
                                                readonly examples: readonly ["MASTERCARD"];
                                            };
                                            readonly billing_address: {
                                                readonly type: "object";
                                                readonly description: "Customer address information.";
                                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                readonly properties: {
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the city.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                    readonly country: {
                                                        readonly description: "ISO2 country code";
                                                        readonly type: "string";
                                                        readonly pattern: "^[A-Z]{2}$";
                                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                        readonly examples: readonly ["US"];
                                                    };
                                                    readonly line1: {
                                                        readonly type: "string";
                                                        readonly description: "The first line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["123 Main Street"];
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                        readonly description: "The second line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["Apt 4B"];
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["10001"];
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "The state or region.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                };
                                            };
                                            readonly cof: {
                                                readonly type: "object";
                                                readonly required: readonly ["enabled"];
                                                readonly properties: {
                                                    readonly enabled: {
                                                        readonly type: "boolean";
                                                        readonly description: "Indicates whether the recurring card charge with Credential-on-File (COF) is enabled.";
                                                        readonly examples: readonly [true];
                                                    };
                                                    readonly agreement_id: {
                                                        readonly type: "string";
                                                        readonly description: "A unique reference generated by Flutterwave during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["Agreement00w02W1"];
                                                    };
                                                    readonly recurring_amount_variability: {
                                                        readonly type: "string";
                                                        readonly description: "This indicates whether the amount charged for subsequent payments remains the same, or differs.\n\n`VARIABLE`";
                                                        readonly enum: readonly ["VARIABLE"];
                                                        readonly examples: readonly ["VARIABLE"];
                                                    };
                                                    readonly agreement_type: {
                                                        readonly type: "string";
                                                        readonly definition: "This indicates the type of charge agreement with Flutterwave.";
                                                        readonly enum: readonly ["UNSCHEDULED"];
                                                        readonly examples: readonly ["UNSCHEDULED"];
                                                        readonly description: "`UNSCHEDULED`";
                                                    };
                                                    readonly trace_id: {
                                                        readonly type: "string";
                                                        readonly description: "A reference generated by the card scheme during the initial Customer Initiated Transaction (CIT).";
                                                        readonly examples: readonly ["123456789"];
                                                    };
                                                };
                                            };
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "Name on the card";
                                                readonly examples: readonly ["Alex James"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_account";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_account: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "mobile_money", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "phone_number", "country_code"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly type: "string";
                                                readonly description: "The mobile network of the customer's phone number.";
                                                readonly examples: readonly ["MTN"];
                                            };
                                            readonly country_code: {
                                                readonly type: "string";
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly examples: readonly ["233"];
                                            };
                                            readonly phone_number: {
                                                readonly type: "string";
                                                readonly description: "The phone number of customer.";
                                                readonly examples: readonly ["9012345678"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "opay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly opay: {
                                        readonly type: "object";
                                        readonly additionalProperties: true;
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "applepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly applepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "googlepay";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly googlepay: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly card_holder_name: {
                                                readonly type: "string";
                                                readonly description: "The cardholder name.";
                                                readonly examples: readonly ["Yohan Blake"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "ussd";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly ussd: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly account_bank: {
                                                readonly type: "string";
                                                readonly description: "The bank code of the USSD string to generate.";
                                                readonly examples: readonly ["050"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["bank_transfer", "id", "type"];
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of the payment method.";
                                        readonly default: "bank_transfer";
                                        readonly readOnly: true;
                                        readonly examples: readonly ["card"];
                                    };
                                    readonly bank_transfer: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_type"];
                                        readonly properties: {
                                            readonly account_expires_in: {
                                                readonly type: "integer";
                                                readonly description: "The expiry time of the virtual account.";
                                                readonly maximum: 432000;
                                                readonly examples: readonly [360];
                                            };
                                            readonly account_display_name: {
                                                readonly type: "string";
                                                readonly description: "The name that is shown to the customer when the account is resolved to a name.";
                                                readonly minLength: 3;
                                                readonly maxLength: 256;
                                                readonly examples: readonly ["Alex James"];
                                            };
                                            readonly account_type: {
                                                readonly type: "string";
                                                readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                                readonly enum: readonly ["static", "dynamic"];
                                                readonly examples: readonly ["static"];
                                            };
                                            readonly originator_bank_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's Bank name";
                                                readonly examples: readonly ["Mock Bank"];
                                            };
                                            readonly originator_account_number: {
                                                readonly type: "string";
                                                readonly description: "The Sender's masked account number";
                                                readonly examples: readonly ["002*******78"];
                                            };
                                            readonly originator_name: {
                                                readonly type: "string";
                                                readonly description: "The sender's name";
                                                readonly examples: readonly ["Jane Doe"];
                                            };
                                        };
                                    };
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "ID of the payment method.";
                                        readonly examples: readonly ["pmd_WRq7L4TM8p"];
                                    };
                                    readonly customer_id: {
                                        readonly description: "ID of the customer.";
                                        readonly type: "string";
                                        readonly examples: readonly ["cus_3XarBILKQS"];
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly device_fingerprint: {
                                        readonly description: "The customer's device fingerprint.";
                                        readonly type: "string";
                                        readonly examples: readonly ["62wd23423rq324323qew1"];
                                    };
                                    readonly client_ip: {
                                        readonly description: "The customer's device IP.";
                                        readonly type: "string";
                                        readonly examples: readonly ["154.123.220.1"];
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly format: "date-time";
                                        readonly description: "The date and time when the virtual account was created.";
                                        readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly card: "#/components/schemas/card_payment_method";
                                    readonly bank_account: "#/components/schemas/bank_account_payment_method";
                                    readonly mobile_money: "#/components/schemas/mobile_money_payment_method";
                                    readonly opay: "#/components/schemas/opay_payment_method";
                                    readonly applepay: "#/components/schemas/applepay_payment_method";
                                    readonly googlepay: "#/components/schemas/googlepay_payment_method";
                                    readonly ussd: "#/components/schemas/ussd_payment_method";
                                    readonly bank_transfer: "#/components/schemas/pwbt_payment_method";
                                };
                            };
                        };
                        readonly redirect_url: {
                            readonly type: "string";
                            readonly description: "Specifies the URL to redirect to.";
                            readonly examples: readonly ["https://www.google.com"];
                        };
                        readonly refunded: {
                            readonly description: "Boolean indicating if the transaction has been refunded.";
                            readonly type: "boolean";
                            readonly examples: readonly [false];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the charge.\n\n`succeeded` `pending` `failed` `voided`";
                            readonly enum: readonly ["succeeded", "pending", "failed", "voided"];
                            readonly examples: readonly ["succeeded"];
                        };
                        readonly processor_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly pattern: "\\d{2}";
                                    readonly "x-pattern-message": "must be two digits";
                                };
                            };
                            readonly enum: readonly [{
                                readonly type: "approved";
                                readonly code: "00";
                            }, {
                                readonly type: "refer_to_issuer";
                                readonly code: "01";
                            }, {
                                readonly type: "refer_to_issuer_special_condition";
                                readonly code: "02";
                            }, {
                                readonly type: "invalid_merchant";
                                readonly code: "03";
                            }, {
                                readonly type: "pick_up_card_no_fraud";
                                readonly code: "04";
                            }, {
                                readonly type: "do_not_honor";
                                readonly code: "05";
                            }, {
                                readonly type: "error";
                                readonly code: "06";
                            }, {
                                readonly type: "pick_up_card_fraud";
                                readonly code: "07";
                            }, {
                                readonly type: "partial_approval";
                                readonly code: "10";
                            }, {
                                readonly type: "invalid_transaction";
                                readonly code: "12";
                            }, {
                                readonly type: "invalid_amount";
                                readonly code: "13";
                            }, {
                                readonly type: "invalid_account_number";
                                readonly code: "14";
                            }, {
                                readonly type: "no_such_issuer";
                                readonly code: "15";
                            }, {
                                readonly type: "reenter_transaction";
                                readonly code: "19";
                            }, {
                                readonly type: "no_action_taken";
                                readonly code: "21";
                            }, {
                                readonly type: "unable_to_locate_record_in_file";
                                readonly code: "25";
                            }, {
                                readonly type: "file_temporarily_not_available";
                                readonly code: "28";
                            }, {
                                readonly type: "lost_card_pick_up";
                                readonly code: "41";
                            }, {
                                readonly type: "stolen_card_pick_up";
                                readonly code: "43";
                            }, {
                                readonly type: "insufficient_funds";
                                readonly code: "51";
                            }, {
                                readonly type: "no_checking_account";
                                readonly code: "52";
                            }, {
                                readonly type: "no_savings_account";
                                readonly code: "53";
                            }, {
                                readonly type: "expired_card";
                                readonly code: "54";
                            }, {
                                readonly type: "incorrect_pin";
                                readonly code: "55";
                            }, {
                                readonly type: "transaction_not_permitted_card";
                                readonly code: "57";
                            }, {
                                readonly type: "transaction_not_permitted_terminal";
                                readonly code: "58";
                            }, {
                                readonly type: "suspected_fraud";
                                readonly code: "59";
                            }, {
                                readonly type: "exceeds_approval_amount_limit";
                                readonly code: "61";
                            }, {
                                readonly type: "invalid_restricted_service_code";
                                readonly code: "62";
                            }, {
                                readonly type: "security_violation";
                                readonly code: "63";
                            }, {
                                readonly type: "transaction_does_not_fulfill_aml_req";
                                readonly code: "64";
                            }, {
                                readonly type: "exceeds_withdrawal_limit";
                                readonly code: "65";
                            }, {
                                readonly type: "pin_data_required";
                                readonly code: "70";
                            }, {
                                readonly type: "pin_entry_tries_exceeded";
                                readonly code: "75";
                            }, {
                                readonly type: "unsolicited_reversal";
                                readonly code: "76";
                            }, {
                                readonly type: "blocked_first_use";
                                readonly code: "78";
                            }, {
                                readonly type: "already_reversed";
                                readonly code: "79";
                            }, {
                                readonly type: "negative_cvv_result";
                                readonly code: "82";
                            }, {
                                readonly type: "no_reason_to_decline";
                                readonly code: "85";
                            }, {
                                readonly type: "cannot_verify_pin";
                                readonly code: "86";
                            }, {
                                readonly type: "issuer_unavailable";
                                readonly code: "91";
                            }, {
                                readonly type: "unable_to_route_transaction";
                                readonly code: "92";
                            }, {
                                readonly type: "cannot_complete_violation_of_law";
                                readonly code: "93";
                            }, {
                                readonly type: "system_error";
                                readonly code: "96";
                            }, {
                                readonly type: "invalid_cvv";
                                readonly code: "97";
                            }];
                            readonly description: "`[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]` `[object Object]`";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "Timestamp for when the transaction was created.";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const RefundsGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "ID of the refund";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly description: "A refund of a previously created charge";
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the refund";
                            readonly type: "string";
                        };
                        readonly amount_refunded: {
                            readonly description: "Amount of the refund";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly reason: {
                            readonly type: "string";
                            readonly enum: readonly ["duplicate", "fraudulent", "requested_by_customer", "expired_uncaptured_charge"];
                            readonly description: "Reason for the refund\n\n`duplicate` `fraudulent` `requested_by_customer` `expired_uncaptured_charge`";
                            readonly examples: readonly ["requested_by_customer"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["pending", "requires_action", "succeeded", "failed", "cancelled", "completed", "new"];
                            readonly description: "Status of the refund\n\n`pending` `requires_action` `succeeded` `failed` `cancelled` `completed` `new`";
                            readonly examples: readonly ["new"];
                        };
                        readonly charge_id: {
                            readonly type: "string";
                            readonly description: "ID of the charge tied to this refund";
                            readonly examples: readonly ["chg_VnUihmASmF"];
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const RefundsList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
                readonly from: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-04-21T10:55:16Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The start date and time for a period. This parameter is used in conjunction with the 'to' parameter to define a time range. The value should be in ISO 8601 format.";
                };
                readonly to: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-05-21T10:48:18Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The end date and time for a period. This parameter is used in conjunction with the 'from' parameter to define a time range. The value should be in **ISO 8601 format**.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 10;
                    readonly items: {
                        readonly description: "A refund of a previously created charge";
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the refund";
                                readonly type: "string";
                            };
                            readonly amount_refunded: {
                                readonly description: "Amount of the refund";
                                readonly type: "number";
                                readonly format: "decimal";
                                readonly minimum: 0.01;
                                readonly examples: readonly [12.34];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly reason: {
                                readonly type: "string";
                                readonly enum: readonly ["duplicate", "fraudulent", "requested_by_customer", "expired_uncaptured_charge"];
                                readonly description: "Reason for the refund\n\n`duplicate` `fraudulent` `requested_by_customer` `expired_uncaptured_charge`";
                                readonly examples: readonly ["requested_by_customer"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["pending", "requires_action", "succeeded", "failed", "cancelled", "completed", "new"];
                                readonly description: "Status of the refund\n\n`pending` `requires_action` `succeeded` `failed` `cancelled` `completed` `new`";
                                readonly examples: readonly ["new"];
                            };
                            readonly charge_id: {
                                readonly type: "string";
                                readonly description: "ID of the charge tied to this refund";
                                readonly examples: readonly ["chg_VnUihmASmF"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const RefundsPost: {
    readonly body: {
        readonly description: "A refund of a previously created charge";
        readonly required: readonly ["amount", "charge_id", "reason"];
        readonly type: "object";
        readonly properties: {
            readonly amount: {
                readonly description: "Amount of the refund";
                readonly type: "number";
                readonly format: "decimal";
                readonly minimum: 0.01;
                readonly examples: readonly [12.34];
            };
            readonly charge_id: {
                readonly description: "ID of the charge to refund";
                readonly type: "string";
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly reason: {
                readonly type: "string";
                readonly enum: readonly ["duplicate", "fraudulent", "requested_by_customer", "expired_uncaptured_charge"];
                readonly description: "Reason for the refund";
                readonly examples: readonly ["requested_by_customer"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly description: "A refund of a previously created charge";
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the refund";
                            readonly type: "string";
                        };
                        readonly amount_refunded: {
                            readonly description: "Amount of the refund";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly reason: {
                            readonly type: "string";
                            readonly enum: readonly ["duplicate", "fraudulent", "requested_by_customer", "expired_uncaptured_charge"];
                            readonly description: "Reason for the refund\n\n`duplicate` `fraudulent` `requested_by_customer` `expired_uncaptured_charge`";
                            readonly examples: readonly ["requested_by_customer"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["pending", "requires_action", "succeeded", "failed", "cancelled", "completed", "new"];
                            readonly description: "Status of the refund\n\n`pending` `requires_action` `succeeded` `failed` `cancelled` `completed` `new`";
                            readonly examples: readonly ["new"];
                        };
                        readonly charge_id: {
                            readonly type: "string";
                            readonly description: "ID of the charge tied to this refund";
                            readonly examples: readonly ["chg_VnUihmASmF"];
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const SettlementGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the settlement";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly description: "A settlement of a successful transaction";
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the settlement";
                            readonly type: "string";
                            readonly examples: readonly ["stm_JJo3vjtffW"];
                        };
                        readonly net_amount: {
                            readonly description: "Amount of the settlement";
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly gross_amount: {
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly description: "The payment amount in decimals.";
                            readonly minimum: 0.01;
                            readonly examples: readonly [12.34];
                        };
                        readonly currency: {
                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly description: {
                            readonly type: "string";
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the settlement.\n\n`disburse-pending` `pending` `reviewed` `approved` `completed` `completed-offline` `failed` `flagged` `processing` `on-hold`";
                            readonly enum: readonly ["disburse-pending", "pending", "reviewed", "approved", "completed", "completed-offline", "failed", "flagged", "processing", "on-hold"];
                            readonly examples: readonly ["completed"];
                        };
                        readonly due_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "The settlement due date.";
                            readonly examples: readonly ["2025-02-07T12:00:00.022Z"];
                        };
                        readonly transaction_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "The date the transaction was created.";
                            readonly examples: readonly ["2025-02-06T12:00:00.022Z"];
                        };
                        readonly settlement_account: {
                            readonly type: "string";
                            readonly description: "The bank account number to which the transaction was settled.";
                            readonly examples: readonly ["0690000031"];
                        };
                        readonly fees: {
                            readonly description: "Fees deducted before settlement";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of fee charged on the transaction.";
                                        readonly examples: readonly ["stamp_duty"];
                                    };
                                    readonly amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The amount of fee charged.";
                                        readonly examples: readonly [1.4];
                                    };
                                };
                            };
                        };
                        readonly chargeback: {
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly description: "The chargeback amount.";
                            readonly examples: readonly ["98.1"];
                        };
                        readonly refund: {
                            readonly type: "number";
                            readonly format: "decimal";
                            readonly description: "The refunded amount.";
                            readonly examples: readonly ["98.1"];
                        };
                        readonly destination: {
                            readonly type: "string";
                            readonly description: "The settlement destination.";
                            readonly examples: readonly ["wallet"];
                        };
                        readonly charge_count: {
                            readonly type: "string";
                            readonly description: "The number of charge transactions that make up the settlement.";
                            readonly examples: readonly ["2"];
                        };
                        readonly charges: {
                            readonly type: "array";
                            readonly maxItems: 10;
                            readonly description: "The list of charge transactions that make up the settlement.";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly type: "string";
                                        readonly description: "The ID of the charge.";
                                        readonly examples: readonly ["chg_zam88NgLb7"];
                                    };
                                    readonly charged_amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The amount charged.";
                                        readonly examples: readonly [100];
                                    };
                                    readonly customer_id: {
                                        readonly type: "string";
                                        readonly description: "The ID of the customer.";
                                        readonly examples: readonly ["cus_X0yJv3ZMpL"];
                                    };
                                    readonly settlement_amount: {
                                        readonly type: "number";
                                        readonly format: "decimal";
                                        readonly description: "The amount settled.";
                                        readonly examples: readonly [98.6];
                                    };
                                    readonly payment_method_id: {
                                        readonly type: "string";
                                        readonly description: "The ID of the payment method.";
                                        readonly examples: readonly ["pmd_wlVhaYmkl2"];
                                    };
                                    readonly currency: {
                                        readonly type: "string";
                                        readonly description: "ISO 4217 currency code.";
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly charge_date: {
                                        readonly type: "string";
                                        readonly description: "The date the charge was created.";
                                        readonly examples: readonly ["2024-06-26"];
                                    };
                                };
                            };
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The date and time when the virtual account was created.";
                            readonly examples: readonly ["2025-02-07T12:00:00.022Z"];
                        };
                    };
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const SettlementList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
                readonly to: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-05-21T10:48:18Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The end date and time for a period. This parameter is used in conjunction with the 'from' parameter to define a time range. The value should be in **ISO 8601 format**.";
                };
                readonly from: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-04-21T10:55:16Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The start date and time for a period. This parameter is used in conjunction with the 'to' parameter to define a time range. The value should be in ISO 8601 format.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 10;
                    readonly items: {
                        readonly description: "A settlement of a successful transaction";
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the settlement";
                                readonly type: "string";
                                readonly examples: readonly ["stm_JJo3vjtffW"];
                            };
                            readonly net_amount: {
                                readonly description: "Amount of the settlement";
                                readonly type: "number";
                                readonly format: "decimal";
                                readonly minimum: 0.01;
                                readonly examples: readonly [12.34];
                            };
                            readonly gross_amount: {
                                readonly type: "number";
                                readonly format: "decimal";
                                readonly description: "The payment amount in decimals.";
                                readonly minimum: 0.01;
                                readonly examples: readonly [12.34];
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly description: {
                                readonly type: "string";
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "The status of the settlement.\n\n`disburse-pending` `pending` `reviewed` `approved` `completed` `completed-offline` `failed` `flagged` `processing` `on-hold`";
                                readonly enum: readonly ["disburse-pending", "pending", "reviewed", "approved", "completed", "completed-offline", "failed", "flagged", "processing", "on-hold"];
                                readonly examples: readonly ["completed"];
                            };
                            readonly due_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The settlement due date.";
                                readonly examples: readonly ["2025-02-07T12:00:00.022Z"];
                            };
                            readonly transaction_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date the transaction was created.";
                                readonly examples: readonly ["2025-02-06T12:00:00.022Z"];
                            };
                            readonly settlement_account: {
                                readonly type: "string";
                                readonly description: "The bank account number to which the transaction was settled.";
                                readonly examples: readonly ["0690000031"];
                            };
                            readonly fees: {
                                readonly description: "Fees deducted before settlement";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly description: "The type of fee charged on the transaction.";
                                            readonly examples: readonly ["stamp_duty"];
                                        };
                                        readonly amount: {
                                            readonly type: "number";
                                            readonly format: "decimal";
                                            readonly description: "The amount of fee charged.";
                                            readonly examples: readonly [1.4];
                                        };
                                    };
                                };
                            };
                            readonly chargeback: {
                                readonly type: "number";
                                readonly format: "decimal";
                                readonly description: "The chargeback amount.";
                                readonly examples: readonly ["98.1"];
                            };
                            readonly refund: {
                                readonly type: "number";
                                readonly format: "decimal";
                                readonly description: "The refunded amount.";
                                readonly examples: readonly ["98.1"];
                            };
                            readonly destination: {
                                readonly type: "string";
                                readonly description: "The settlement destination.";
                                readonly examples: readonly ["wallet"];
                            };
                            readonly charge_count: {
                                readonly type: "string";
                                readonly description: "The number of charge transactions that make up the settlement.";
                                readonly examples: readonly ["2"];
                            };
                            readonly charges: {
                                readonly type: "array";
                                readonly maxItems: 10;
                                readonly description: "The list of charge transactions that make up the settlement.";
                                readonly items: {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly type: "string";
                                            readonly description: "The ID of the charge.";
                                            readonly examples: readonly ["chg_zam88NgLb7"];
                                        };
                                        readonly charged_amount: {
                                            readonly type: "number";
                                            readonly format: "decimal";
                                            readonly description: "The amount charged.";
                                            readonly examples: readonly [100];
                                        };
                                        readonly customer_id: {
                                            readonly type: "string";
                                            readonly description: "The ID of the customer.";
                                            readonly examples: readonly ["cus_X0yJv3ZMpL"];
                                        };
                                        readonly settlement_amount: {
                                            readonly type: "number";
                                            readonly format: "decimal";
                                            readonly description: "The amount settled.";
                                            readonly examples: readonly [98.6];
                                        };
                                        readonly payment_method_id: {
                                            readonly type: "string";
                                            readonly description: "The ID of the payment method.";
                                            readonly examples: readonly ["pmd_wlVhaYmkl2"];
                                        };
                                        readonly currency: {
                                            readonly type: "string";
                                            readonly description: "ISO 4217 currency code.";
                                            readonly examples: readonly ["NGN"];
                                        };
                                        readonly charge_date: {
                                            readonly type: "string";
                                            readonly description: "The date the charge was created.";
                                            readonly examples: readonly ["2024-06-26"];
                                        };
                                    };
                                };
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly description: "The date and time when the virtual account was created.";
                                readonly examples: readonly ["2025-02-07T12:00:00.022Z"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransferGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the transfer";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "The unique identifier for the transfer";
                            readonly type: "string";
                            readonly examples: readonly ["trf_yuK89vb"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of transfer, indicating the method used to transfer funds.\n\n`bank` `mobile_money` `wallet` `cash_pickup`";
                            readonly enum: readonly ["bank", "mobile_money", "wallet", "cash_pickup"];
                            readonly examples: readonly ["bank"];
                        };
                        readonly action: {
                            readonly description: "Whether to process the transfer instantly or at a later date.\n\n`instant` `deferred` `scheduled` `retry` `duplicate`";
                            readonly type: "string";
                            readonly enum: readonly ["instant", "deferred", "scheduled", "retry", "duplicate"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly description: "The status of the transfer.\n\n`NEW` `PENDING` `FAILED` `SUCCESSFUL` `CANCELLED` `INITIATED`";
                            readonly type: "string";
                            readonly enum: readonly ["NEW", "PENDING", "FAILED", "SUCCESSFUL", "CANCELLED", "INITIATED"];
                        };
                        readonly reversal: {
                            readonly type: "object";
                            readonly properties: {
                                readonly reversal_datetime: {
                                    readonly description: "The transfer reversal date.";
                                    readonly type: "string";
                                    readonly format: "date-time";
                                };
                                readonly initial_status: {
                                    readonly description: "The original status of the transfer before reversal.";
                                    readonly type: "string";
                                    readonly examples: readonly ["SUCCESSFUL"];
                                };
                                readonly reconciliation_status: {
                                    readonly description: "The final status.";
                                    readonly type: "string";
                                    readonly examples: readonly ["REVERSED"];
                                };
                                readonly reconciliation_type: {
                                    readonly description: "Specifies either debit or credit.\n\n`D` `C`";
                                    readonly type: "string";
                                    readonly enum: readonly ["D", "C"];
                                };
                            };
                        };
                        readonly narration: {
                            readonly type: "string";
                            readonly description: "A brief description or message accompanying the transfer, provided by the sender to describe the purpose of the transfer.";
                            readonly examples: readonly ["Salary payment for January"];
                        };
                        readonly source_currency: {
                            readonly description: "The currency in which the transfer was debited.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly destination_currency: {
                            readonly description: "The currency in which the amount will be credited to the recipient.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["EUR"];
                        };
                        readonly amount: {
                            readonly type: "object";
                            readonly required: readonly ["value", "applies_to"];
                            readonly properties: {
                                readonly value: {
                                    readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                    readonly type: "number";
                                    readonly format: "decimal";
                                    readonly minimum: 1;
                                    readonly examples: readonly [3000.44];
                                };
                                readonly applies_to: {
                                    readonly type: "string";
                                    readonly enum: readonly ["destination_currency", "source_currency"];
                                    readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)\n\n`destination_currency` `source_currency`";
                                };
                            };
                        };
                        readonly fee: {
                            readonly type: "object";
                            readonly properties: {
                                readonly currency: {
                                    readonly description: "The currency in which the fee is charged.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly description: "The amount charged as a fee for the transfer.";
                                    readonly format: "double";
                                    readonly minimum: 0;
                                    readonly examples: readonly [10.35];
                                    readonly maximum: 1.7976931348623157e+308;
                                };
                            };
                        };
                        readonly debit_information: {
                            readonly type: "object";
                            readonly properties: {
                                readonly currency: {
                                    readonly description: "The currency in which the fees and charges are applied for the transfer.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                                readonly actual_debit_amount: {
                                    readonly type: "number";
                                    readonly description: "The exact amount deducted for the transfer, including applicable fees.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                                readonly rate_used: {
                                    readonly type: "number";
                                    readonly description: "The exchange rate applied to calculate the transfer amount.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                                readonly vat: {
                                    readonly type: "number";
                                    readonly description: "The Value-Added Tax (VAT) amount charged for the transfer.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                            };
                        };
                        readonly payment_information: {
                            readonly type: "object";
                            readonly properties: {
                                readonly proof: {
                                    readonly type: "string";
                                    readonly description: "Session ID";
                                    readonly examples: readonly ["11000224070317345400001414441712312381"];
                                };
                            };
                        };
                        readonly retry: {
                            readonly description: "Contains the information of the initial transfer that was retried.";
                            readonly type: "object";
                            readonly properties: {
                                readonly parent_id: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the original transfer that is being retried.";
                                    readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                };
                                readonly parent_reference: {
                                    readonly type: "string";
                                    readonly description: "The external reference of the original transfer that is being retried.";
                                    readonly examples: readonly ["flw_z882wFGMjc"];
                                };
                            };
                        };
                        readonly duplicate: {
                            readonly description: "Contains the information of the initial transfer that was duplicated.";
                            readonly type: "object";
                            readonly properties: {
                                readonly parent_id: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the original transfer that is being retried.";
                                    readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                };
                                readonly parent_reference: {
                                    readonly type: "string";
                                    readonly description: "The external reference of the original transfer that is being retried.";
                                    readonly examples: readonly ["flw_z882wFGMjc"];
                                };
                            };
                        };
                        readonly disburse_option: {
                            readonly type: "object";
                            readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                            readonly properties: {
                                readonly date_time: {
                                    readonly type: "string";
                                    readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                                };
                                readonly timezone: {
                                    readonly type: "string";
                                    readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                                    readonly description: "`Africa/Cairo` `Africa/Accra` `Africa/Nairobi` `Africa/Lagos` `Africa/Freetown` `Africa/Dar_es_Salaam` `Africa/Kampala` `Africa/Douala` `Africa/Ndjamena` `Africa/Kinshasa` `Africa/Lubumbashi` `Africa/Libreville` `Africa/Porto-Novo` `Africa/Abidjan` `Africa/Dakar` `Africa/Johannesburg` `America/New_York` `America/Los_Angeles` `America/Sao_Paulo` `Asia/Dubai` `Asia/Kolkata` `Asia/Tokyo` `Australia/Sydney` `Europe/London` `Europe/Berlin` `Europe/Moscow` `Pacific/Auckland` `Pacific/Honolulu` `UTC`";
                                };
                            };
                        };
                        readonly callback_url: {
                            readonly type: "string";
                            readonly description: "A URL where callbacks or notifications will be sent.";
                            readonly examples: readonly ["https://example.com/flw/callback"];
                        };
                        readonly provider_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly description: "Represents payout error codes. The `type` and `code` fields are separate enums where:\n- `type` indicates the nature of the error.\n- `code` provides the specific error code associated with the error type.\n- `message` explains the meaning of the `type-code` pair\n";
                            readonly properties: {
                                readonly message: {
                                    readonly type: "string";
                                    readonly description: "The processor message for the transfer.";
                                    readonly examples: readonly ["DISBURSE FAILED: Insufficient wallet balance"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payout error, representing the specific error scenario.\n\n\n`transfer_amount_exceeds_limit` `transfer_amount_below_limit` `monthly_transfer_limit_exceeded` `daily_transfer_limit_exceeded` `transfer_limit_not_set_for_currency` `payout_creation_failed` `insufficient_balance` `service_unavailable` `transfer_failed` `pricing_not_set` `currency_conversion_not_set` `rejected_recipient_merchant` `invalid_bank_code` `unable_to_determine_country` `invalid_wallet_currency`";
                                    readonly enum: readonly ["transfer_amount_exceeds_limit", "transfer_amount_below_limit", "monthly_transfer_limit_exceeded", "daily_transfer_limit_exceeded", "transfer_limit_not_set_for_currency", "payout_creation_failed", "insufficient_balance", "service_unavailable", "transfer_failed", "pricing_not_set", "currency_conversion_not_set", "rejected_recipient_merchant", "invalid_bank_code", "unable_to_determine_country", "invalid_wallet_currency"];
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly description: "The unique code associated with the error type. This code follows a pattern of four digits.\n";
                                    readonly pattern: "\\d{4}";
                                };
                            };
                        };
                        readonly recipient: {
                            readonly description: "The recipient details.";
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["bank"];
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "code"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "The Recipient's account number.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly account_type: {
                                                readonly description: "The Recipient's account type.\n\n`checking` `savings` `individual` `corporate`";
                                                readonly type: "string";
                                                readonly enum: readonly ["checking", "savings", "individual", "corporate"];
                                            };
                                            readonly code: {
                                                readonly description: "The Recipient's bank code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly branch: {
                                                readonly description: "The Recipient's bank branch.";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly description: "The Recipient's bank name.";
                                                readonly type: "string";
                                            };
                                            readonly routing_number: {
                                                readonly description: "The Recipient bank routing number.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly swift_code: {
                                                readonly description: "The Recipient bank swift code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly sort_code: {
                                                readonly description: "The Recipient bank sort code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["name"];
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["cornelius@gmail.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "country", "msisdn"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "recipient network";
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly description: "recipient country";
                                                readonly type: "string";
                                            };
                                            readonly msisdn: {
                                                readonly description: "recipient phone number";
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "wallet";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly readOnly: true;
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly wallet: {
                                        readonly type: "object";
                                        readonly required: readonly ["provider", "identifier"];
                                        readonly properties: {
                                            readonly provider: {
                                                readonly type: "string";
                                                readonly enum: readonly ["flutterwave"];
                                                readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported\n\n`flutterwave`";
                                            };
                                            readonly identifier: {
                                                readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                                                readonly type: "string";
                                                readonly examples: readonly ["00118468"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "cash_pickup";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly cash_pickup: {
                                        readonly type: "object";
                                        readonly required: readonly ["network"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "cashpickup network";
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly bank: "#/components/schemas/bank_recipient";
                                    readonly mobile_money: "#/components/schemas/mobile_money_recipient";
                                    readonly wallet: "#/components/schemas/wallet_recipient";
                                    readonly cash_pickup: "#/components/schemas/cashpickup_recipient";
                                };
                            };
                        };
                        readonly sender: {
                            readonly description: "The sender details.";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly description: "ID of the transfer sender";
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Sender's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly national_identification: {
                                    readonly description: "The Sender's government identification.";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                            readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                        };
                                        readonly identifier: {
                                            readonly type: "string";
                                            readonly minLength: 4;
                                            readonly maxLength: 40;
                                            readonly examples: readonly ["FLY5869798686"];
                                        };
                                        readonly expiration_date: {
                                            readonly type: "string";
                                            readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                            readonly examples: readonly ["2029-07-08"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The Sender's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                                readonly date_of_birth: {
                                    readonly description: "The Sender's date of birth.";
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Sender's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "The Sender's residential address.";
                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                    readonly properties: {
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "The name of the city.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly country: {
                                            readonly description: "ISO2 country code";
                                            readonly type: "string";
                                            readonly pattern: "^[A-Z]{2}$";
                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                            readonly examples: readonly ["US"];
                                        };
                                        readonly line1: {
                                            readonly type: "string";
                                            readonly description: "The first line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["123 Main Street"];
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                            readonly description: "The second line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["Apt 4B"];
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["10001"];
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or region.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The date and time when the transfer was submitted for processing.";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransferPostRetry: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly action: {
                readonly type: "string";
                readonly description: "The action to be performed on the transfer. It can be `retry` or `duplicate`.";
                readonly enum: readonly ["retry", "duplicate"];
            };
            readonly reference: {
                readonly type: "string";
                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                readonly minLength: 6;
                readonly maxLength: 42;
                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                readonly "x-pattern-message": "must be an alphanumeric string";
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly callback_url: {
                readonly type: "string";
                readonly description: "The URL where the transfer status updates will be sent.";
                readonly examples: readonly ["https://neue.trf.io"];
            };
        };
        readonly required: readonly ["action"];
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the initial transfer";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "The unique identifier for the transfer";
                            readonly type: "string";
                            readonly examples: readonly ["trf_yuK89vb"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of transfer, indicating the method used to transfer funds.\n\n`bank` `mobile_money` `wallet` `cash_pickup`";
                            readonly enum: readonly ["bank", "mobile_money", "wallet", "cash_pickup"];
                            readonly examples: readonly ["bank"];
                        };
                        readonly action: {
                            readonly description: "Whether to process the transfer instantly or at a later date.\n\n`instant` `deferred` `scheduled` `retry` `duplicate`";
                            readonly type: "string";
                            readonly enum: readonly ["instant", "deferred", "scheduled", "retry", "duplicate"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly description: "The status of the transfer.\n\n`NEW` `PENDING` `FAILED` `SUCCESSFUL` `CANCELLED` `INITIATED`";
                            readonly type: "string";
                            readonly enum: readonly ["NEW", "PENDING", "FAILED", "SUCCESSFUL", "CANCELLED", "INITIATED"];
                        };
                        readonly reversal: {
                            readonly type: "object";
                            readonly properties: {
                                readonly reversal_datetime: {
                                    readonly description: "The transfer reversal date.";
                                    readonly type: "string";
                                    readonly format: "date-time";
                                };
                                readonly initial_status: {
                                    readonly description: "The original status of the transfer before reversal.";
                                    readonly type: "string";
                                    readonly examples: readonly ["SUCCESSFUL"];
                                };
                                readonly reconciliation_status: {
                                    readonly description: "The final status.";
                                    readonly type: "string";
                                    readonly examples: readonly ["REVERSED"];
                                };
                                readonly reconciliation_type: {
                                    readonly description: "Specifies either debit or credit.\n\n`D` `C`";
                                    readonly type: "string";
                                    readonly enum: readonly ["D", "C"];
                                };
                            };
                        };
                        readonly narration: {
                            readonly type: "string";
                            readonly description: "A brief description or message accompanying the transfer, provided by the sender to describe the purpose of the transfer.";
                            readonly examples: readonly ["Salary payment for January"];
                        };
                        readonly source_currency: {
                            readonly description: "The currency in which the transfer was debited.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly destination_currency: {
                            readonly description: "The currency in which the amount will be credited to the recipient.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["EUR"];
                        };
                        readonly amount: {
                            readonly type: "object";
                            readonly required: readonly ["value", "applies_to"];
                            readonly properties: {
                                readonly value: {
                                    readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                    readonly type: "number";
                                    readonly format: "decimal";
                                    readonly minimum: 1;
                                    readonly examples: readonly [3000.44];
                                };
                                readonly applies_to: {
                                    readonly type: "string";
                                    readonly enum: readonly ["destination_currency", "source_currency"];
                                    readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)\n\n`destination_currency` `source_currency`";
                                };
                            };
                        };
                        readonly fee: {
                            readonly type: "object";
                            readonly properties: {
                                readonly currency: {
                                    readonly description: "The currency in which the fee is charged.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly description: "The amount charged as a fee for the transfer.";
                                    readonly format: "double";
                                    readonly minimum: 0;
                                    readonly examples: readonly [10.35];
                                    readonly maximum: 1.7976931348623157e+308;
                                };
                            };
                        };
                        readonly debit_information: {
                            readonly type: "object";
                            readonly properties: {
                                readonly currency: {
                                    readonly description: "The currency in which the fees and charges are applied for the transfer.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                                readonly actual_debit_amount: {
                                    readonly type: "number";
                                    readonly description: "The exact amount deducted for the transfer, including applicable fees.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                                readonly rate_used: {
                                    readonly type: "number";
                                    readonly description: "The exchange rate applied to calculate the transfer amount.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                                readonly vat: {
                                    readonly type: "number";
                                    readonly description: "The Value-Added Tax (VAT) amount charged for the transfer.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                            };
                        };
                        readonly payment_information: {
                            readonly type: "object";
                            readonly properties: {
                                readonly proof: {
                                    readonly type: "string";
                                    readonly description: "Session ID";
                                    readonly examples: readonly ["11000224070317345400001414441712312381"];
                                };
                            };
                        };
                        readonly retry: {
                            readonly description: "Contains the information of the initial transfer that was retried.";
                            readonly type: "object";
                            readonly properties: {
                                readonly parent_id: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the original transfer that is being retried.";
                                    readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                };
                                readonly parent_reference: {
                                    readonly type: "string";
                                    readonly description: "The external reference of the original transfer that is being retried.";
                                    readonly examples: readonly ["flw_z882wFGMjc"];
                                };
                            };
                        };
                        readonly duplicate: {
                            readonly description: "Contains the information of the initial transfer that was duplicated.";
                            readonly type: "object";
                            readonly properties: {
                                readonly parent_id: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the original transfer that is being retried.";
                                    readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                };
                                readonly parent_reference: {
                                    readonly type: "string";
                                    readonly description: "The external reference of the original transfer that is being retried.";
                                    readonly examples: readonly ["flw_z882wFGMjc"];
                                };
                            };
                        };
                        readonly disburse_option: {
                            readonly type: "object";
                            readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                            readonly properties: {
                                readonly date_time: {
                                    readonly type: "string";
                                    readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                                };
                                readonly timezone: {
                                    readonly type: "string";
                                    readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                                    readonly description: "`Africa/Cairo` `Africa/Accra` `Africa/Nairobi` `Africa/Lagos` `Africa/Freetown` `Africa/Dar_es_Salaam` `Africa/Kampala` `Africa/Douala` `Africa/Ndjamena` `Africa/Kinshasa` `Africa/Lubumbashi` `Africa/Libreville` `Africa/Porto-Novo` `Africa/Abidjan` `Africa/Dakar` `Africa/Johannesburg` `America/New_York` `America/Los_Angeles` `America/Sao_Paulo` `Asia/Dubai` `Asia/Kolkata` `Asia/Tokyo` `Australia/Sydney` `Europe/London` `Europe/Berlin` `Europe/Moscow` `Pacific/Auckland` `Pacific/Honolulu` `UTC`";
                                };
                            };
                        };
                        readonly callback_url: {
                            readonly type: "string";
                            readonly description: "A URL where callbacks or notifications will be sent.";
                            readonly examples: readonly ["https://example.com/flw/callback"];
                        };
                        readonly provider_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly description: "Represents payout error codes. The `type` and `code` fields are separate enums where:\n- `type` indicates the nature of the error.\n- `code` provides the specific error code associated with the error type.\n- `message` explains the meaning of the `type-code` pair\n";
                            readonly properties: {
                                readonly message: {
                                    readonly type: "string";
                                    readonly description: "The processor message for the transfer.";
                                    readonly examples: readonly ["DISBURSE FAILED: Insufficient wallet balance"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payout error, representing the specific error scenario.\n\n\n`transfer_amount_exceeds_limit` `transfer_amount_below_limit` `monthly_transfer_limit_exceeded` `daily_transfer_limit_exceeded` `transfer_limit_not_set_for_currency` `payout_creation_failed` `insufficient_balance` `service_unavailable` `transfer_failed` `pricing_not_set` `currency_conversion_not_set` `rejected_recipient_merchant` `invalid_bank_code` `unable_to_determine_country` `invalid_wallet_currency`";
                                    readonly enum: readonly ["transfer_amount_exceeds_limit", "transfer_amount_below_limit", "monthly_transfer_limit_exceeded", "daily_transfer_limit_exceeded", "transfer_limit_not_set_for_currency", "payout_creation_failed", "insufficient_balance", "service_unavailable", "transfer_failed", "pricing_not_set", "currency_conversion_not_set", "rejected_recipient_merchant", "invalid_bank_code", "unable_to_determine_country", "invalid_wallet_currency"];
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly description: "The unique code associated with the error type. This code follows a pattern of four digits.\n";
                                    readonly pattern: "\\d{4}";
                                };
                            };
                        };
                        readonly recipient: {
                            readonly description: "The recipient details.";
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["bank"];
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "code"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "The Recipient's account number.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly account_type: {
                                                readonly description: "The Recipient's account type.\n\n`checking` `savings` `individual` `corporate`";
                                                readonly type: "string";
                                                readonly enum: readonly ["checking", "savings", "individual", "corporate"];
                                            };
                                            readonly code: {
                                                readonly description: "The Recipient's bank code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly branch: {
                                                readonly description: "The Recipient's bank branch.";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly description: "The Recipient's bank name.";
                                                readonly type: "string";
                                            };
                                            readonly routing_number: {
                                                readonly description: "The Recipient bank routing number.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly swift_code: {
                                                readonly description: "The Recipient bank swift code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly sort_code: {
                                                readonly description: "The Recipient bank sort code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["name"];
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["cornelius@gmail.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "country", "msisdn"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "recipient network";
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly description: "recipient country";
                                                readonly type: "string";
                                            };
                                            readonly msisdn: {
                                                readonly description: "recipient phone number";
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "wallet";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly readOnly: true;
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly wallet: {
                                        readonly type: "object";
                                        readonly required: readonly ["provider", "identifier"];
                                        readonly properties: {
                                            readonly provider: {
                                                readonly type: "string";
                                                readonly enum: readonly ["flutterwave"];
                                                readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported\n\n`flutterwave`";
                                            };
                                            readonly identifier: {
                                                readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                                                readonly type: "string";
                                                readonly examples: readonly ["00118468"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "cash_pickup";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly cash_pickup: {
                                        readonly type: "object";
                                        readonly required: readonly ["network"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "cashpickup network";
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly bank: "#/components/schemas/bank_recipient";
                                    readonly mobile_money: "#/components/schemas/mobile_money_recipient";
                                    readonly wallet: "#/components/schemas/wallet_recipient";
                                    readonly cash_pickup: "#/components/schemas/cashpickup_recipient";
                                };
                            };
                        };
                        readonly sender: {
                            readonly description: "The sender details.";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly description: "ID of the transfer sender";
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Sender's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly national_identification: {
                                    readonly description: "The Sender's government identification.";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                            readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                        };
                                        readonly identifier: {
                                            readonly type: "string";
                                            readonly minLength: 4;
                                            readonly maxLength: 40;
                                            readonly examples: readonly ["FLY5869798686"];
                                        };
                                        readonly expiration_date: {
                                            readonly type: "string";
                                            readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                            readonly examples: readonly ["2029-07-08"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The Sender's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                                readonly date_of_birth: {
                                    readonly description: "The Sender's date of birth.";
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Sender's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "The Sender's residential address.";
                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                    readonly properties: {
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "The name of the city.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly country: {
                                            readonly description: "ISO2 country code";
                                            readonly type: "string";
                                            readonly pattern: "^[A-Z]{2}$";
                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                            readonly examples: readonly ["US"];
                                        };
                                        readonly line1: {
                                            readonly type: "string";
                                            readonly description: "The first line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["123 Main Street"];
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                            readonly description: "The second line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["Apt 4B"];
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["10001"];
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or region.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The date and time when the transfer was submitted for processing.";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransferPut: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly initiate: {
                readonly type: "boolean";
                readonly description: "Used to initiate a deferred or scheduled transfer";
                readonly examples: readonly ["true"];
            };
            readonly close: {
                readonly type: "boolean";
                readonly description: "Used to close a deferred or scheduled transfer.";
                readonly examples: readonly ["false"];
            };
            readonly disburse_option: {
                readonly type: "object";
                readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                readonly properties: {
                    readonly date_time: {
                        readonly type: "string";
                        readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                    };
                    readonly timezone: {
                        readonly type: "string";
                        readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the transfer";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "The unique identifier for the transfer.";
                            readonly type: "string";
                            readonly examples: readonly ["trf_yuK89vb"];
                        };
                        readonly action: {
                            readonly description: "Specifies if the transfer is processed immediately or later.\n\n`instant` `deferred` `scheduled` `retry` `duplicate` `closed`";
                            readonly type: "string";
                            readonly enum: readonly ["instant", "deferred", "scheduled", "retry", "duplicate", "closed"];
                            readonly examples: readonly ["instant"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The current status of the transfer. `NEW` indicates the transfer is being processed, while `CANCELLED` indicates the transfer has been cancelled.\n\n`NEW` `PENDING` `INITIATED` `CANCELLED`";
                            readonly enum: readonly ["NEW", "PENDING", "INITIATED", "CANCELLED"];
                            readonly examples: readonly ["CANCELLED"];
                        };
                        readonly disburse_option: {
                            readonly type: "object";
                            readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                            readonly properties: {
                                readonly date_time: {
                                    readonly type: "string";
                                    readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                                };
                                readonly timezone: {
                                    readonly type: "string";
                                    readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                                    readonly description: "`Africa/Cairo` `Africa/Accra` `Africa/Nairobi` `Africa/Lagos` `Africa/Freetown` `Africa/Dar_es_Salaam` `Africa/Kampala` `Africa/Douala` `Africa/Ndjamena` `Africa/Kinshasa` `Africa/Lubumbashi` `Africa/Libreville` `Africa/Porto-Novo` `Africa/Abidjan` `Africa/Dakar` `Africa/Johannesburg` `America/New_York` `America/Los_Angeles` `America/Sao_Paulo` `Asia/Dubai` `Asia/Kolkata` `Asia/Tokyo` `Australia/Sydney` `Europe/London` `Europe/Berlin` `Europe/Moscow` `Pacific/Auckland` `Pacific/Honolulu` `UTC`";
                                };
                            };
                        };
                        readonly updated_datetime: {
                            readonly type: "string";
                            readonly description: "The date and time when the transfer was submitted for processing.";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransferRatesGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the rate conversion";
                    readonly type: "string";
                    readonly examples: readonly ["rte_r0cInAnTE"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "The unique identifier for the rate conversion.";
                            readonly type: "string";
                            readonly examples: readonly ["rte_r2B1d3"];
                        };
                        readonly rate: {
                            readonly type: "string";
                            readonly description: "The exchange rate applied to calculate the transfer amount.";
                            readonly examples: readonly ["1200.56"];
                        };
                        readonly source: {
                            readonly description: "Information on the transfer's source.";
                            readonly type: "object";
                            readonly properties: {
                                readonly amount: {
                                    readonly type: "string";
                                    readonly description: "The amount in decimals.";
                                    readonly examples: readonly ["1200.56"];
                                };
                                readonly currency: {
                                    readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                            };
                        };
                        readonly destination: {
                            readonly description: "Information on the transfer's destination.";
                            readonly type: "object";
                            readonly properties: {
                                readonly amount: {
                                    readonly type: "string";
                                    readonly description: "The amount in decimals.";
                                    readonly examples: readonly ["1200.56"];
                                };
                                readonly currency: {
                                    readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                            };
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The date and time when the rate conversion was created.";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransferRatesPost: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["source", "destination"];
        readonly properties: {
            readonly source: {
                readonly type: "object";
                readonly required: readonly ["currency"];
                readonly properties: {
                    readonly currency: {
                        readonly description: "This is the currency of the wallet being debited for the transfer";
                        readonly type: "string";
                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                        readonly examples: readonly ["NGN"];
                    };
                };
            };
            readonly destination: {
                readonly type: "object";
                readonly required: readonly ["currency", "amount"];
                readonly properties: {
                    readonly currency: {
                        readonly description: "This is the currency of the wallet you are making a transfer to";
                        readonly type: "string";
                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                        readonly examples: readonly ["NGN"];
                    };
                    readonly amount: {
                        readonly description: "This is the amount to be converted";
                        readonly type: "number";
                        readonly minimum: 0.000001;
                        readonly format: "decimal";
                        readonly examples: readonly [1200.56];
                    };
                };
            };
            readonly precision: {
                readonly description: "This is used to signify how many decimal places you want amount returned. if no precision is set, 6 will be used";
                readonly type: "integer";
                readonly minimum: 2;
                readonly maximum: 9;
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "The unique identifier for the rate conversion.";
                            readonly type: "string";
                            readonly examples: readonly ["rte_r2B1d3"];
                        };
                        readonly rate: {
                            readonly type: "string";
                            readonly description: "The exchange rate applied to calculate the transfer amount.";
                            readonly examples: readonly ["1200.56"];
                        };
                        readonly source: {
                            readonly description: "Information on the transfer's source.";
                            readonly type: "object";
                            readonly properties: {
                                readonly amount: {
                                    readonly type: "string";
                                    readonly description: "The amount in decimals.";
                                    readonly examples: readonly ["1200.56"];
                                };
                                readonly currency: {
                                    readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                            };
                        };
                        readonly destination: {
                            readonly description: "Information on the transfer's destination.";
                            readonly type: "object";
                            readonly properties: {
                                readonly amount: {
                                    readonly type: "string";
                                    readonly description: "The amount in decimals.";
                                    readonly examples: readonly ["1200.56"];
                                };
                                readonly currency: {
                                    readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                            };
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The date and time when the rate conversion was created.";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransfersList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly next: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyNC0xMS0yN1QxMjozMjozNC42MjBa"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly previous: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyNC0xMS0yOVQwMjoxMDo1My45OTla"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
                readonly bulk_id: {
                    readonly type: "string";
                    readonly examples: readonly ["bkt_vRq7L4TM8p"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ID of a bulk transfer";
                };
                readonly recipient_id: {
                    readonly type: "string";
                    readonly examples: readonly ["rcp_vRq7L4TM8p"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ID of the recipient";
                };
                readonly sender_id: {
                    readonly type: "string";
                    readonly examples: readonly ["sdr_vRq7L4TM8p"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "ID of the sender";
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly examples: readonly ["NGN"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Destination currency in the payment instruction";
                };
                readonly source_currency: {
                    readonly type: "string";
                    readonly examples: readonly ["USD"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Source currency in the payment instruction";
                };
                readonly action: {
                    readonly type: "string";
                    readonly enum: readonly ["instant", "deferred", "scheduled", "retry"];
                    readonly examples: readonly ["instant"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Action of the transfer";
                };
                readonly type: {
                    readonly type: "string";
                    readonly enum: readonly ["bank", "mobile_money", "wallet", "cash_pickup"];
                    readonly examples: readonly ["bank"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "type of transfer";
                };
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["new", "pending", "failed", "successful", "cancelled"];
                    readonly examples: readonly ["successful"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The status of transfer";
                };
                readonly from: {
                    readonly type: "string";
                    readonly examples: readonly ["2025-04-21T10:55:16Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The start date and time for a period. This parameter is used in conjunction with the 'to' parameter to define a time range. The value should be in ISO 8601 format.";
                };
                readonly to: {
                    readonly type: "string";
                    readonly examples: readonly ["2025-05-21T10:48:18Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The end date and time for a period. This parameter is used in conjunction with the 'from' parameter to define a time range. The value should be in **ISO 8601 format**.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "object";
                            readonly properties: {
                                readonly next: {
                                    readonly type: "string";
                                    readonly examples: readonly ["MjAyNC0xMS0yN1QxMjozMjozNC42MjBa"];
                                };
                                readonly previous: {
                                    readonly type: "string";
                                    readonly examples: readonly ["MjAyNC0xMS0yOVQwMjoxMDo1My45OTla"];
                                };
                                readonly limit: {
                                    readonly type: "integer";
                                    readonly format: "int64";
                                    readonly examples: readonly [10];
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total: {
                                    readonly type: "integer";
                                    readonly format: "int64";
                                    readonly examples: readonly [1000];
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly has_more_items: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly transfers: {
                            readonly type: "array";
                            readonly maxItems: 50;
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "The unique identifier for the transfer";
                                        readonly type: "string";
                                        readonly examples: readonly ["trf_yuK89vb"];
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly description: "The type of transfer, indicating the method used to transfer funds.\n\n`bank` `mobile_money` `wallet` `cash_pickup`";
                                        readonly enum: readonly ["bank", "mobile_money", "wallet", "cash_pickup"];
                                        readonly examples: readonly ["bank"];
                                    };
                                    readonly action: {
                                        readonly description: "Whether to process the transfer instantly or at a later date.\n\n`instant` `deferred` `scheduled` `retry` `duplicate`";
                                        readonly type: "string";
                                        readonly enum: readonly ["instant", "deferred", "scheduled", "retry", "duplicate"];
                                    };
                                    readonly reference: {
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9\\-]+$";
                                        readonly minLength: 6;
                                        readonly maxLength: 42;
                                        readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                                        readonly "x-pattern-message": "must be an alphanumeric string";
                                    };
                                    readonly status: {
                                        readonly description: "The status of the transfer.\n\n`NEW` `PENDING` `FAILED` `SUCCESSFUL` `CANCELLED` `INITIATED`";
                                        readonly type: "string";
                                        readonly enum: readonly ["NEW", "PENDING", "FAILED", "SUCCESSFUL", "CANCELLED", "INITIATED"];
                                    };
                                    readonly reversal: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly reversal_datetime: {
                                                readonly description: "The transfer reversal date.";
                                                readonly type: "string";
                                                readonly format: "date-time";
                                            };
                                            readonly initial_status: {
                                                readonly description: "The original status of the transfer before reversal.";
                                                readonly type: "string";
                                                readonly examples: readonly ["SUCCESSFUL"];
                                            };
                                            readonly reconciliation_status: {
                                                readonly description: "The final status.";
                                                readonly type: "string";
                                                readonly examples: readonly ["REVERSED"];
                                            };
                                            readonly reconciliation_type: {
                                                readonly description: "Specifies either debit or credit.\n\n`D` `C`";
                                                readonly type: "string";
                                                readonly enum: readonly ["D", "C"];
                                            };
                                        };
                                    };
                                    readonly narration: {
                                        readonly type: "string";
                                        readonly description: "A brief description or message accompanying the transfer, provided by the sender to describe the purpose of the transfer.";
                                        readonly examples: readonly ["Salary payment for January"];
                                    };
                                    readonly source_currency: {
                                        readonly description: "The currency in which the transfer was debited.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly destination_currency: {
                                        readonly description: "The currency in which the amount will be credited to the recipient.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["EUR"];
                                    };
                                    readonly amount: {
                                        readonly type: "object";
                                        readonly required: readonly ["value", "applies_to"];
                                        readonly properties: {
                                            readonly value: {
                                                readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                                readonly type: "number";
                                                readonly format: "decimal";
                                                readonly minimum: 1;
                                                readonly examples: readonly [3000.44];
                                            };
                                            readonly applies_to: {
                                                readonly type: "string";
                                                readonly enum: readonly ["destination_currency", "source_currency"];
                                                readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)\n\n`destination_currency` `source_currency`";
                                            };
                                        };
                                    };
                                    readonly fee: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly currency: {
                                                readonly description: "The currency in which the fee is charged.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                readonly examples: readonly ["NGN"];
                                            };
                                            readonly value: {
                                                readonly type: "number";
                                                readonly description: "The amount charged as a fee for the transfer.";
                                                readonly format: "double";
                                                readonly minimum: 0;
                                                readonly examples: readonly [10.35];
                                                readonly maximum: 1.7976931348623157e+308;
                                            };
                                        };
                                    };
                                    readonly debit_information: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly currency: {
                                                readonly description: "The currency in which the fees and charges are applied for the transfer.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                readonly type: "string";
                                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                readonly examples: readonly ["NGN"];
                                            };
                                            readonly actual_debit_amount: {
                                                readonly type: "number";
                                                readonly description: "The exact amount deducted for the transfer, including applicable fees.";
                                                readonly format: "decimal";
                                                readonly minimum: 0;
                                                readonly examples: readonly [100.35];
                                            };
                                            readonly rate_used: {
                                                readonly type: "number";
                                                readonly description: "The exchange rate applied to calculate the transfer amount.";
                                                readonly format: "decimal";
                                                readonly minimum: 0;
                                                readonly examples: readonly [100.35];
                                            };
                                            readonly vat: {
                                                readonly type: "number";
                                                readonly description: "The Value-Added Tax (VAT) amount charged for the transfer.";
                                                readonly format: "decimal";
                                                readonly minimum: 0;
                                                readonly examples: readonly [100.35];
                                            };
                                        };
                                    };
                                    readonly payment_information: {
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly proof: {
                                                readonly type: "string";
                                                readonly description: "Session ID";
                                                readonly examples: readonly ["11000224070317345400001414441712312381"];
                                            };
                                        };
                                    };
                                    readonly retry: {
                                        readonly description: "Contains the information of the initial transfer that was retried.";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly parent_id: {
                                                readonly type: "string";
                                                readonly description: "The unique identifier of the original transfer that is being retried.";
                                                readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                            };
                                            readonly parent_reference: {
                                                readonly type: "string";
                                                readonly description: "The external reference of the original transfer that is being retried.";
                                                readonly examples: readonly ["flw_z882wFGMjc"];
                                            };
                                        };
                                    };
                                    readonly duplicate: {
                                        readonly description: "Contains the information of the initial transfer that was duplicated.";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly parent_id: {
                                                readonly type: "string";
                                                readonly description: "The unique identifier of the original transfer that is being retried.";
                                                readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                            };
                                            readonly parent_reference: {
                                                readonly type: "string";
                                                readonly description: "The external reference of the original transfer that is being retried.";
                                                readonly examples: readonly ["flw_z882wFGMjc"];
                                            };
                                        };
                                    };
                                    readonly disburse_option: {
                                        readonly type: "object";
                                        readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                                        readonly properties: {
                                            readonly date_time: {
                                                readonly type: "string";
                                                readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                                            };
                                            readonly timezone: {
                                                readonly type: "string";
                                                readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                                                readonly description: "`Africa/Cairo` `Africa/Accra` `Africa/Nairobi` `Africa/Lagos` `Africa/Freetown` `Africa/Dar_es_Salaam` `Africa/Kampala` `Africa/Douala` `Africa/Ndjamena` `Africa/Kinshasa` `Africa/Lubumbashi` `Africa/Libreville` `Africa/Porto-Novo` `Africa/Abidjan` `Africa/Dakar` `Africa/Johannesburg` `America/New_York` `America/Los_Angeles` `America/Sao_Paulo` `Asia/Dubai` `Asia/Kolkata` `Asia/Tokyo` `Australia/Sydney` `Europe/London` `Europe/Berlin` `Europe/Moscow` `Pacific/Auckland` `Pacific/Honolulu` `UTC`";
                                            };
                                        };
                                    };
                                    readonly callback_url: {
                                        readonly type: "string";
                                        readonly description: "A URL where callbacks or notifications will be sent.";
                                        readonly examples: readonly ["https://example.com/flw/callback"];
                                    };
                                    readonly provider_response: {
                                        readonly type: "object";
                                        readonly required: readonly ["type", "code"];
                                        readonly description: "Represents payout error codes. The `type` and `code` fields are separate enums where:\n- `type` indicates the nature of the error.\n- `code` provides the specific error code associated with the error type.\n- `message` explains the meaning of the `type-code` pair\n";
                                        readonly properties: {
                                            readonly message: {
                                                readonly type: "string";
                                                readonly description: "The processor message for the transfer.";
                                                readonly examples: readonly ["DISBURSE FAILED: Insufficient wallet balance"];
                                            };
                                            readonly type: {
                                                readonly type: "string";
                                                readonly description: "The type of the payout error, representing the specific error scenario.\n\n\n`transfer_amount_exceeds_limit` `transfer_amount_below_limit` `monthly_transfer_limit_exceeded` `daily_transfer_limit_exceeded` `transfer_limit_not_set_for_currency` `payout_creation_failed` `insufficient_balance` `service_unavailable` `transfer_failed` `pricing_not_set` `currency_conversion_not_set` `rejected_recipient_merchant` `invalid_bank_code` `unable_to_determine_country` `invalid_wallet_currency`";
                                                readonly enum: readonly ["transfer_amount_exceeds_limit", "transfer_amount_below_limit", "monthly_transfer_limit_exceeded", "daily_transfer_limit_exceeded", "transfer_limit_not_set_for_currency", "payout_creation_failed", "insufficient_balance", "service_unavailable", "transfer_failed", "pricing_not_set", "currency_conversion_not_set", "rejected_recipient_merchant", "invalid_bank_code", "unable_to_determine_country", "invalid_wallet_currency"];
                                            };
                                            readonly code: {
                                                readonly type: "string";
                                                readonly description: "The unique code associated with the error type. This code follows a pattern of four digits.\n";
                                                readonly pattern: "\\d{4}";
                                            };
                                        };
                                    };
                                    readonly recipient: {
                                        readonly description: "The recipient details.";
                                        readonly oneOf: readonly [{
                                            readonly type: "object";
                                            readonly required: readonly ["bank"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly description: "ID of the transfer recipient";
                                                    readonly type: "string";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly default: "bank";
                                                    readonly readOnly: true;
                                                };
                                                readonly name: {
                                                    readonly type: "object";
                                                    readonly description: "The Customer's full name.";
                                                    readonly properties: {
                                                        readonly first: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's first name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["King"];
                                                        };
                                                        readonly middle: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's middle name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["Leo"];
                                                        };
                                                        readonly last: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's last name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["LeBron"];
                                                        };
                                                    };
                                                };
                                                readonly currency: {
                                                    readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                    readonly examples: readonly ["NGN"];
                                                };
                                                readonly national_identification: {
                                                    readonly description: "Sender government identification";
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly type: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                            readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                        };
                                                        readonly identifier: {
                                                            readonly type: "string";
                                                            readonly minLength: 4;
                                                            readonly maxLength: 40;
                                                            readonly examples: readonly ["FLY5869798686"];
                                                        };
                                                        readonly expiration_date: {
                                                            readonly type: "string";
                                                            readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                            readonly examples: readonly ["2029-07-08"];
                                                        };
                                                    };
                                                };
                                                readonly phone: {
                                                    readonly type: "object";
                                                    readonly description: "The customer's mobile number.";
                                                    readonly required: readonly ["number", "country_code"];
                                                    readonly properties: {
                                                        readonly country_code: {
                                                            readonly description: "ISO 3166 alpha-3 country code.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[0-9]{1,3}$";
                                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                            readonly examples: readonly ["234"];
                                                        };
                                                        readonly number: {
                                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[0-9]{7,10}$";
                                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                            readonly examples: readonly ["8001122334"];
                                                        };
                                                    };
                                                };
                                                readonly date_of_birth: {
                                                    readonly type: "string";
                                                    readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                                    readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                };
                                                readonly email: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's email address.";
                                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                                    readonly "x-pattern-message": "must be an email format";
                                                    readonly examples: readonly ["hi@flutterwave.com"];
                                                };
                                                readonly address: {
                                                    readonly type: "object";
                                                    readonly description: "Customer address information.";
                                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                    readonly properties: {
                                                        readonly city: {
                                                            readonly type: "string";
                                                            readonly description: "The name of the city.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                        readonly country: {
                                                            readonly description: "ISO2 country code";
                                                            readonly type: "string";
                                                            readonly pattern: "^[A-Z]{2}$";
                                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                            readonly examples: readonly ["US"];
                                                        };
                                                        readonly line1: {
                                                            readonly type: "string";
                                                            readonly description: "The first line of the Customer's address.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["123 Main Street"];
                                                        };
                                                        readonly line2: {
                                                            readonly type: "string";
                                                            readonly description: "The second line of the Customer's address.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["Apt 4B"];
                                                        };
                                                        readonly postal_code: {
                                                            readonly type: "string";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["10001"];
                                                        };
                                                        readonly state: {
                                                            readonly type: "string";
                                                            readonly description: "The state or region.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                    };
                                                };
                                                readonly bank: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["account_number", "code"];
                                                    readonly properties: {
                                                        readonly account_number: {
                                                            readonly description: "The Recipient's account number.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[a-zA-Z0-9]*$";
                                                        };
                                                        readonly account_type: {
                                                            readonly description: "The Recipient's account type.\n\n`checking` `savings` `individual` `corporate`";
                                                            readonly type: "string";
                                                            readonly enum: readonly ["checking", "savings", "individual", "corporate"];
                                                        };
                                                        readonly code: {
                                                            readonly description: "The Recipient's bank code.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[a-zA-Z0-9]*$";
                                                        };
                                                        readonly branch: {
                                                            readonly description: "The Recipient's bank branch.";
                                                            readonly type: "string";
                                                        };
                                                        readonly name: {
                                                            readonly description: "The Recipient's bank name.";
                                                            readonly type: "string";
                                                        };
                                                        readonly routing_number: {
                                                            readonly description: "The Recipient bank routing number.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[a-zA-Z0-9]*$";
                                                        };
                                                        readonly swift_code: {
                                                            readonly description: "The Recipient bank swift code.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[a-zA-Z0-9]*$";
                                                        };
                                                        readonly sort_code: {
                                                            readonly description: "The Recipient bank sort code.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[a-zA-Z0-9]*$";
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly required: readonly ["name"];
                                            readonly properties: {
                                                readonly id: {
                                                    readonly description: "ID of the transfer recipient";
                                                    readonly type: "string";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly default: "mobile_money";
                                                    readonly readOnly: true;
                                                };
                                                readonly name: {
                                                    readonly type: "object";
                                                    readonly description: "The Customer's full name.";
                                                    readonly properties: {
                                                        readonly first: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's first name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["King"];
                                                        };
                                                        readonly middle: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's middle name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["Leo"];
                                                        };
                                                        readonly last: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's last name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["LeBron"];
                                                        };
                                                    };
                                                };
                                                readonly currency: {
                                                    readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                    readonly examples: readonly ["NGN"];
                                                };
                                                readonly national_identification: {
                                                    readonly description: "Sender government identification";
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly type: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                            readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                        };
                                                        readonly identifier: {
                                                            readonly type: "string";
                                                            readonly minLength: 4;
                                                            readonly maxLength: 40;
                                                            readonly examples: readonly ["FLY5869798686"];
                                                        };
                                                        readonly expiration_date: {
                                                            readonly type: "string";
                                                            readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                            readonly examples: readonly ["2029-07-08"];
                                                        };
                                                    };
                                                };
                                                readonly phone: {
                                                    readonly type: "object";
                                                    readonly description: "The customer's mobile number.";
                                                    readonly required: readonly ["number", "country_code"];
                                                    readonly properties: {
                                                        readonly country_code: {
                                                            readonly description: "ISO 3166 alpha-3 country code.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[0-9]{1,3}$";
                                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                            readonly examples: readonly ["234"];
                                                        };
                                                        readonly number: {
                                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[0-9]{7,10}$";
                                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                            readonly examples: readonly ["8001122334"];
                                                        };
                                                    };
                                                };
                                                readonly date_of_birth: {
                                                    readonly type: "string";
                                                    readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                                    readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                };
                                                readonly email: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's email address.";
                                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                                    readonly "x-pattern-message": "must be an email format";
                                                    readonly examples: readonly ["cornelius@gmail.com"];
                                                };
                                                readonly address: {
                                                    readonly type: "object";
                                                    readonly description: "Customer address information.";
                                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                    readonly properties: {
                                                        readonly city: {
                                                            readonly type: "string";
                                                            readonly description: "The name of the city.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                        readonly country: {
                                                            readonly description: "ISO2 country code";
                                                            readonly type: "string";
                                                            readonly pattern: "^[A-Z]{2}$";
                                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                            readonly examples: readonly ["US"];
                                                        };
                                                        readonly line1: {
                                                            readonly type: "string";
                                                            readonly description: "The first line of the Customer's address.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["123 Main Street"];
                                                        };
                                                        readonly line2: {
                                                            readonly type: "string";
                                                            readonly description: "The second line of the Customer's address.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["Apt 4B"];
                                                        };
                                                        readonly postal_code: {
                                                            readonly type: "string";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["10001"];
                                                        };
                                                        readonly state: {
                                                            readonly type: "string";
                                                            readonly description: "The state or region.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                    };
                                                };
                                                readonly mobile_money: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["network", "country", "msisdn"];
                                                    readonly properties: {
                                                        readonly network: {
                                                            readonly description: "recipient network";
                                                            readonly type: "string";
                                                        };
                                                        readonly country: {
                                                            readonly description: "recipient country";
                                                            readonly type: "string";
                                                        };
                                                        readonly msisdn: {
                                                            readonly description: "recipient phone number";
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly description: "ID of the transfer recipient";
                                                    readonly type: "string";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly default: "wallet";
                                                    readonly readOnly: true;
                                                };
                                                readonly name: {
                                                    readonly type: "object";
                                                    readonly description: "The Customer's full name.";
                                                    readonly readOnly: true;
                                                    readonly properties: {
                                                        readonly first: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's first name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["King"];
                                                        };
                                                        readonly middle: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's middle name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["Leo"];
                                                        };
                                                        readonly last: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's last name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["LeBron"];
                                                        };
                                                    };
                                                };
                                                readonly currency: {
                                                    readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                    readonly examples: readonly ["NGN"];
                                                };
                                                readonly wallet: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["provider", "identifier"];
                                                    readonly properties: {
                                                        readonly provider: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["flutterwave"];
                                                            readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported\n\n`flutterwave`";
                                                        };
                                                        readonly identifier: {
                                                            readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                                                            readonly type: "string";
                                                            readonly examples: readonly ["00118468"];
                                                        };
                                                    };
                                                };
                                            };
                                        }, {
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly id: {
                                                    readonly description: "ID of the transfer recipient";
                                                    readonly type: "string";
                                                };
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly default: "cash_pickup";
                                                    readonly readOnly: true;
                                                };
                                                readonly name: {
                                                    readonly type: "object";
                                                    readonly description: "The Customer's full name.";
                                                    readonly properties: {
                                                        readonly first: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's first name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["King"];
                                                        };
                                                        readonly middle: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's middle name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["Leo"];
                                                        };
                                                        readonly last: {
                                                            readonly type: "string";
                                                            readonly description: "The Customer's last name.";
                                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                            readonly examples: readonly ["LeBron"];
                                                        };
                                                    };
                                                };
                                                readonly currency: {
                                                    readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                                    readonly examples: readonly ["NGN"];
                                                };
                                                readonly national_identification: {
                                                    readonly description: "Sender government identification";
                                                    readonly type: "object";
                                                    readonly properties: {
                                                        readonly type: {
                                                            readonly type: "string";
                                                            readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                            readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                        };
                                                        readonly identifier: {
                                                            readonly type: "string";
                                                            readonly minLength: 4;
                                                            readonly maxLength: 40;
                                                            readonly examples: readonly ["FLY5869798686"];
                                                        };
                                                        readonly expiration_date: {
                                                            readonly type: "string";
                                                            readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                            readonly examples: readonly ["2029-07-08"];
                                                        };
                                                    };
                                                };
                                                readonly phone: {
                                                    readonly type: "object";
                                                    readonly description: "The customer's mobile number.";
                                                    readonly required: readonly ["number", "country_code"];
                                                    readonly properties: {
                                                        readonly country_code: {
                                                            readonly description: "ISO 3166 alpha-3 country code.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[0-9]{1,3}$";
                                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                            readonly examples: readonly ["234"];
                                                        };
                                                        readonly number: {
                                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                            readonly type: "string";
                                                            readonly pattern: "^[0-9]{7,10}$";
                                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                            readonly examples: readonly ["8001122334"];
                                                        };
                                                    };
                                                };
                                                readonly date_of_birth: {
                                                    readonly type: "string";
                                                    readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                                    readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                };
                                                readonly email: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's email address.";
                                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                                    readonly "x-pattern-message": "must be an email format";
                                                    readonly examples: readonly ["hi@flutterwave.com"];
                                                };
                                                readonly address: {
                                                    readonly type: "object";
                                                    readonly description: "Customer address information.";
                                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                    readonly properties: {
                                                        readonly city: {
                                                            readonly type: "string";
                                                            readonly description: "The name of the city.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                        readonly country: {
                                                            readonly description: "ISO2 country code";
                                                            readonly type: "string";
                                                            readonly pattern: "^[A-Z]{2}$";
                                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                            readonly examples: readonly ["US"];
                                                        };
                                                        readonly line1: {
                                                            readonly type: "string";
                                                            readonly description: "The first line of the Customer's address.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["123 Main Street"];
                                                        };
                                                        readonly line2: {
                                                            readonly type: "string";
                                                            readonly description: "The second line of the Customer's address.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["Apt 4B"];
                                                        };
                                                        readonly postal_code: {
                                                            readonly type: "string";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["10001"];
                                                        };
                                                        readonly state: {
                                                            readonly type: "string";
                                                            readonly description: "The state or region.";
                                                            readonly pattern: "^.+$";
                                                            readonly "x-pattern-message": "value must not be empty";
                                                            readonly examples: readonly ["New York"];
                                                        };
                                                    };
                                                };
                                                readonly cash_pickup: {
                                                    readonly type: "object";
                                                    readonly required: readonly ["network"];
                                                    readonly properties: {
                                                        readonly network: {
                                                            readonly description: "cashpickup network";
                                                            readonly type: "string";
                                                        };
                                                    };
                                                };
                                            };
                                        }];
                                        readonly discriminator: {
                                            readonly propertyName: "type";
                                            readonly mapping: {
                                                readonly bank: "#/components/schemas/bank_recipient";
                                                readonly mobile_money: "#/components/schemas/mobile_money_recipient";
                                                readonly wallet: "#/components/schemas/wallet_recipient";
                                                readonly cash_pickup: "#/components/schemas/cashpickup_recipient";
                                            };
                                        };
                                    };
                                    readonly sender: {
                                        readonly description: "The sender details.";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly id: {
                                                readonly description: "ID of the transfer sender";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly type: "object";
                                                readonly description: "The Sender's full name.";
                                                readonly properties: {
                                                    readonly first: {
                                                        readonly type: "string";
                                                        readonly description: "The Customer's first name.";
                                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                        readonly examples: readonly ["King"];
                                                    };
                                                    readonly middle: {
                                                        readonly type: "string";
                                                        readonly description: "The Customer's middle name.";
                                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                        readonly examples: readonly ["Leo"];
                                                    };
                                                    readonly last: {
                                                        readonly type: "string";
                                                        readonly description: "The Customer's last name.";
                                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                        readonly examples: readonly ["LeBron"];
                                                    };
                                                };
                                            };
                                            readonly national_identification: {
                                                readonly description: "The Sender's government identification.";
                                                readonly type: "object";
                                                readonly properties: {
                                                    readonly type: {
                                                        readonly type: "string";
                                                        readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                        readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                    };
                                                    readonly identifier: {
                                                        readonly type: "string";
                                                        readonly minLength: 4;
                                                        readonly maxLength: 40;
                                                        readonly examples: readonly ["FLY5869798686"];
                                                    };
                                                    readonly expiration_date: {
                                                        readonly type: "string";
                                                        readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                        readonly examples: readonly ["2029-07-08"];
                                                    };
                                                };
                                            };
                                            readonly phone: {
                                                readonly type: "object";
                                                readonly description: "The Sender's mobile number.";
                                                readonly required: readonly ["number", "country_code"];
                                                readonly properties: {
                                                    readonly country_code: {
                                                        readonly description: "ISO 3166 alpha-3 country code.";
                                                        readonly type: "string";
                                                        readonly pattern: "^[0-9]{1,3}$";
                                                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                        readonly examples: readonly ["234"];
                                                    };
                                                    readonly number: {
                                                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                        readonly type: "string";
                                                        readonly pattern: "^[0-9]{7,10}$";
                                                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                        readonly examples: readonly ["8001122334"];
                                                    };
                                                };
                                            };
                                            readonly date_of_birth: {
                                                readonly description: "The Sender's date of birth.";
                                                readonly type: "string";
                                            };
                                            readonly email: {
                                                readonly type: "string";
                                                readonly description: "The Sender's email address.";
                                                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                                readonly "x-pattern-message": "must be an email format";
                                                readonly examples: readonly ["cornelius@gmail.com"];
                                            };
                                            readonly address: {
                                                readonly type: "object";
                                                readonly description: "The Sender's residential address.";
                                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                                readonly properties: {
                                                    readonly city: {
                                                        readonly type: "string";
                                                        readonly description: "The name of the city.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                    readonly country: {
                                                        readonly description: "ISO2 country code";
                                                        readonly type: "string";
                                                        readonly pattern: "^[A-Z]{2}$";
                                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                        readonly examples: readonly ["US"];
                                                    };
                                                    readonly line1: {
                                                        readonly type: "string";
                                                        readonly description: "The first line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["123 Main Street"];
                                                    };
                                                    readonly line2: {
                                                        readonly type: "string";
                                                        readonly description: "The second line of the Customer's address.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["Apt 4B"];
                                                    };
                                                    readonly postal_code: {
                                                        readonly type: "string";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["10001"];
                                                    };
                                                    readonly state: {
                                                        readonly type: "string";
                                                        readonly description: "The state or region.";
                                                        readonly pattern: "^.+$";
                                                        readonly "x-pattern-message": "value must not be empty";
                                                        readonly examples: readonly ["New York"];
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    readonly meta: {
                                        readonly type: "object";
                                        readonly additionalProperties: {
                                            readonly type: "string";
                                        };
                                    };
                                    readonly created_datetime: {
                                        readonly type: "string";
                                        readonly description: "The date and time when the transfer was submitted for processing.";
                                        readonly format: "date-time";
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransfersPost: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["action", "payment_instruction"];
        readonly properties: {
            readonly action: {
                readonly description: "To define whether the transfer should be processed immediately, scheduled for a later date, or deferred for future processing";
                readonly type: "string";
                readonly enum: readonly ["instant", "deferred", "scheduled"];
            };
            readonly reference: {
                readonly type: "string";
                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                readonly minLength: 6;
                readonly maxLength: 42;
                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                readonly "x-pattern-message": "must be an alphanumeric string";
            };
            readonly narration: {
                readonly description: "transfer description. This cannot be greater than 180 characters";
                readonly type: "string";
                readonly minLength: 1;
                readonly maxLength: 180;
            };
            readonly disburse_option: {
                readonly type: "object";
                readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                readonly properties: {
                    readonly date_time: {
                        readonly type: "string";
                        readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                    };
                    readonly timezone: {
                        readonly type: "string";
                        readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                    };
                };
            };
            readonly callback_url: {
                readonly description: "To set a callback url for receiving payout webhook, this will take precedent over the merchant's default webhook url";
                readonly type: "string";
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly payment_instruction: {
                readonly type: "object";
                readonly required: readonly ["recipient_id", "source_currency", "amount"];
                readonly properties: {
                    readonly source_currency: {
                        readonly description: "ISO 4217 currency code.";
                        readonly type: "string";
                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                        readonly examples: readonly ["NGN"];
                    };
                    readonly amount: {
                        readonly type: "object";
                        readonly required: readonly ["value", "applies_to"];
                        readonly properties: {
                            readonly value: {
                                readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                readonly type: "number";
                                readonly format: "decimal";
                                readonly minimum: 1;
                                readonly examples: readonly [3000.44];
                            };
                            readonly applies_to: {
                                readonly type: "string";
                                readonly enum: readonly ["destination_currency", "source_currency"];
                                readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)";
                            };
                        };
                    };
                    readonly recipient_id: {
                        readonly description: "The ID of the recipient receiving the payment.";
                        readonly type: "string";
                        readonly examples: readonly ["rcb_atNyZLK4f9"];
                    };
                    readonly sender_id: {
                        readonly description: "The ID of the sender.";
                        readonly type: "string";
                        readonly examples: readonly ["sdr_DJOWzrFT6V"];
                    };
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "The unique identifier for the transfer";
                            readonly type: "string";
                            readonly examples: readonly ["trf_yuK89vb"];
                        };
                        readonly type: {
                            readonly type: "string";
                            readonly description: "The type of transfer, indicating the method used to transfer funds.\n\n`bank` `mobile_money` `wallet` `cash_pickup`";
                            readonly enum: readonly ["bank", "mobile_money", "wallet", "cash_pickup"];
                            readonly examples: readonly ["bank"];
                        };
                        readonly action: {
                            readonly description: "Whether to process the transfer instantly or at a later date.\n\n`instant` `deferred` `scheduled` `retry` `duplicate`";
                            readonly type: "string";
                            readonly enum: readonly ["instant", "deferred", "scheduled", "retry", "duplicate"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly pattern: "^[a-zA-Z0-9\\-]+$";
                            readonly minLength: 6;
                            readonly maxLength: 42;
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly "x-pattern-message": "must be an alphanumeric string";
                        };
                        readonly status: {
                            readonly description: "The status of the transfer.\n\n`NEW` `PENDING` `FAILED` `SUCCESSFUL` `CANCELLED` `INITIATED`";
                            readonly type: "string";
                            readonly enum: readonly ["NEW", "PENDING", "FAILED", "SUCCESSFUL", "CANCELLED", "INITIATED"];
                        };
                        readonly reversal: {
                            readonly type: "object";
                            readonly properties: {
                                readonly reversal_datetime: {
                                    readonly description: "The transfer reversal date.";
                                    readonly type: "string";
                                    readonly format: "date-time";
                                };
                                readonly initial_status: {
                                    readonly description: "The original status of the transfer before reversal.";
                                    readonly type: "string";
                                    readonly examples: readonly ["SUCCESSFUL"];
                                };
                                readonly reconciliation_status: {
                                    readonly description: "The final status.";
                                    readonly type: "string";
                                    readonly examples: readonly ["REVERSED"];
                                };
                                readonly reconciliation_type: {
                                    readonly description: "Specifies either debit or credit.\n\n`D` `C`";
                                    readonly type: "string";
                                    readonly enum: readonly ["D", "C"];
                                };
                            };
                        };
                        readonly narration: {
                            readonly type: "string";
                            readonly description: "A brief description or message accompanying the transfer, provided by the sender to describe the purpose of the transfer.";
                            readonly examples: readonly ["Salary payment for January"];
                        };
                        readonly source_currency: {
                            readonly description: "The currency in which the transfer was debited.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["NGN"];
                        };
                        readonly destination_currency: {
                            readonly description: "The currency in which the amount will be credited to the recipient.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                            readonly type: "string";
                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                            readonly examples: readonly ["EUR"];
                        };
                        readonly amount: {
                            readonly type: "object";
                            readonly required: readonly ["value", "applies_to"];
                            readonly properties: {
                                readonly value: {
                                    readonly description: "Amount to be sent to the recipient. This is a positive integer in the smallest currency unit";
                                    readonly type: "number";
                                    readonly format: "decimal";
                                    readonly minimum: 1;
                                    readonly examples: readonly [3000.44];
                                };
                                readonly applies_to: {
                                    readonly type: "string";
                                    readonly enum: readonly ["destination_currency", "source_currency"];
                                    readonly description: "Specifies whether the transfer amount is in destination_currency (no conversion) or source_currency (this will be converted to destination currency)\n\n`destination_currency` `source_currency`";
                                };
                            };
                        };
                        readonly fee: {
                            readonly type: "object";
                            readonly properties: {
                                readonly currency: {
                                    readonly description: "The currency in which the fee is charged.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                                readonly value: {
                                    readonly type: "number";
                                    readonly description: "The amount charged as a fee for the transfer.";
                                    readonly format: "double";
                                    readonly minimum: 0;
                                    readonly examples: readonly [10.35];
                                    readonly maximum: 1.7976931348623157e+308;
                                };
                            };
                        };
                        readonly debit_information: {
                            readonly type: "object";
                            readonly properties: {
                                readonly currency: {
                                    readonly description: "The currency in which the fees and charges are applied for the transfer.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                    readonly type: "string";
                                    readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                    readonly examples: readonly ["NGN"];
                                };
                                readonly actual_debit_amount: {
                                    readonly type: "number";
                                    readonly description: "The exact amount deducted for the transfer, including applicable fees.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                                readonly rate_used: {
                                    readonly type: "number";
                                    readonly description: "The exchange rate applied to calculate the transfer amount.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                                readonly vat: {
                                    readonly type: "number";
                                    readonly description: "The Value-Added Tax (VAT) amount charged for the transfer.";
                                    readonly format: "decimal";
                                    readonly minimum: 0;
                                    readonly examples: readonly [100.35];
                                };
                            };
                        };
                        readonly payment_information: {
                            readonly type: "object";
                            readonly properties: {
                                readonly proof: {
                                    readonly type: "string";
                                    readonly description: "Session ID";
                                    readonly examples: readonly ["11000224070317345400001414441712312381"];
                                };
                            };
                        };
                        readonly retry: {
                            readonly description: "Contains the information of the initial transfer that was retried.";
                            readonly type: "object";
                            readonly properties: {
                                readonly parent_id: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the original transfer that is being retried.";
                                    readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                };
                                readonly parent_reference: {
                                    readonly type: "string";
                                    readonly description: "The external reference of the original transfer that is being retried.";
                                    readonly examples: readonly ["flw_z882wFGMjc"];
                                };
                            };
                        };
                        readonly duplicate: {
                            readonly description: "Contains the information of the initial transfer that was duplicated.";
                            readonly type: "object";
                            readonly properties: {
                                readonly parent_id: {
                                    readonly type: "string";
                                    readonly description: "The unique identifier of the original transfer that is being retried.";
                                    readonly examples: readonly ["trf_HUQUYb1Sp5CkiIJFebk1Z"];
                                };
                                readonly parent_reference: {
                                    readonly type: "string";
                                    readonly description: "The external reference of the original transfer that is being retried.";
                                    readonly examples: readonly ["flw_z882wFGMjc"];
                                };
                            };
                        };
                        readonly disburse_option: {
                            readonly type: "object";
                            readonly description: "To specify the date and time for disbursement, this is required when action is set to scheduled.";
                            readonly properties: {
                                readonly date_time: {
                                    readonly type: "string";
                                    readonly description: "the scheduled date and time for when the transfer should be disbursed to the recipient's account. It should be in the 'YYYY-MM-DD HH:MM:SS' 24hr format.";
                                };
                                readonly timezone: {
                                    readonly type: "string";
                                    readonly enum: readonly ["Africa/Cairo", "Africa/Accra", "Africa/Nairobi", "Africa/Lagos", "Africa/Freetown", "Africa/Dar_es_Salaam", "Africa/Kampala", "Africa/Douala", "Africa/Ndjamena", "Africa/Kinshasa", "Africa/Lubumbashi", "Africa/Libreville", "Africa/Porto-Novo", "Africa/Abidjan", "Africa/Dakar", "Africa/Johannesburg", "America/New_York", "America/Los_Angeles", "America/Sao_Paulo", "Asia/Dubai", "Asia/Kolkata", "Asia/Tokyo", "Australia/Sydney", "Europe/London", "Europe/Berlin", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "UTC"];
                                    readonly description: "`Africa/Cairo` `Africa/Accra` `Africa/Nairobi` `Africa/Lagos` `Africa/Freetown` `Africa/Dar_es_Salaam` `Africa/Kampala` `Africa/Douala` `Africa/Ndjamena` `Africa/Kinshasa` `Africa/Lubumbashi` `Africa/Libreville` `Africa/Porto-Novo` `Africa/Abidjan` `Africa/Dakar` `Africa/Johannesburg` `America/New_York` `America/Los_Angeles` `America/Sao_Paulo` `Asia/Dubai` `Asia/Kolkata` `Asia/Tokyo` `Australia/Sydney` `Europe/London` `Europe/Berlin` `Europe/Moscow` `Pacific/Auckland` `Pacific/Honolulu` `UTC`";
                                };
                            };
                        };
                        readonly callback_url: {
                            readonly type: "string";
                            readonly description: "A URL where callbacks or notifications will be sent.";
                            readonly examples: readonly ["https://example.com/flw/callback"];
                        };
                        readonly provider_response: {
                            readonly type: "object";
                            readonly required: readonly ["type", "code"];
                            readonly description: "Represents payout error codes. The `type` and `code` fields are separate enums where:\n- `type` indicates the nature of the error.\n- `code` provides the specific error code associated with the error type.\n- `message` explains the meaning of the `type-code` pair\n";
                            readonly properties: {
                                readonly message: {
                                    readonly type: "string";
                                    readonly description: "The processor message for the transfer.";
                                    readonly examples: readonly ["DISBURSE FAILED: Insufficient wallet balance"];
                                };
                                readonly type: {
                                    readonly type: "string";
                                    readonly description: "The type of the payout error, representing the specific error scenario.\n\n\n`transfer_amount_exceeds_limit` `transfer_amount_below_limit` `monthly_transfer_limit_exceeded` `daily_transfer_limit_exceeded` `transfer_limit_not_set_for_currency` `payout_creation_failed` `insufficient_balance` `service_unavailable` `transfer_failed` `pricing_not_set` `currency_conversion_not_set` `rejected_recipient_merchant` `invalid_bank_code` `unable_to_determine_country` `invalid_wallet_currency`";
                                    readonly enum: readonly ["transfer_amount_exceeds_limit", "transfer_amount_below_limit", "monthly_transfer_limit_exceeded", "daily_transfer_limit_exceeded", "transfer_limit_not_set_for_currency", "payout_creation_failed", "insufficient_balance", "service_unavailable", "transfer_failed", "pricing_not_set", "currency_conversion_not_set", "rejected_recipient_merchant", "invalid_bank_code", "unable_to_determine_country", "invalid_wallet_currency"];
                                };
                                readonly code: {
                                    readonly type: "string";
                                    readonly description: "The unique code associated with the error type. This code follows a pattern of four digits.\n";
                                    readonly pattern: "\\d{4}";
                                };
                            };
                        };
                        readonly recipient: {
                            readonly description: "The recipient details.";
                            readonly oneOf: readonly [{
                                readonly type: "object";
                                readonly required: readonly ["bank"];
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "bank";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly bank: {
                                        readonly type: "object";
                                        readonly required: readonly ["account_number", "code"];
                                        readonly properties: {
                                            readonly account_number: {
                                                readonly description: "The Recipient's account number.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly account_type: {
                                                readonly description: "The Recipient's account type.\n\n`checking` `savings` `individual` `corporate`";
                                                readonly type: "string";
                                                readonly enum: readonly ["checking", "savings", "individual", "corporate"];
                                            };
                                            readonly code: {
                                                readonly description: "The Recipient's bank code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly branch: {
                                                readonly description: "The Recipient's bank branch.";
                                                readonly type: "string";
                                            };
                                            readonly name: {
                                                readonly description: "The Recipient's bank name.";
                                                readonly type: "string";
                                            };
                                            readonly routing_number: {
                                                readonly description: "The Recipient bank routing number.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly swift_code: {
                                                readonly description: "The Recipient bank swift code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                            readonly sort_code: {
                                                readonly description: "The Recipient bank sort code.";
                                                readonly type: "string";
                                                readonly pattern: "^[a-zA-Z0-9]*$";
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly required: readonly ["name"];
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "mobile_money";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["cornelius@gmail.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly mobile_money: {
                                        readonly type: "object";
                                        readonly required: readonly ["network", "country", "msisdn"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "recipient network";
                                                readonly type: "string";
                                            };
                                            readonly country: {
                                                readonly description: "recipient country";
                                                readonly type: "string";
                                            };
                                            readonly msisdn: {
                                                readonly description: "recipient phone number";
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "wallet";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly readOnly: true;
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly wallet: {
                                        readonly type: "object";
                                        readonly required: readonly ["provider", "identifier"];
                                        readonly properties: {
                                            readonly provider: {
                                                readonly type: "string";
                                                readonly enum: readonly ["flutterwave"];
                                                readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported\n\n`flutterwave`";
                                            };
                                            readonly identifier: {
                                                readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                                                readonly type: "string";
                                                readonly examples: readonly ["00118468"];
                                            };
                                        };
                                    };
                                };
                            }, {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer recipient";
                                        readonly type: "string";
                                    };
                                    readonly type: {
                                        readonly type: "string";
                                        readonly default: "cash_pickup";
                                        readonly readOnly: true;
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Customer's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly currency: {
                                        readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                        readonly type: "string";
                                        readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                        readonly examples: readonly ["NGN"];
                                    };
                                    readonly national_identification: {
                                        readonly description: "Sender government identification";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The customer's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly type: "string";
                                        readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                        readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Customer's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["hi@flutterwave.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "Customer address information.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                    readonly cash_pickup: {
                                        readonly type: "object";
                                        readonly required: readonly ["network"];
                                        readonly properties: {
                                            readonly network: {
                                                readonly description: "cashpickup network";
                                                readonly type: "string";
                                            };
                                        };
                                    };
                                };
                            }];
                            readonly discriminator: {
                                readonly propertyName: "type";
                                readonly mapping: {
                                    readonly bank: "#/components/schemas/bank_recipient";
                                    readonly mobile_money: "#/components/schemas/mobile_money_recipient";
                                    readonly wallet: "#/components/schemas/wallet_recipient";
                                    readonly cash_pickup: "#/components/schemas/cashpickup_recipient";
                                };
                            };
                        };
                        readonly sender: {
                            readonly description: "The sender details.";
                            readonly type: "object";
                            readonly properties: {
                                readonly id: {
                                    readonly description: "ID of the transfer sender";
                                    readonly type: "string";
                                };
                                readonly name: {
                                    readonly type: "object";
                                    readonly description: "The Sender's full name.";
                                    readonly properties: {
                                        readonly first: {
                                            readonly type: "string";
                                            readonly description: "The Customer's first name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["King"];
                                        };
                                        readonly middle: {
                                            readonly type: "string";
                                            readonly description: "The Customer's middle name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["Leo"];
                                        };
                                        readonly last: {
                                            readonly type: "string";
                                            readonly description: "The Customer's last name.";
                                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                            readonly examples: readonly ["LeBron"];
                                        };
                                    };
                                };
                                readonly national_identification: {
                                    readonly description: "The Sender's government identification.";
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly type: {
                                            readonly type: "string";
                                            readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                            readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                        };
                                        readonly identifier: {
                                            readonly type: "string";
                                            readonly minLength: 4;
                                            readonly maxLength: 40;
                                            readonly examples: readonly ["FLY5869798686"];
                                        };
                                        readonly expiration_date: {
                                            readonly type: "string";
                                            readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                            readonly examples: readonly ["2029-07-08"];
                                        };
                                    };
                                };
                                readonly phone: {
                                    readonly type: "object";
                                    readonly description: "The Sender's mobile number.";
                                    readonly required: readonly ["number", "country_code"];
                                    readonly properties: {
                                        readonly country_code: {
                                            readonly description: "ISO 3166 alpha-3 country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{1,3}$";
                                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                            readonly examples: readonly ["234"];
                                        };
                                        readonly number: {
                                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                            readonly type: "string";
                                            readonly pattern: "^[0-9]{7,10}$";
                                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                            readonly examples: readonly ["8001122334"];
                                        };
                                    };
                                };
                                readonly date_of_birth: {
                                    readonly description: "The Sender's date of birth.";
                                    readonly type: "string";
                                };
                                readonly email: {
                                    readonly type: "string";
                                    readonly description: "The Sender's email address.";
                                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                    readonly "x-pattern-message": "must be an email format";
                                    readonly examples: readonly ["cornelius@gmail.com"];
                                };
                                readonly address: {
                                    readonly type: "object";
                                    readonly description: "The Sender's residential address.";
                                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                    readonly properties: {
                                        readonly city: {
                                            readonly type: "string";
                                            readonly description: "The name of the city.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                        readonly country: {
                                            readonly description: "ISO2 country code";
                                            readonly type: "string";
                                            readonly pattern: "^[A-Z]{2}$";
                                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                                            readonly examples: readonly ["US"];
                                        };
                                        readonly line1: {
                                            readonly type: "string";
                                            readonly description: "The first line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["123 Main Street"];
                                        };
                                        readonly line2: {
                                            readonly type: "string";
                                            readonly description: "The second line of the Customer's address.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["Apt 4B"];
                                        };
                                        readonly postal_code: {
                                            readonly type: "string";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["10001"];
                                        };
                                        readonly state: {
                                            readonly type: "string";
                                            readonly description: "The state or region.";
                                            readonly pattern: "^.+$";
                                            readonly "x-pattern-message": "value must not be empty";
                                            readonly examples: readonly ["New York"];
                                        };
                                    };
                                };
                            };
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The date and time when the transfer was submitted for processing.";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransfersRecipientsCreate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly required: readonly ["bank"];
            readonly properties: {
                readonly name: {
                    readonly readOnly: true;
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly examples: readonly ["0690000031"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["044"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "NGN";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 7;
                            readonly maxLength: 24;
                            readonly examples: readonly ["6708908978675"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["15"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "ETB";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name", "phone", "email", "address"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly phone: {
                    readonly description: "Recipient phone number";
                    readonly type: "object";
                    readonly required: readonly ["number", "country_code"];
                    readonly properties: {
                        readonly country_code: {
                            readonly description: "ISO 3166 alpha-3 country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{1,3}$";
                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                            readonly examples: readonly ["234"];
                        };
                        readonly number: {
                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{7,10}$";
                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                            readonly examples: readonly ["8001122334"];
                        };
                    };
                };
                readonly email: {
                    readonly description: "Recipient email address";
                    readonly type: "string";
                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                    readonly "x-pattern-message": "must be an email format";
                    readonly examples: readonly ["hi@flutterwave.com"];
                };
                readonly address: {
                    readonly description: "Recipient address";
                    readonly type: "object";
                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                    readonly properties: {
                        readonly city: {
                            readonly type: "string";
                            readonly description: "The name of the city.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly description: "ISO2 country code";
                            readonly type: "string";
                            readonly pattern: "^[A-Z]{2}$";
                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                            readonly examples: readonly ["US"];
                        };
                        readonly line1: {
                            readonly type: "string";
                            readonly description: "The first line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["123 Main Street"];
                        };
                        readonly line2: {
                            readonly type: "string";
                            readonly description: "The second line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["Apt 4B"];
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["10001"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "The state or region.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "name", "swift_code"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 8;
                            readonly maxLength: 35;
                            readonly examples: readonly ["DE89370400440532013000"];
                        };
                        readonly name: {
                            readonly description: "recipient bank name";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 60;
                            readonly examples: readonly ["Deutsche Bank"];
                        };
                        readonly swift_code: {
                            readonly description: "recipient bank swift code";
                            readonly type: "string";
                            readonly minLength: 4;
                            readonly maxLength: 15;
                            readonly examples: readonly ["DEUTDEFF"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "EUR";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name", "phone", "email", "address"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly phone: {
                    readonly description: "Recipient phone number";
                    readonly type: "object";
                    readonly required: readonly ["number", "country_code"];
                    readonly properties: {
                        readonly country_code: {
                            readonly description: "ISO 3166 alpha-3 country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{1,3}$";
                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                            readonly examples: readonly ["234"];
                        };
                        readonly number: {
                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{7,10}$";
                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                            readonly examples: readonly ["8001122334"];
                        };
                    };
                };
                readonly email: {
                    readonly description: "Recipient email address";
                    readonly type: "string";
                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                    readonly "x-pattern-message": "must be an email format";
                    readonly examples: readonly ["hi@flutterwave.com"];
                };
                readonly address: {
                    readonly description: "Recipient address";
                    readonly type: "object";
                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                    readonly properties: {
                        readonly city: {
                            readonly type: "string";
                            readonly description: "The name of the city.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly description: "ISO2 country code";
                            readonly type: "string";
                            readonly pattern: "^[A-Z]{2}$";
                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                            readonly examples: readonly ["US"];
                        };
                        readonly line1: {
                            readonly type: "string";
                            readonly description: "The first line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["123 Main Street"];
                        };
                        readonly line2: {
                            readonly type: "string";
                            readonly description: "The second line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["Apt 4B"];
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["10001"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "The state or region.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "account_type", "name", "sort_code"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 8;
                            readonly maxLength: 35;
                            readonly examples: readonly ["DE89370400440532013000"];
                        };
                        readonly account_type: {
                            readonly description: "recipient account type";
                            readonly type: "string";
                            readonly enum: readonly ["individual", "corporate"];
                            readonly examples: readonly ["individual"];
                        };
                        readonly name: {
                            readonly description: "recipient bank name";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 60;
                            readonly examples: readonly ["Deutsche Bank"];
                        };
                        readonly sort_code: {
                            readonly description: "recipient bank sort code";
                            readonly type: "string";
                            readonly minLength: 4;
                            readonly maxLength: 15;
                            readonly examples: readonly ["80489123"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "GBP";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code", "branch"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 7;
                            readonly maxLength: 35;
                            readonly examples: readonly ["001234567890"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["11276282"];
                        };
                        readonly branch: {
                            readonly description: "recipient bank branch";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["1812051EPC"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "GHS";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 5;
                            readonly maxLength: 19;
                            readonly examples: readonly ["123456789012"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["ABHY"];
                        };
                        readonly branch: {
                            readonly description: "recipient bank branch";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["ABHY0065001"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "MWK";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name", "phone", "email", "address"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly phone: {
                    readonly description: "Recipient phone number";
                    readonly type: "object";
                    readonly required: readonly ["number", "country_code"];
                    readonly properties: {
                        readonly country_code: {
                            readonly description: "ISO 3166 alpha-3 country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{1,3}$";
                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                            readonly examples: readonly ["234"];
                        };
                        readonly number: {
                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{7,10}$";
                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                            readonly examples: readonly ["8001122334"];
                        };
                    };
                };
                readonly email: {
                    readonly type: "string";
                    readonly description: "Recipient email address";
                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                    readonly "x-pattern-message": "must be an email format";
                    readonly examples: readonly ["cornelius@gmail.com"];
                };
                readonly address: {
                    readonly description: "Recipient address";
                    readonly type: "object";
                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                    readonly properties: {
                        readonly city: {
                            readonly type: "string";
                            readonly description: "The name of the city.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly description: "ISO2 country code";
                            readonly type: "string";
                            readonly pattern: "^[A-Z]{2}$";
                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                            readonly examples: readonly ["US"];
                        };
                        readonly line1: {
                            readonly type: "string";
                            readonly description: "The first line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["123 Main Street"];
                        };
                        readonly line2: {
                            readonly type: "string";
                            readonly description: "The second line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["Apt 4B"];
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["10001"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "The state or region.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "account_type", "code", "swift_code", "routing_number"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 5;
                            readonly maxLength: 17;
                            readonly examples: readonly ["1234567890"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["021000021"];
                        };
                        readonly account_type: {
                            readonly description: "recipient account type";
                            readonly type: "string";
                            readonly enum: readonly ["checking", "savings"];
                            readonly examples: readonly ["checking"];
                        };
                        readonly routing_number: {
                            readonly description: "recipient bank routing number";
                            readonly type: "string";
                            readonly minLength: 6;
                            readonly maxLength: 9;
                            readonly examples: readonly ["021000021"];
                        };
                        readonly swift_code: {
                            readonly description: "recipient bank swift code";
                            readonly type: "string";
                            readonly minLength: 8;
                            readonly maxLength: 11;
                            readonly examples: readonly ["BOFAUS3NXXX"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "USD";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "phone", "email", "address", "name"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly phone: {
                    readonly description: "Recipient phone number";
                    readonly type: "object";
                    readonly required: readonly ["number", "country_code"];
                    readonly properties: {
                        readonly country_code: {
                            readonly description: "ISO 3166 alpha-3 country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{1,3}$";
                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                            readonly examples: readonly ["234"];
                        };
                        readonly number: {
                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{7,10}$";
                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                            readonly examples: readonly ["8001122334"];
                        };
                    };
                };
                readonly email: {
                    readonly description: "Recipient email address";
                    readonly type: "string";
                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                    readonly "x-pattern-message": "must be an email format";
                    readonly examples: readonly ["hi@flutterwave.com"];
                };
                readonly address: {
                    readonly description: "Recipient address";
                    readonly type: "object";
                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                    readonly properties: {
                        readonly city: {
                            readonly type: "string";
                            readonly description: "The name of the city.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly description: "ISO2 country code";
                            readonly type: "string";
                            readonly pattern: "^[A-Z]{2}$";
                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                            readonly examples: readonly ["US"];
                        };
                        readonly line1: {
                            readonly type: "string";
                            readonly description: "The first line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["123 Main Street"];
                        };
                        readonly line2: {
                            readonly type: "string";
                            readonly description: "The second line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["Apt 4B"];
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["10001"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "The state or region.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 7;
                            readonly maxLength: 11;
                            readonly examples: readonly ["123456789"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["632005"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "ZAR";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 7;
                            readonly maxLength: 24;
                            readonly examples: readonly ["6708908978675"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["15"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "KES";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code", "branch"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 7;
                            readonly maxLength: 35;
                            readonly examples: readonly ["001234567890"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["11276282"];
                        };
                        readonly branch: {
                            readonly description: "recipient bank branch";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["1812051EPC"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "RWF";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code", "branch"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 7;
                            readonly maxLength: 35;
                            readonly examples: readonly ["001234567890"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["11276282"];
                        };
                        readonly branch: {
                            readonly description: "recipient bank branch";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["1812051EPC"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "SLL";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code", "branch"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 7;
                            readonly maxLength: 35;
                            readonly examples: readonly ["001234567890"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["11276282"];
                        };
                        readonly branch: {
                            readonly description: "recipient bank branch";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["1812051EPC"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "UGX";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code", "branch"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 7;
                            readonly maxLength: 35;
                            readonly examples: readonly ["001234567890"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["11276282"];
                        };
                        readonly branch: {
                            readonly description: "recipient bank branch";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["1812051EPC"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "XAF";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["bank", "name"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly bank: {
                    readonly type: "object";
                    readonly required: readonly ["account_number", "code", "branch"];
                    readonly properties: {
                        readonly account_number: {
                            readonly description: "recipient account number";
                            readonly type: "string";
                            readonly minLength: 7;
                            readonly maxLength: 35;
                            readonly examples: readonly ["001234567890"];
                        };
                        readonly code: {
                            readonly description: "recipient bank code";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["11276282"];
                        };
                        readonly branch: {
                            readonly description: "recipient bank branch";
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["1812051EPC"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "XOF";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["name", "mobile_money"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly mobile_money: {
                    readonly type: "object";
                    readonly required: readonly ["network", "msisdn"];
                    readonly properties: {
                        readonly network: {
                            readonly description: "recipient network";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["VODAFONE"];
                        };
                        readonly msisdn: {
                            readonly description: "recipient phone number";
                            readonly type: "string";
                            readonly minLength: 6;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["251911234567"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "ETB";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["name", "mobile_money"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly mobile_money: {
                    readonly type: "object";
                    readonly required: readonly ["network", "msisdn"];
                    readonly properties: {
                        readonly network: {
                            readonly description: "recipient network";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["VODAFONE"];
                        };
                        readonly msisdn: {
                            readonly description: "recipient phone number";
                            readonly type: "string";
                            readonly minLength: 6;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["251911234567"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "GHS";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["name", "mobile_money"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly mobile_money: {
                    readonly type: "object";
                    readonly required: readonly ["network", "msisdn"];
                    readonly properties: {
                        readonly network: {
                            readonly description: "recipient network";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["VODAFONE"];
                        };
                        readonly msisdn: {
                            readonly description: "recipient phone number";
                            readonly type: "string";
                            readonly minLength: 6;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["251911234567"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "KES";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["name", "mobile_money"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly mobile_money: {
                    readonly type: "object";
                    readonly required: readonly ["network", "msisdn"];
                    readonly properties: {
                        readonly network: {
                            readonly description: "recipient network";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["VODAFONE"];
                        };
                        readonly msisdn: {
                            readonly description: "recipient phone number";
                            readonly type: "string";
                            readonly minLength: 6;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["251911234567"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "RWF";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["name", "mobile_money"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly mobile_money: {
                    readonly type: "object";
                    readonly required: readonly ["network", "msisdn"];
                    readonly properties: {
                        readonly network: {
                            readonly description: "recipient network";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["VODAFONE"];
                        };
                        readonly msisdn: {
                            readonly description: "recipient phone number";
                            readonly type: "string";
                            readonly minLength: 6;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["251911234567"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "TZS";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["name", "mobile_money"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly mobile_money: {
                    readonly type: "object";
                    readonly required: readonly ["network", "msisdn"];
                    readonly properties: {
                        readonly network: {
                            readonly description: "recipient network";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["VODAFONE"];
                        };
                        readonly msisdn: {
                            readonly description: "recipient phone number";
                            readonly type: "string";
                            readonly minLength: 6;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["251911234567"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "UGX";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["name", "mobile_money"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly mobile_money: {
                    readonly type: "object";
                    readonly required: readonly ["network", "msisdn"];
                    readonly properties: {
                        readonly network: {
                            readonly description: "recipient network";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["VODAFONE"];
                        };
                        readonly msisdn: {
                            readonly description: "recipient phone number";
                            readonly type: "string";
                            readonly minLength: 6;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["251911234567"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "ZMW";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["name", "mobile_money"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly mobile_money: {
                    readonly type: "object";
                    readonly required: readonly ["network", "country", "msisdn"];
                    readonly properties: {
                        readonly network: {
                            readonly description: "recipient network";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["VODAFONE"];
                        };
                        readonly country: {
                            readonly description: "recipient country";
                            readonly type: "string";
                            readonly pattern: "^[A-Z]{2}$";
                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                            readonly examples: readonly ["CI"];
                        };
                        readonly msisdn: {
                            readonly description: "recipient phone number";
                            readonly type: "string";
                            readonly minLength: 6;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["251911234567"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "XAF";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly required: readonly ["name", "mobile_money"];
            readonly properties: {
                readonly type: {
                    readonly type: "string";
                    readonly default: "mobile_money";
                    readonly readOnly: true;
                };
                readonly name: {
                    readonly type: "object";
                    readonly description: "The Customer's full name.";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly mobile_money: {
                    readonly type: "object";
                    readonly required: readonly ["network", "country", "msisdn"];
                    readonly properties: {
                        readonly network: {
                            readonly description: "recipient network";
                            readonly type: "string";
                            readonly minLength: 2;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["VODAFONE"];
                        };
                        readonly country: {
                            readonly description: "recipient country";
                            readonly type: "string";
                            readonly pattern: "^[A-Z]{2}$";
                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                            readonly examples: readonly ["CI"];
                        };
                        readonly msisdn: {
                            readonly description: "recipient phone number";
                            readonly type: "string";
                            readonly minLength: 6;
                            readonly maxLength: 25;
                            readonly pattern: "^[a-zA-Z0-9]*$";
                            readonly "x-pattern-message": "must only contain alphanumeric characters";
                            readonly examples: readonly ["251911234567"];
                        };
                    };
                };
                readonly destination_currency: {
                    readonly type: "string";
                    readonly default: "XOF";
                    readonly readOnly: true;
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "type";
            readonly mapping: {
                readonly bank_etb: "#/components/schemas/bank_etb_recipient_in";
                readonly bank_eur: "#/components/schemas/bank_eur_recipient_in";
                readonly bank_gbp: "#/components/schemas/bank_gbp_recipient_in";
                readonly bank_ghs: "#/components/schemas/bank_ghs_recipient_in";
                readonly bank_kes: "#/components/schemas/bank_kes_recipient_in";
                readonly bank_mwk: "#/components/schemas/bank_mwk_recipient_in";
                readonly bank_ngn: "#/components/schemas/bank_ngn_recipient_in";
                readonly bank_usd: "#/components/schemas/bank_usd_recipient_in";
                readonly bank_rwf: "#/components/schemas/bank_rwf_recipient_in";
                readonly bank_sll: "#/components/schemas/bank_sll_recipient_in";
                readonly bank_ugx: "#/components/schemas/bank_ugx_recipient_in";
                readonly bank_xaf: "#/components/schemas/bank_xaf_recipient_in";
                readonly bank_xof: "#/components/schemas/bank_xof_recipient_in";
                readonly bank_zar: "#/components/schemas/bank_zar_recipient_in";
                readonly mobile_money_etb: "#/components/schemas/mobile_money_etb_recipient_in";
                readonly mobile_money_ghs: "#/components/schemas/mobile_money_ghs_recipient_in";
                readonly mobile_money_kes: "#/components/schemas/mobile_money_kes_recipient_in";
                readonly mobile_money_rwf: "#/components/schemas/mobile_money_rwf_recipient_in";
                readonly mobile_money_tzs: "#/components/schemas/mobile_money_tzs_recipient_in";
                readonly mobile_money_ugx: "#/components/schemas/mobile_money_ugx_recipient_in";
                readonly mobile_money_xaf: "#/components/schemas/mobile_money_xaf_recipient_in";
                readonly mobile_money_xof: "#/components/schemas/mobile_money_xof_recipient_in";
                readonly mobile_money_zmw: "#/components/schemas/mobile_money_zmw_recipient_in";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["bank"];
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the transfer recipient";
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly default: "bank";
                                readonly readOnly: true;
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly national_identification: {
                                readonly description: "Sender government identification";
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                        readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                    };
                                    readonly identifier: {
                                        readonly type: "string";
                                        readonly minLength: 4;
                                        readonly maxLength: 40;
                                        readonly examples: readonly ["FLY5869798686"];
                                    };
                                    readonly expiration_date: {
                                        readonly type: "string";
                                        readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                        readonly examples: readonly ["2029-07-08"];
                                    };
                                };
                            };
                            readonly phone: {
                                readonly type: "object";
                                readonly description: "The customer's mobile number.";
                                readonly required: readonly ["number", "country_code"];
                                readonly properties: {
                                    readonly country_code: {
                                        readonly description: "ISO 3166 alpha-3 country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{1,3}$";
                                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                        readonly examples: readonly ["234"];
                                    };
                                    readonly number: {
                                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{7,10}$";
                                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                        readonly examples: readonly ["8001122334"];
                                    };
                                };
                            };
                            readonly date_of_birth: {
                                readonly type: "string";
                                readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "The Customer's email address.";
                                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                readonly "x-pattern-message": "must be an email format";
                                readonly examples: readonly ["hi@flutterwave.com"];
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "Customer address information.";
                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                readonly properties: {
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "The name of the city.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly country: {
                                        readonly description: "ISO2 country code";
                                        readonly type: "string";
                                        readonly pattern: "^[A-Z]{2}$";
                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                        readonly examples: readonly ["US"];
                                    };
                                    readonly line1: {
                                        readonly type: "string";
                                        readonly description: "The first line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["123 Main Street"];
                                    };
                                    readonly line2: {
                                        readonly type: "string";
                                        readonly description: "The second line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["Apt 4B"];
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["10001"];
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "The state or region.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                };
                            };
                            readonly bank: {
                                readonly type: "object";
                                readonly required: readonly ["account_number", "code"];
                                readonly properties: {
                                    readonly account_number: {
                                        readonly description: "The Recipient's account number.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9]*$";
                                    };
                                    readonly account_type: {
                                        readonly description: "The Recipient's account type.\n\n`checking` `savings` `individual` `corporate`";
                                        readonly type: "string";
                                        readonly enum: readonly ["checking", "savings", "individual", "corporate"];
                                    };
                                    readonly code: {
                                        readonly description: "The Recipient's bank code.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9]*$";
                                    };
                                    readonly branch: {
                                        readonly description: "The Recipient's bank branch.";
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly description: "The Recipient's bank name.";
                                        readonly type: "string";
                                    };
                                    readonly routing_number: {
                                        readonly description: "The Recipient bank routing number.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9]*$";
                                    };
                                    readonly swift_code: {
                                        readonly description: "The Recipient bank swift code.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9]*$";
                                    };
                                    readonly sort_code: {
                                        readonly description: "The Recipient bank sort code.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9]*$";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["name"];
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the transfer recipient";
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly default: "mobile_money";
                                readonly readOnly: true;
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly national_identification: {
                                readonly description: "Sender government identification";
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                        readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                    };
                                    readonly identifier: {
                                        readonly type: "string";
                                        readonly minLength: 4;
                                        readonly maxLength: 40;
                                        readonly examples: readonly ["FLY5869798686"];
                                    };
                                    readonly expiration_date: {
                                        readonly type: "string";
                                        readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                        readonly examples: readonly ["2029-07-08"];
                                    };
                                };
                            };
                            readonly phone: {
                                readonly type: "object";
                                readonly description: "The customer's mobile number.";
                                readonly required: readonly ["number", "country_code"];
                                readonly properties: {
                                    readonly country_code: {
                                        readonly description: "ISO 3166 alpha-3 country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{1,3}$";
                                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                        readonly examples: readonly ["234"];
                                    };
                                    readonly number: {
                                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{7,10}$";
                                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                        readonly examples: readonly ["8001122334"];
                                    };
                                };
                            };
                            readonly date_of_birth: {
                                readonly type: "string";
                                readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "The Customer's email address.";
                                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                readonly "x-pattern-message": "must be an email format";
                                readonly examples: readonly ["cornelius@gmail.com"];
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "Customer address information.";
                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                readonly properties: {
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "The name of the city.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly country: {
                                        readonly description: "ISO2 country code";
                                        readonly type: "string";
                                        readonly pattern: "^[A-Z]{2}$";
                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                        readonly examples: readonly ["US"];
                                    };
                                    readonly line1: {
                                        readonly type: "string";
                                        readonly description: "The first line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["123 Main Street"];
                                    };
                                    readonly line2: {
                                        readonly type: "string";
                                        readonly description: "The second line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["Apt 4B"];
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["10001"];
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "The state or region.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                };
                            };
                            readonly mobile_money: {
                                readonly type: "object";
                                readonly required: readonly ["network", "country", "msisdn"];
                                readonly properties: {
                                    readonly network: {
                                        readonly description: "recipient network";
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly description: "recipient country";
                                        readonly type: "string";
                                    };
                                    readonly msisdn: {
                                        readonly description: "recipient phone number";
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the transfer recipient";
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly default: "wallet";
                                readonly readOnly: true;
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                                readonly readOnly: true;
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly wallet: {
                                readonly type: "object";
                                readonly required: readonly ["provider", "identifier"];
                                readonly properties: {
                                    readonly provider: {
                                        readonly type: "string";
                                        readonly enum: readonly ["flutterwave"];
                                        readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported\n\n`flutterwave`";
                                    };
                                    readonly identifier: {
                                        readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                                        readonly type: "string";
                                        readonly examples: readonly ["00118468"];
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the transfer recipient";
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly default: "cash_pickup";
                                readonly readOnly: true;
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly national_identification: {
                                readonly description: "Sender government identification";
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                        readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                    };
                                    readonly identifier: {
                                        readonly type: "string";
                                        readonly minLength: 4;
                                        readonly maxLength: 40;
                                        readonly examples: readonly ["FLY5869798686"];
                                    };
                                    readonly expiration_date: {
                                        readonly type: "string";
                                        readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                        readonly examples: readonly ["2029-07-08"];
                                    };
                                };
                            };
                            readonly phone: {
                                readonly type: "object";
                                readonly description: "The customer's mobile number.";
                                readonly required: readonly ["number", "country_code"];
                                readonly properties: {
                                    readonly country_code: {
                                        readonly description: "ISO 3166 alpha-3 country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{1,3}$";
                                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                        readonly examples: readonly ["234"];
                                    };
                                    readonly number: {
                                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{7,10}$";
                                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                        readonly examples: readonly ["8001122334"];
                                    };
                                };
                            };
                            readonly date_of_birth: {
                                readonly type: "string";
                                readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "The Customer's email address.";
                                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                readonly "x-pattern-message": "must be an email format";
                                readonly examples: readonly ["hi@flutterwave.com"];
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "Customer address information.";
                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                readonly properties: {
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "The name of the city.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly country: {
                                        readonly description: "ISO2 country code";
                                        readonly type: "string";
                                        readonly pattern: "^[A-Z]{2}$";
                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                        readonly examples: readonly ["US"];
                                    };
                                    readonly line1: {
                                        readonly type: "string";
                                        readonly description: "The first line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["123 Main Street"];
                                    };
                                    readonly line2: {
                                        readonly type: "string";
                                        readonly description: "The second line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["Apt 4B"];
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["10001"];
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "The state or region.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                };
                            };
                            readonly cash_pickup: {
                                readonly type: "object";
                                readonly required: readonly ["network"];
                                readonly properties: {
                                    readonly network: {
                                        readonly description: "cashpickup network";
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly bank: "#/components/schemas/bank_recipient";
                            readonly mobile_money: "#/components/schemas/mobile_money_recipient";
                            readonly wallet: "#/components/schemas/wallet_recipient";
                            readonly cash_pickup: "#/components/schemas/cashpickup_recipient";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransfersRecipientsDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the transfer recipient";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransfersRecipientsGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the transfer recipient";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly oneOf: readonly [{
                        readonly type: "object";
                        readonly required: readonly ["bank"];
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the transfer recipient";
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly default: "bank";
                                readonly readOnly: true;
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly national_identification: {
                                readonly description: "Sender government identification";
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                        readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                    };
                                    readonly identifier: {
                                        readonly type: "string";
                                        readonly minLength: 4;
                                        readonly maxLength: 40;
                                        readonly examples: readonly ["FLY5869798686"];
                                    };
                                    readonly expiration_date: {
                                        readonly type: "string";
                                        readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                        readonly examples: readonly ["2029-07-08"];
                                    };
                                };
                            };
                            readonly phone: {
                                readonly type: "object";
                                readonly description: "The customer's mobile number.";
                                readonly required: readonly ["number", "country_code"];
                                readonly properties: {
                                    readonly country_code: {
                                        readonly description: "ISO 3166 alpha-3 country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{1,3}$";
                                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                        readonly examples: readonly ["234"];
                                    };
                                    readonly number: {
                                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{7,10}$";
                                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                        readonly examples: readonly ["8001122334"];
                                    };
                                };
                            };
                            readonly date_of_birth: {
                                readonly type: "string";
                                readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "The Customer's email address.";
                                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                readonly "x-pattern-message": "must be an email format";
                                readonly examples: readonly ["hi@flutterwave.com"];
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "Customer address information.";
                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                readonly properties: {
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "The name of the city.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly country: {
                                        readonly description: "ISO2 country code";
                                        readonly type: "string";
                                        readonly pattern: "^[A-Z]{2}$";
                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                        readonly examples: readonly ["US"];
                                    };
                                    readonly line1: {
                                        readonly type: "string";
                                        readonly description: "The first line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["123 Main Street"];
                                    };
                                    readonly line2: {
                                        readonly type: "string";
                                        readonly description: "The second line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["Apt 4B"];
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["10001"];
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "The state or region.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                };
                            };
                            readonly bank: {
                                readonly type: "object";
                                readonly required: readonly ["account_number", "code"];
                                readonly properties: {
                                    readonly account_number: {
                                        readonly description: "The Recipient's account number.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9]*$";
                                    };
                                    readonly account_type: {
                                        readonly description: "The Recipient's account type.\n\n`checking` `savings` `individual` `corporate`";
                                        readonly type: "string";
                                        readonly enum: readonly ["checking", "savings", "individual", "corporate"];
                                    };
                                    readonly code: {
                                        readonly description: "The Recipient's bank code.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9]*$";
                                    };
                                    readonly branch: {
                                        readonly description: "The Recipient's bank branch.";
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly description: "The Recipient's bank name.";
                                        readonly type: "string";
                                    };
                                    readonly routing_number: {
                                        readonly description: "The Recipient bank routing number.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9]*$";
                                    };
                                    readonly swift_code: {
                                        readonly description: "The Recipient bank swift code.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9]*$";
                                    };
                                    readonly sort_code: {
                                        readonly description: "The Recipient bank sort code.";
                                        readonly type: "string";
                                        readonly pattern: "^[a-zA-Z0-9]*$";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly required: readonly ["name"];
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the transfer recipient";
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly default: "mobile_money";
                                readonly readOnly: true;
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly national_identification: {
                                readonly description: "Sender government identification";
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                        readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                    };
                                    readonly identifier: {
                                        readonly type: "string";
                                        readonly minLength: 4;
                                        readonly maxLength: 40;
                                        readonly examples: readonly ["FLY5869798686"];
                                    };
                                    readonly expiration_date: {
                                        readonly type: "string";
                                        readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                        readonly examples: readonly ["2029-07-08"];
                                    };
                                };
                            };
                            readonly phone: {
                                readonly type: "object";
                                readonly description: "The customer's mobile number.";
                                readonly required: readonly ["number", "country_code"];
                                readonly properties: {
                                    readonly country_code: {
                                        readonly description: "ISO 3166 alpha-3 country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{1,3}$";
                                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                        readonly examples: readonly ["234"];
                                    };
                                    readonly number: {
                                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{7,10}$";
                                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                        readonly examples: readonly ["8001122334"];
                                    };
                                };
                            };
                            readonly date_of_birth: {
                                readonly type: "string";
                                readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "The Customer's email address.";
                                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                readonly "x-pattern-message": "must be an email format";
                                readonly examples: readonly ["cornelius@gmail.com"];
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "Customer address information.";
                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                readonly properties: {
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "The name of the city.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly country: {
                                        readonly description: "ISO2 country code";
                                        readonly type: "string";
                                        readonly pattern: "^[A-Z]{2}$";
                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                        readonly examples: readonly ["US"];
                                    };
                                    readonly line1: {
                                        readonly type: "string";
                                        readonly description: "The first line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["123 Main Street"];
                                    };
                                    readonly line2: {
                                        readonly type: "string";
                                        readonly description: "The second line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["Apt 4B"];
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["10001"];
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "The state or region.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                };
                            };
                            readonly mobile_money: {
                                readonly type: "object";
                                readonly required: readonly ["network", "country", "msisdn"];
                                readonly properties: {
                                    readonly network: {
                                        readonly description: "recipient network";
                                        readonly type: "string";
                                    };
                                    readonly country: {
                                        readonly description: "recipient country";
                                        readonly type: "string";
                                    };
                                    readonly msisdn: {
                                        readonly description: "recipient phone number";
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the transfer recipient";
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly default: "wallet";
                                readonly readOnly: true;
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                                readonly readOnly: true;
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly wallet: {
                                readonly type: "object";
                                readonly required: readonly ["provider", "identifier"];
                                readonly properties: {
                                    readonly provider: {
                                        readonly type: "string";
                                        readonly enum: readonly ["flutterwave"];
                                        readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported\n\n`flutterwave`";
                                    };
                                    readonly identifier: {
                                        readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                                        readonly type: "string";
                                        readonly examples: readonly ["00118468"];
                                    };
                                };
                            };
                        };
                    }, {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly description: "ID of the transfer recipient";
                                readonly type: "string";
                            };
                            readonly type: {
                                readonly type: "string";
                                readonly default: "cash_pickup";
                                readonly readOnly: true;
                            };
                            readonly name: {
                                readonly type: "object";
                                readonly description: "The Customer's full name.";
                                readonly properties: {
                                    readonly first: {
                                        readonly type: "string";
                                        readonly description: "The Customer's first name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["King"];
                                    };
                                    readonly middle: {
                                        readonly type: "string";
                                        readonly description: "The Customer's middle name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["Leo"];
                                    };
                                    readonly last: {
                                        readonly type: "string";
                                        readonly description: "The Customer's last name.";
                                        readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                        readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                        readonly examples: readonly ["LeBron"];
                                    };
                                };
                            };
                            readonly currency: {
                                readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                readonly type: "string";
                                readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                readonly examples: readonly ["NGN"];
                            };
                            readonly national_identification: {
                                readonly description: "Sender government identification";
                                readonly type: "object";
                                readonly properties: {
                                    readonly type: {
                                        readonly type: "string";
                                        readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                        readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                    };
                                    readonly identifier: {
                                        readonly type: "string";
                                        readonly minLength: 4;
                                        readonly maxLength: 40;
                                        readonly examples: readonly ["FLY5869798686"];
                                    };
                                    readonly expiration_date: {
                                        readonly type: "string";
                                        readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                        readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                        readonly examples: readonly ["2029-07-08"];
                                    };
                                };
                            };
                            readonly phone: {
                                readonly type: "object";
                                readonly description: "The customer's mobile number.";
                                readonly required: readonly ["number", "country_code"];
                                readonly properties: {
                                    readonly country_code: {
                                        readonly description: "ISO 3166 alpha-3 country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{1,3}$";
                                        readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                        readonly examples: readonly ["234"];
                                    };
                                    readonly number: {
                                        readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                        readonly type: "string";
                                        readonly pattern: "^[0-9]{7,10}$";
                                        readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                        readonly examples: readonly ["8001122334"];
                                    };
                                };
                            };
                            readonly date_of_birth: {
                                readonly type: "string";
                                readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                            };
                            readonly email: {
                                readonly type: "string";
                                readonly description: "The Customer's email address.";
                                readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                readonly "x-pattern-message": "must be an email format";
                                readonly examples: readonly ["hi@flutterwave.com"];
                            };
                            readonly address: {
                                readonly type: "object";
                                readonly description: "Customer address information.";
                                readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                readonly properties: {
                                    readonly city: {
                                        readonly type: "string";
                                        readonly description: "The name of the city.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                    readonly country: {
                                        readonly description: "ISO2 country code";
                                        readonly type: "string";
                                        readonly pattern: "^[A-Z]{2}$";
                                        readonly "x-pattern-message": "must be a valid country ISO2 format";
                                        readonly examples: readonly ["US"];
                                    };
                                    readonly line1: {
                                        readonly type: "string";
                                        readonly description: "The first line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["123 Main Street"];
                                    };
                                    readonly line2: {
                                        readonly type: "string";
                                        readonly description: "The second line of the Customer's address.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["Apt 4B"];
                                    };
                                    readonly postal_code: {
                                        readonly type: "string";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["10001"];
                                    };
                                    readonly state: {
                                        readonly type: "string";
                                        readonly description: "The state or region.";
                                        readonly pattern: "^.+$";
                                        readonly "x-pattern-message": "value must not be empty";
                                        readonly examples: readonly ["New York"];
                                    };
                                };
                            };
                            readonly cash_pickup: {
                                readonly type: "object";
                                readonly required: readonly ["network"];
                                readonly properties: {
                                    readonly network: {
                                        readonly description: "cashpickup network";
                                        readonly type: "string";
                                    };
                                };
                            };
                        };
                    }];
                    readonly discriminator: {
                        readonly propertyName: "type";
                        readonly mapping: {
                            readonly bank: "#/components/schemas/bank_recipient";
                            readonly mobile_money: "#/components/schemas/mobile_money_recipient";
                            readonly wallet: "#/components/schemas/wallet_recipient";
                            readonly cash_pickup: "#/components/schemas/cashpickup_recipient";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransfersRecipientsList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly next: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyNC0xMS0yN1QxMjozMjozNC42MjBa"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly previous: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyNC0xMS0yOVQwMjoxMDo1My45OTla"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "object";
                            readonly properties: {
                                readonly next: {
                                    readonly type: "string";
                                    readonly examples: readonly ["MjAyNC0xMS0yN1QxMjozMjozNC42MjBa"];
                                };
                                readonly previous: {
                                    readonly type: "string";
                                    readonly examples: readonly ["MjAyNC0xMS0yOVQwMjoxMDo1My45OTla"];
                                };
                                readonly limit: {
                                    readonly type: "integer";
                                    readonly format: "int64";
                                    readonly examples: readonly [10];
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total: {
                                    readonly type: "integer";
                                    readonly format: "int64";
                                    readonly examples: readonly [1000];
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly has_more_items: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly recipients: {
                            readonly type: "array";
                            readonly maxItems: 10;
                            readonly items: {
                                readonly oneOf: readonly [{
                                    readonly type: "object";
                                    readonly required: readonly ["bank"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly description: "ID of the transfer recipient";
                                            readonly type: "string";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "bank";
                                            readonly readOnly: true;
                                        };
                                        readonly name: {
                                            readonly type: "object";
                                            readonly description: "The Customer's full name.";
                                            readonly properties: {
                                                readonly first: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's first name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["King"];
                                                };
                                                readonly middle: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's middle name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["Leo"];
                                                };
                                                readonly last: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's last name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["LeBron"];
                                                };
                                            };
                                        };
                                        readonly currency: {
                                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                            readonly examples: readonly ["NGN"];
                                        };
                                        readonly national_identification: {
                                            readonly description: "Sender government identification";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                    readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                };
                                                readonly identifier: {
                                                    readonly type: "string";
                                                    readonly minLength: 4;
                                                    readonly maxLength: 40;
                                                    readonly examples: readonly ["FLY5869798686"];
                                                };
                                                readonly expiration_date: {
                                                    readonly type: "string";
                                                    readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                    readonly examples: readonly ["2029-07-08"];
                                                };
                                            };
                                        };
                                        readonly phone: {
                                            readonly type: "object";
                                            readonly description: "The customer's mobile number.";
                                            readonly required: readonly ["number", "country_code"];
                                            readonly properties: {
                                                readonly country_code: {
                                                    readonly description: "ISO 3166 alpha-3 country code.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[0-9]{1,3}$";
                                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                    readonly examples: readonly ["234"];
                                                };
                                                readonly number: {
                                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[0-9]{7,10}$";
                                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                    readonly examples: readonly ["8001122334"];
                                                };
                                            };
                                        };
                                        readonly date_of_birth: {
                                            readonly type: "string";
                                            readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                            readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The Customer's email address.";
                                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                            readonly "x-pattern-message": "must be an email format";
                                            readonly examples: readonly ["hi@flutterwave.com"];
                                        };
                                        readonly address: {
                                            readonly type: "object";
                                            readonly description: "Customer address information.";
                                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                            readonly properties: {
                                                readonly city: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the city.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["New York"];
                                                };
                                                readonly country: {
                                                    readonly description: "ISO2 country code";
                                                    readonly type: "string";
                                                    readonly pattern: "^[A-Z]{2}$";
                                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                    readonly examples: readonly ["US"];
                                                };
                                                readonly line1: {
                                                    readonly type: "string";
                                                    readonly description: "The first line of the Customer's address.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["123 Main Street"];
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                    readonly description: "The second line of the Customer's address.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["Apt 4B"];
                                                };
                                                readonly postal_code: {
                                                    readonly type: "string";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["10001"];
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                    readonly description: "The state or region.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["New York"];
                                                };
                                            };
                                        };
                                        readonly bank: {
                                            readonly type: "object";
                                            readonly required: readonly ["account_number", "code"];
                                            readonly properties: {
                                                readonly account_number: {
                                                    readonly description: "The Recipient's account number.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[a-zA-Z0-9]*$";
                                                };
                                                readonly account_type: {
                                                    readonly description: "The Recipient's account type.\n\n`checking` `savings` `individual` `corporate`";
                                                    readonly type: "string";
                                                    readonly enum: readonly ["checking", "savings", "individual", "corporate"];
                                                };
                                                readonly code: {
                                                    readonly description: "The Recipient's bank code.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[a-zA-Z0-9]*$";
                                                };
                                                readonly branch: {
                                                    readonly description: "The Recipient's bank branch.";
                                                    readonly type: "string";
                                                };
                                                readonly name: {
                                                    readonly description: "The Recipient's bank name.";
                                                    readonly type: "string";
                                                };
                                                readonly routing_number: {
                                                    readonly description: "The Recipient bank routing number.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[a-zA-Z0-9]*$";
                                                };
                                                readonly swift_code: {
                                                    readonly description: "The Recipient bank swift code.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[a-zA-Z0-9]*$";
                                                };
                                                readonly sort_code: {
                                                    readonly description: "The Recipient bank sort code.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[a-zA-Z0-9]*$";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly required: readonly ["name"];
                                    readonly properties: {
                                        readonly id: {
                                            readonly description: "ID of the transfer recipient";
                                            readonly type: "string";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "mobile_money";
                                            readonly readOnly: true;
                                        };
                                        readonly name: {
                                            readonly type: "object";
                                            readonly description: "The Customer's full name.";
                                            readonly properties: {
                                                readonly first: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's first name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["King"];
                                                };
                                                readonly middle: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's middle name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["Leo"];
                                                };
                                                readonly last: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's last name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["LeBron"];
                                                };
                                            };
                                        };
                                        readonly currency: {
                                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                            readonly examples: readonly ["NGN"];
                                        };
                                        readonly national_identification: {
                                            readonly description: "Sender government identification";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                    readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                };
                                                readonly identifier: {
                                                    readonly type: "string";
                                                    readonly minLength: 4;
                                                    readonly maxLength: 40;
                                                    readonly examples: readonly ["FLY5869798686"];
                                                };
                                                readonly expiration_date: {
                                                    readonly type: "string";
                                                    readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                    readonly examples: readonly ["2029-07-08"];
                                                };
                                            };
                                        };
                                        readonly phone: {
                                            readonly type: "object";
                                            readonly description: "The customer's mobile number.";
                                            readonly required: readonly ["number", "country_code"];
                                            readonly properties: {
                                                readonly country_code: {
                                                    readonly description: "ISO 3166 alpha-3 country code.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[0-9]{1,3}$";
                                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                    readonly examples: readonly ["234"];
                                                };
                                                readonly number: {
                                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[0-9]{7,10}$";
                                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                    readonly examples: readonly ["8001122334"];
                                                };
                                            };
                                        };
                                        readonly date_of_birth: {
                                            readonly type: "string";
                                            readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                            readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The Customer's email address.";
                                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                            readonly "x-pattern-message": "must be an email format";
                                            readonly examples: readonly ["cornelius@gmail.com"];
                                        };
                                        readonly address: {
                                            readonly type: "object";
                                            readonly description: "Customer address information.";
                                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                            readonly properties: {
                                                readonly city: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the city.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["New York"];
                                                };
                                                readonly country: {
                                                    readonly description: "ISO2 country code";
                                                    readonly type: "string";
                                                    readonly pattern: "^[A-Z]{2}$";
                                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                    readonly examples: readonly ["US"];
                                                };
                                                readonly line1: {
                                                    readonly type: "string";
                                                    readonly description: "The first line of the Customer's address.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["123 Main Street"];
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                    readonly description: "The second line of the Customer's address.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["Apt 4B"];
                                                };
                                                readonly postal_code: {
                                                    readonly type: "string";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["10001"];
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                    readonly description: "The state or region.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["New York"];
                                                };
                                            };
                                        };
                                        readonly mobile_money: {
                                            readonly type: "object";
                                            readonly required: readonly ["network", "country", "msisdn"];
                                            readonly properties: {
                                                readonly network: {
                                                    readonly description: "recipient network";
                                                    readonly type: "string";
                                                };
                                                readonly country: {
                                                    readonly description: "recipient country";
                                                    readonly type: "string";
                                                };
                                                readonly msisdn: {
                                                    readonly description: "recipient phone number";
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly description: "ID of the transfer recipient";
                                            readonly type: "string";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "wallet";
                                            readonly readOnly: true;
                                        };
                                        readonly name: {
                                            readonly type: "object";
                                            readonly description: "The Customer's full name.";
                                            readonly properties: {
                                                readonly first: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's first name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["King"];
                                                };
                                                readonly middle: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's middle name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["Leo"];
                                                };
                                                readonly last: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's last name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["LeBron"];
                                                };
                                            };
                                            readonly readOnly: true;
                                        };
                                        readonly currency: {
                                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                            readonly examples: readonly ["NGN"];
                                        };
                                        readonly wallet: {
                                            readonly type: "object";
                                            readonly required: readonly ["provider", "identifier"];
                                            readonly properties: {
                                                readonly provider: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["flutterwave"];
                                                    readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported\n\n`flutterwave`";
                                                };
                                                readonly identifier: {
                                                    readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                                                    readonly type: "string";
                                                    readonly examples: readonly ["00118468"];
                                                };
                                            };
                                        };
                                    };
                                }, {
                                    readonly type: "object";
                                    readonly properties: {
                                        readonly id: {
                                            readonly description: "ID of the transfer recipient";
                                            readonly type: "string";
                                        };
                                        readonly type: {
                                            readonly type: "string";
                                            readonly default: "cash_pickup";
                                            readonly readOnly: true;
                                        };
                                        readonly name: {
                                            readonly type: "object";
                                            readonly description: "The Customer's full name.";
                                            readonly properties: {
                                                readonly first: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's first name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["King"];
                                                };
                                                readonly middle: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's middle name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["Leo"];
                                                };
                                                readonly last: {
                                                    readonly type: "string";
                                                    readonly description: "The Customer's last name.";
                                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                    readonly examples: readonly ["LeBron"];
                                                };
                                            };
                                        };
                                        readonly currency: {
                                            readonly description: "ISO 4217 currency code.\n\n`AED` `AFN` `ALL` `AMD` `ANG` `AOA` `AQD` `ARS` `AUD` `AZN` `BAM` `BBD` `BDT` `BGN` `BHD` `BIF` `BMD` `BND` `BOB` `BRL` `BSD` `BWP` `BYR` `BZD` `CAD` `CDF` `CHF` `CLP` `CNY` `COP` `CRC` `CUP` `CVE` `CYP` `CZK` `DJF` `DKK` `DOP` `DZD` `ECS` `EEK` `EGP` `ETB` `EUR` `FJD` `FKP` `GBP` `GEL` `GGP` `GHS` `GIP` `GMD` `GNF` `GTQ` `GYD` `HKD` `HNL` `HRK` `HTG` `HUF` `IDR` `ILS` `INR` `IQD` `IRR` `ISK` `JMD` `JOD` `JPY` `KES` `KGS` `KHR` `KMF` `KPW` `KRW` `KWD` `KYD` `KZT` `LAK` `LBP` `LKR` `LRD` `LSL` `LTL` `LVL` `LYD` `MAD` `MDL` `MGA` `MKD` `MMK` `MNT` `MOP` `MRO` `MTL` `MUR` `MVR` `MWK` `MXN` `MYR` `MZN` `NAD` `NGN` `NIO` `NOK` `NPR` `NZD` `OMR` `PAB` `PEN` `PGK` `PHP` `PKR` `PLN` `PYG` `QAR` `RON` `RSD` `RUB` `RWF` `SAR` `SBD` `SCR` `SDG` `SEK` `SGD` `SKK` `SLL` `SOS` `SRD` `STD` `SVC` `SYP` `SZL` `THB` `TJS` `TMT` `TND` `TOP` `TRY` `TTD` `TWD` `TZS` `UAH` `UGX` `USD` `UYU` `UZS` `VEF` `VND` `VUV` `XAF` `XCD` `XOF` `XPF` `YER` `ZAR` `ZMK` `ZWD` `ZMW`";
                                            readonly type: "string";
                                            readonly enum: readonly ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "AQD", "ARS", "AUD", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BRL", "BSD", "BWP", "BYR", "BZD", "CAD", "CDF", "CHF", "CLP", "CNY", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "ECS", "EEK", "EGP", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SKK", "SLL", "SOS", "SRD", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "UYU", "UZS", "VEF", "VND", "VUV", "XAF", "XCD", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZWD", "ZMW"];
                                            readonly examples: readonly ["NGN"];
                                        };
                                        readonly national_identification: {
                                            readonly description: "Sender government identification";
                                            readonly type: "object";
                                            readonly properties: {
                                                readonly type: {
                                                    readonly type: "string";
                                                    readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                    readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                                };
                                                readonly identifier: {
                                                    readonly type: "string";
                                                    readonly minLength: 4;
                                                    readonly maxLength: 40;
                                                    readonly examples: readonly ["FLY5869798686"];
                                                };
                                                readonly expiration_date: {
                                                    readonly type: "string";
                                                    readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                    readonly examples: readonly ["2029-07-08"];
                                                };
                                            };
                                        };
                                        readonly phone: {
                                            readonly type: "object";
                                            readonly description: "The customer's mobile number.";
                                            readonly required: readonly ["number", "country_code"];
                                            readonly properties: {
                                                readonly country_code: {
                                                    readonly description: "ISO 3166 alpha-3 country code.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[0-9]{1,3}$";
                                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                    readonly examples: readonly ["234"];
                                                };
                                                readonly number: {
                                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                    readonly type: "string";
                                                    readonly pattern: "^[0-9]{7,10}$";
                                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                    readonly examples: readonly ["8001122334"];
                                                };
                                            };
                                        };
                                        readonly date_of_birth: {
                                            readonly type: "string";
                                            readonly description: "The customer's birthdate in ISO 8601 (YYYY-MM-DD) format.";
                                            readonly pattern: "^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$";
                                            readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                        };
                                        readonly email: {
                                            readonly type: "string";
                                            readonly description: "The Customer's email address.";
                                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                            readonly "x-pattern-message": "must be an email format";
                                            readonly examples: readonly ["hi@flutterwave.com"];
                                        };
                                        readonly address: {
                                            readonly type: "object";
                                            readonly description: "Customer address information.";
                                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                            readonly properties: {
                                                readonly city: {
                                                    readonly type: "string";
                                                    readonly description: "The name of the city.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["New York"];
                                                };
                                                readonly country: {
                                                    readonly description: "ISO2 country code";
                                                    readonly type: "string";
                                                    readonly pattern: "^[A-Z]{2}$";
                                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                    readonly examples: readonly ["US"];
                                                };
                                                readonly line1: {
                                                    readonly type: "string";
                                                    readonly description: "The first line of the Customer's address.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["123 Main Street"];
                                                };
                                                readonly line2: {
                                                    readonly type: "string";
                                                    readonly description: "The second line of the Customer's address.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["Apt 4B"];
                                                };
                                                readonly postal_code: {
                                                    readonly type: "string";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["10001"];
                                                };
                                                readonly state: {
                                                    readonly type: "string";
                                                    readonly description: "The state or region.";
                                                    readonly pattern: "^.+$";
                                                    readonly "x-pattern-message": "value must not be empty";
                                                    readonly examples: readonly ["New York"];
                                                };
                                            };
                                        };
                                        readonly cash_pickup: {
                                            readonly type: "object";
                                            readonly required: readonly ["network"];
                                            readonly properties: {
                                                readonly network: {
                                                    readonly description: "cashpickup network";
                                                    readonly type: "string";
                                                };
                                            };
                                        };
                                    };
                                }];
                                readonly discriminator: {
                                    readonly propertyName: "type";
                                    readonly mapping: {
                                        readonly bank: "#/components/schemas/bank_recipient";
                                        readonly mobile_money: "#/components/schemas/mobile_money_recipient";
                                        readonly wallet: "#/components/schemas/wallet_recipient";
                                        readonly cash_pickup: "#/components/schemas/cashpickup_recipient";
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransfersSendersCreate: {
    readonly body: {
        readonly oneOf: readonly [{
            readonly type: "object";
            readonly description: "Sender information for GBP bank transfers.";
            readonly required: readonly ["name", "email", "address", "phone"];
            readonly properties: {
                readonly name: {
                    readonly description: "The Sender's name.";
                    readonly type: "object";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly email: {
                    readonly description: "The Sender's email address";
                    readonly type: "string";
                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                    readonly "x-pattern-message": "must be an email format";
                    readonly examples: readonly ["cornelius@gmail.com"];
                };
                readonly address: {
                    readonly description: "The Sender's residential address";
                    readonly type: "object";
                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                    readonly properties: {
                        readonly city: {
                            readonly type: "string";
                            readonly description: "The name of the city.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly description: "ISO2 country code";
                            readonly type: "string";
                            readonly pattern: "^[A-Z]{2}$";
                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                            readonly examples: readonly ["US"];
                        };
                        readonly line1: {
                            readonly type: "string";
                            readonly description: "The first line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["123 Main Street"];
                        };
                        readonly line2: {
                            readonly type: "string";
                            readonly description: "The second line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["Apt 4B"];
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["10001"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "The state or region.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                    };
                };
                readonly phone: {
                    readonly description: "The Sender's phone number";
                    readonly type: "object";
                    readonly required: readonly ["number", "country_code"];
                    readonly properties: {
                        readonly country_code: {
                            readonly description: "ISO 3166 alpha-3 country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{1,3}$";
                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                            readonly examples: readonly ["234"];
                        };
                        readonly number: {
                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{7,10}$";
                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                            readonly examples: readonly ["8001122334"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank_gbp";
                    readonly readOnly: true;
                };
            };
        }, {
            readonly type: "object";
            readonly description: "Sender information for EUR bank transfers.";
            readonly required: readonly ["name", "email", "address", "phone"];
            readonly properties: {
                readonly name: {
                    readonly description: "The Sender's name.";
                    readonly type: "object";
                    readonly required: readonly ["first", "last"];
                    readonly properties: {
                        readonly first: {
                            readonly type: "string";
                            readonly description: "The Customer's first name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["King"];
                        };
                        readonly middle: {
                            readonly type: "string";
                            readonly description: "The Customer's middle name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["Leo"];
                        };
                        readonly last: {
                            readonly type: "string";
                            readonly description: "The Customer's last name.";
                            readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                            readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                            readonly examples: readonly ["LeBron"];
                        };
                    };
                };
                readonly email: {
                    readonly description: "The Sender's email address";
                    readonly type: "string";
                    readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                    readonly "x-pattern-message": "must be an email format";
                    readonly examples: readonly ["cornelius@gmail.com"];
                };
                readonly address: {
                    readonly description: "The Sender's residential address";
                    readonly type: "object";
                    readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                    readonly properties: {
                        readonly city: {
                            readonly type: "string";
                            readonly description: "The name of the city.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                        readonly country: {
                            readonly description: "ISO2 country code";
                            readonly type: "string";
                            readonly pattern: "^[A-Z]{2}$";
                            readonly "x-pattern-message": "must be a valid country ISO2 format";
                            readonly examples: readonly ["US"];
                        };
                        readonly line1: {
                            readonly type: "string";
                            readonly description: "The first line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["123 Main Street"];
                        };
                        readonly line2: {
                            readonly type: "string";
                            readonly description: "The second line of the Customer's address.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["Apt 4B"];
                        };
                        readonly postal_code: {
                            readonly type: "string";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["10001"];
                        };
                        readonly state: {
                            readonly type: "string";
                            readonly description: "The state or region.";
                            readonly pattern: "^.+$";
                            readonly "x-pattern-message": "value must not be empty";
                            readonly examples: readonly ["New York"];
                        };
                    };
                };
                readonly phone: {
                    readonly description: "The Sender's phone number";
                    readonly type: "object";
                    readonly required: readonly ["number", "country_code"];
                    readonly properties: {
                        readonly country_code: {
                            readonly description: "ISO 3166 alpha-3 country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{1,3}$";
                            readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                            readonly examples: readonly ["234"];
                        };
                        readonly number: {
                            readonly description: "Unformatted 7-10-digit phone number without the country code.";
                            readonly type: "string";
                            readonly pattern: "^[0-9]{7,10}$";
                            readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                            readonly examples: readonly ["8001122334"];
                        };
                    };
                };
                readonly type: {
                    readonly type: "string";
                    readonly default: "bank_eur";
                    readonly readOnly: true;
                };
            };
        }];
        readonly discriminator: {
            readonly propertyName: "type";
            readonly mapping: {
                readonly bank_gbp: "#/components/schemas/bank_gbp_sender_in";
                readonly bank_eur: "#/components/schemas/bank_eur_sender_in";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the transfer sender";
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "object";
                            readonly description: "The Sender's full name.";
                            readonly properties: {
                                readonly first: {
                                    readonly type: "string";
                                    readonly description: "The Customer's first name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["King"];
                                };
                                readonly middle: {
                                    readonly type: "string";
                                    readonly description: "The Customer's middle name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["Leo"];
                                };
                                readonly last: {
                                    readonly type: "string";
                                    readonly description: "The Customer's last name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["LeBron"];
                                };
                            };
                        };
                        readonly national_identification: {
                            readonly description: "The Sender's government identification.";
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                    readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                };
                                readonly identifier: {
                                    readonly type: "string";
                                    readonly minLength: 4;
                                    readonly maxLength: 40;
                                    readonly examples: readonly ["FLY5869798686"];
                                };
                                readonly expiration_date: {
                                    readonly type: "string";
                                    readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    readonly examples: readonly ["2029-07-08"];
                                };
                            };
                        };
                        readonly phone: {
                            readonly type: "object";
                            readonly description: "The Sender's mobile number.";
                            readonly required: readonly ["number", "country_code"];
                            readonly properties: {
                                readonly country_code: {
                                    readonly description: "ISO 3166 alpha-3 country code.";
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{1,3}$";
                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                    readonly examples: readonly ["234"];
                                };
                                readonly number: {
                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{7,10}$";
                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                    readonly examples: readonly ["8001122334"];
                                };
                            };
                        };
                        readonly date_of_birth: {
                            readonly description: "The Sender's date of birth.";
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The Sender's email address.";
                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                            readonly "x-pattern-message": "must be an email format";
                            readonly examples: readonly ["cornelius@gmail.com"];
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly description: "The Sender's residential address.";
                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                            readonly properties: {
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "The name of the city.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                                readonly country: {
                                    readonly description: "ISO2 country code";
                                    readonly type: "string";
                                    readonly pattern: "^[A-Z]{2}$";
                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                    readonly examples: readonly ["US"];
                                };
                                readonly line1: {
                                    readonly type: "string";
                                    readonly description: "The first line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["123 Main Street"];
                                };
                                readonly line2: {
                                    readonly type: "string";
                                    readonly description: "The second line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["Apt 4B"];
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["10001"];
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "The state or region.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransfersSendersDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the transfer sender";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransfersSendersGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the transfer sender";
                    readonly type: "string";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly description: "ID of the transfer sender";
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "object";
                            readonly description: "The Sender's full name.";
                            readonly properties: {
                                readonly first: {
                                    readonly type: "string";
                                    readonly description: "The Customer's first name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["King"];
                                };
                                readonly middle: {
                                    readonly type: "string";
                                    readonly description: "The Customer's middle name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["Leo"];
                                };
                                readonly last: {
                                    readonly type: "string";
                                    readonly description: "The Customer's last name.";
                                    readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                    readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                    readonly examples: readonly ["LeBron"];
                                };
                            };
                        };
                        readonly national_identification: {
                            readonly description: "The Sender's government identification.";
                            readonly type: "object";
                            readonly properties: {
                                readonly type: {
                                    readonly type: "string";
                                    readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                    readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                };
                                readonly identifier: {
                                    readonly type: "string";
                                    readonly minLength: 4;
                                    readonly maxLength: 40;
                                    readonly examples: readonly ["FLY5869798686"];
                                };
                                readonly expiration_date: {
                                    readonly type: "string";
                                    readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                    readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                    readonly examples: readonly ["2029-07-08"];
                                };
                            };
                        };
                        readonly phone: {
                            readonly type: "object";
                            readonly description: "The Sender's mobile number.";
                            readonly required: readonly ["number", "country_code"];
                            readonly properties: {
                                readonly country_code: {
                                    readonly description: "ISO 3166 alpha-3 country code.";
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{1,3}$";
                                    readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                    readonly examples: readonly ["234"];
                                };
                                readonly number: {
                                    readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                    readonly type: "string";
                                    readonly pattern: "^[0-9]{7,10}$";
                                    readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                    readonly examples: readonly ["8001122334"];
                                };
                            };
                        };
                        readonly date_of_birth: {
                            readonly description: "The Sender's date of birth.";
                            readonly type: "string";
                        };
                        readonly email: {
                            readonly type: "string";
                            readonly description: "The Sender's email address.";
                            readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                            readonly "x-pattern-message": "must be an email format";
                            readonly examples: readonly ["cornelius@gmail.com"];
                        };
                        readonly address: {
                            readonly type: "object";
                            readonly description: "The Sender's residential address.";
                            readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                            readonly properties: {
                                readonly city: {
                                    readonly type: "string";
                                    readonly description: "The name of the city.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                                readonly country: {
                                    readonly description: "ISO2 country code";
                                    readonly type: "string";
                                    readonly pattern: "^[A-Z]{2}$";
                                    readonly "x-pattern-message": "must be a valid country ISO2 format";
                                    readonly examples: readonly ["US"];
                                };
                                readonly line1: {
                                    readonly type: "string";
                                    readonly description: "The first line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["123 Main Street"];
                                };
                                readonly line2: {
                                    readonly type: "string";
                                    readonly description: "The second line of the Customer's address.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["Apt 4B"];
                                };
                                readonly postal_code: {
                                    readonly type: "string";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["10001"];
                                };
                                readonly state: {
                                    readonly type: "string";
                                    readonly description: "The state or region.";
                                    readonly pattern: "^.+$";
                                    readonly "x-pattern-message": "value must not be empty";
                                    readonly examples: readonly ["New York"];
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const TransfersSendersList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly next: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyNC0xMS0yN1QxMjozMjozNC42MjBa"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly previous: {
                    readonly type: "string";
                    readonly examples: readonly ["MjAyNC0xMS0yOVQwMjoxMDo1My45OTla"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "object";
                            readonly properties: {
                                readonly next: {
                                    readonly type: "string";
                                    readonly examples: readonly ["MjAyNC0xMS0yN1QxMjozMjozNC42MjBa"];
                                };
                                readonly previous: {
                                    readonly type: "string";
                                    readonly examples: readonly ["MjAyNC0xMS0yOVQwMjoxMDo1My45OTla"];
                                };
                                readonly limit: {
                                    readonly type: "integer";
                                    readonly format: "int64";
                                    readonly examples: readonly [10];
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total: {
                                    readonly type: "integer";
                                    readonly format: "int64";
                                    readonly examples: readonly [1000];
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly has_more_items: {
                                    readonly type: "boolean";
                                };
                            };
                        };
                        readonly senders: {
                            readonly type: "array";
                            readonly maxItems: 10;
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly id: {
                                        readonly description: "ID of the transfer sender";
                                        readonly type: "string";
                                    };
                                    readonly name: {
                                        readonly type: "object";
                                        readonly description: "The Sender's full name.";
                                        readonly properties: {
                                            readonly first: {
                                                readonly type: "string";
                                                readonly description: "The Customer's first name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["King"];
                                            };
                                            readonly middle: {
                                                readonly type: "string";
                                                readonly description: "The Customer's middle name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["Leo"];
                                            };
                                            readonly last: {
                                                readonly type: "string";
                                                readonly description: "The Customer's last name.";
                                                readonly pattern: "^(?![ ,.'-]*$)[A-Za-z ,.'-]{2,50}$";
                                                readonly "x-pattern-message": "must be between 2 and 50 characters long, cannot be empty, only spaces, or only symbols, and can only contain letters, spaces, commas, periods, apostrophes, or hyphens.";
                                                readonly examples: readonly ["LeBron"];
                                            };
                                        };
                                    };
                                    readonly national_identification: {
                                        readonly description: "The Sender's government identification.";
                                        readonly type: "object";
                                        readonly properties: {
                                            readonly type: {
                                                readonly type: "string";
                                                readonly enum: readonly ["PASSPORT", "DRIVERS_LICENSE", "NATIONAL_ID"];
                                                readonly description: "`PASSPORT` `DRIVERS_LICENSE` `NATIONAL_ID`";
                                            };
                                            readonly identifier: {
                                                readonly type: "string";
                                                readonly minLength: 4;
                                                readonly maxLength: 40;
                                                readonly examples: readonly ["FLY5869798686"];
                                            };
                                            readonly expiration_date: {
                                                readonly type: "string";
                                                readonly pattern: "^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$";
                                                readonly "x-pattern-message": "must match YYYY-MM-DD format";
                                                readonly examples: readonly ["2029-07-08"];
                                            };
                                        };
                                    };
                                    readonly phone: {
                                        readonly type: "object";
                                        readonly description: "The Sender's mobile number.";
                                        readonly required: readonly ["number", "country_code"];
                                        readonly properties: {
                                            readonly country_code: {
                                                readonly description: "ISO 3166 alpha-3 country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{1,3}$";
                                                readonly "x-pattern-message": "must be a valid ISO 3166 alpha-3 country code";
                                                readonly examples: readonly ["234"];
                                            };
                                            readonly number: {
                                                readonly description: "Unformatted 7-10-digit phone number without the country code.";
                                                readonly type: "string";
                                                readonly pattern: "^[0-9]{7,10}$";
                                                readonly "x-pattern-message": "must be a digit containing between 7 and 10 characters";
                                                readonly examples: readonly ["8001122334"];
                                            };
                                        };
                                    };
                                    readonly date_of_birth: {
                                        readonly description: "The Sender's date of birth.";
                                        readonly type: "string";
                                    };
                                    readonly email: {
                                        readonly type: "string";
                                        readonly description: "The Sender's email address.";
                                        readonly pattern: "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$";
                                        readonly "x-pattern-message": "must be an email format";
                                        readonly examples: readonly ["cornelius@gmail.com"];
                                    };
                                    readonly address: {
                                        readonly type: "object";
                                        readonly description: "The Sender's residential address.";
                                        readonly required: readonly ["line1", "city", "state", "country", "postal_code"];
                                        readonly properties: {
                                            readonly city: {
                                                readonly type: "string";
                                                readonly description: "The name of the city.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                            readonly country: {
                                                readonly description: "ISO2 country code";
                                                readonly type: "string";
                                                readonly pattern: "^[A-Z]{2}$";
                                                readonly "x-pattern-message": "must be a valid country ISO2 format";
                                                readonly examples: readonly ["US"];
                                            };
                                            readonly line1: {
                                                readonly type: "string";
                                                readonly description: "The first line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["123 Main Street"];
                                            };
                                            readonly line2: {
                                                readonly type: "string";
                                                readonly description: "The second line of the Customer's address.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["Apt 4B"];
                                            };
                                            readonly postal_code: {
                                                readonly type: "string";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["10001"];
                                            };
                                            readonly state: {
                                                readonly type: "string";
                                                readonly description: "The state or region.";
                                                readonly pattern: "^.+$";
                                                readonly "x-pattern-message": "value must not be empty";
                                                readonly examples: readonly ["New York"];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const VirtualAccountGet: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the virtual account.";
                    readonly type: "string";
                    readonly examples: readonly ["va_EFAHCzELJb"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "The virtual account ID.";
                            readonly examples: readonly [""];
                        };
                        readonly amount: {
                            readonly type: "number";
                            readonly description: "The amount to be collected.";
                            readonly format: "decimal";
                            readonly examples: readonly [1000];
                        };
                        readonly account_number: {
                            readonly type: "string";
                            readonly description: "The bank account number.";
                            readonly examples: readonly ["7824822527"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly examples: readonly ["htuy68787hvhyff454"];
                        };
                        readonly account_bank_name: {
                            readonly type: "string";
                            readonly description: "The name of the bank.";
                            readonly examples: readonly ["WEMA BANK"];
                        };
                        readonly account_type: {
                            readonly type: "string";
                            readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                            readonly enum: readonly ["static", "dynamic"];
                            readonly examples: readonly ["static"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the virtual account.\n\n`active` `inactive`";
                            readonly enum: readonly ["active", "inactive"];
                        };
                        readonly account_expiration_datetime: {
                            readonly type: "string,";
                            readonly format: "date-time";
                            readonly description: "The expiry date and time of the virtual account.";
                            readonly examples: readonly ["2025-12-03T13:54:21.546559974Z"];
                        };
                        readonly note: {
                            readonly type: "string";
                            readonly description: "A message providing instructions for the bank transfer, which includes the narration provided in the request.";
                            readonly examples: readonly ["Please make a bank transfer to James Burgers"];
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "The ID of the customer.";
                            readonly examples: readonly ["cus_J0PvwvJB2n"];
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "The date and time when the virtual account was created..";
                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly customer_reference: {
                            readonly type: "string";
                            readonly description: "This is the reference the customer sends as narration when making the bank transfer";
                            readonly examples: readonly ["AEGP2345"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly description: "ISO 4217 currency code.";
                            readonly examples: readonly ["NGN"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const VirtualAccountsList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly to: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-05-21T10:48:18Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The end date and time for a period. This parameter is used in conjunction with the 'from' parameter to define a time range. The value should be in **ISO 8601 format**.";
                };
                readonly from: {
                    readonly type: "string";
                    readonly format: "date-time";
                    readonly examples: readonly ["2025-04-21T10:55:16Z"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The start date and time for a period. This parameter is used in conjunction with the 'to' parameter to define a time range. The value should be in ISO 8601 format.";
                };
                readonly page: {
                    readonly type: "integer";
                    readonly minimum: 1;
                    readonly default: 1;
                    readonly examples: readonly [1];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "The page of the data to retrieve. The most recent data entry is on page 1.";
                };
                readonly size: {
                    readonly type: "integer";
                    readonly minimum: 10;
                    readonly maximum: 50;
                    readonly default: 10;
                    readonly examples: readonly [10];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "Length of data returned. Defaults to 10.";
                };
                readonly reference: {
                    readonly type: "string";
                    readonly examples: readonly ["ashsfGHhdjsdXzGThakTTysDsw"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                };
            };
            readonly required: readonly [];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 10;
                    readonly items: {
                        readonly type: "object";
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "The virtual account ID.";
                                readonly examples: readonly [""];
                            };
                            readonly amount: {
                                readonly type: "number";
                                readonly description: "The amount to be collected.";
                                readonly format: "decimal";
                                readonly examples: readonly [1000];
                            };
                            readonly account_number: {
                                readonly type: "string";
                                readonly description: "The bank account number.";
                                readonly examples: readonly ["7824822527"];
                            };
                            readonly reference: {
                                readonly type: "string";
                                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                                readonly examples: readonly ["htuy68787hvhyff454"];
                            };
                            readonly account_bank_name: {
                                readonly type: "string";
                                readonly description: "The name of the bank.";
                                readonly examples: readonly ["WEMA BANK"];
                            };
                            readonly account_type: {
                                readonly type: "string";
                                readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                                readonly enum: readonly ["static", "dynamic"];
                                readonly examples: readonly ["static"];
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "The status of the virtual account.\n\n`active` `inactive`";
                                readonly enum: readonly ["active", "inactive"];
                            };
                            readonly account_expiration_datetime: {
                                readonly type: "string,";
                                readonly format: "date-time";
                                readonly description: "The expiry date and time of the virtual account.";
                                readonly examples: readonly ["2025-12-03T13:54:21.546559974Z"];
                            };
                            readonly note: {
                                readonly type: "string";
                                readonly description: "A message providing instructions for the bank transfer, which includes the narration provided in the request.";
                                readonly examples: readonly ["Please make a bank transfer to James Burgers"];
                            };
                            readonly customer_id: {
                                readonly type: "string";
                                readonly description: "The ID of the customer.";
                                readonly examples: readonly ["cus_J0PvwvJB2n"];
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly format: "date-time";
                                readonly description: "The date and time when the virtual account was created..";
                                readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly customer_reference: {
                                readonly type: "string";
                                readonly description: "This is the reference the customer sends as narration when making the bank transfer";
                                readonly examples: readonly ["AEGP2345"];
                            };
                            readonly currency: {
                                readonly type: "string";
                                readonly description: "ISO 4217 currency code.";
                                readonly examples: readonly ["NGN"];
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const VirtualAccountsPost: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["customer_id", "amount", "reference", "currency", "account_type"];
        readonly properties: {
            readonly reference: {
                readonly type: "string";
                readonly pattern: "^[a-zA-Z0-9\\-]+$";
                readonly minLength: 6;
                readonly maxLength: 42;
                readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                readonly "x-pattern-message": "must be an alphanumeric string";
            };
            readonly customer_id: {
                readonly type: "string";
                readonly description: "The customer id";
                readonly examples: readonly ["cus_J0PvwvJB2n"];
            };
            readonly amount: {
                readonly type: "number";
                readonly description: "The amount to be collected";
                readonly format: "decimal";
                readonly examples: readonly [1000];
            };
            readonly expiry: {
                readonly type: "integer";
                readonly minimum: 60;
                readonly maximum: 31536000;
                readonly description: "The expiry time of the virtual account.";
                readonly examples: readonly [360];
            };
            readonly currency: {
                readonly description: "ISO 4217 currency code.";
                readonly enum: readonly ["NGN", "GHS", "EGP", "KES"];
            };
            readonly account_type: {
                readonly type: "string";
                readonly description: "The type of virtual account.";
                readonly enum: readonly ["static", "dynamic"];
                readonly examples: readonly ["static"];
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly narration: {
                readonly type: "string";
                readonly description: "This allows you specify the name shown when the account is resolved.";
                readonly examples: readonly ["James Burgers"];
            };
            readonly bvn: {
                readonly type: "string";
                readonly description: "This is the customer's Bank Verification Number.";
                readonly pattern: "^[1-9][0-9]{10}$";
                readonly "x-pattern-message": "bvn must be must be a positive or unsigned, non-zero number and must be 11 digits long";
                readonly examples: readonly ["12345678912"];
            };
            readonly nin: {
                readonly type: "string";
                readonly description: "This is the customer's National Identity Number.";
                readonly pattern: "^[1-9][0-9]{10}$";
                readonly "x-pattern-message": "nin must be a positive or unsigned, non-zero number and must be 11 digits long";
                readonly examples: readonly ["12345678912"];
            };
            readonly customer_account_number: {
                readonly type: "string";
                readonly description: "This is the bank account the transfer will originate from. required for EGP and KES";
                readonly examples: readonly ["123456789"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "201": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "The virtual account ID.";
                            readonly examples: readonly [""];
                        };
                        readonly amount: {
                            readonly type: "number";
                            readonly description: "The amount to be collected.";
                            readonly format: "decimal";
                            readonly examples: readonly [1000];
                        };
                        readonly account_number: {
                            readonly type: "string";
                            readonly description: "The bank account number.";
                            readonly examples: readonly ["7824822527"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly examples: readonly ["htuy68787hvhyff454"];
                        };
                        readonly account_bank_name: {
                            readonly type: "string";
                            readonly description: "The name of the bank.";
                            readonly examples: readonly ["WEMA BANK"];
                        };
                        readonly account_type: {
                            readonly type: "string";
                            readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                            readonly enum: readonly ["static", "dynamic"];
                            readonly examples: readonly ["static"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the virtual account.\n\n`active` `inactive`";
                            readonly enum: readonly ["active", "inactive"];
                        };
                        readonly account_expiration_datetime: {
                            readonly type: "string,";
                            readonly format: "date-time";
                            readonly description: "The expiry date and time of the virtual account.";
                            readonly examples: readonly ["2025-12-03T13:54:21.546559974Z"];
                        };
                        readonly note: {
                            readonly type: "string";
                            readonly description: "A message providing instructions for the bank transfer, which includes the narration provided in the request.";
                            readonly examples: readonly ["Please make a bank transfer to James Burgers"];
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "The ID of the customer.";
                            readonly examples: readonly ["cus_J0PvwvJB2n"];
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "The date and time when the virtual account was created..";
                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly customer_reference: {
                            readonly type: "string";
                            readonly description: "This is the reference the customer sends as narration when making the bank transfer";
                            readonly examples: readonly ["AEGP2345"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly description: "ISO 4217 currency code.";
                            readonly examples: readonly ["NGN"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const VirtualAccountsPut: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["action_type"];
        readonly properties: {
            readonly action_type: {
                readonly type: "string";
                readonly description: "The supported virtual account update actions.";
                readonly enum: readonly ["update_bvn", "update_status"];
                readonly examples: readonly ["update_bvn"];
            };
            readonly status: {
                readonly type: "string";
                readonly description: "The status of the virtual account.";
                readonly enum: readonly ["inactive"];
                readonly examples: readonly ["inactive"];
            };
            readonly bvn: {
                readonly type: "string";
                readonly description: "This is the customer's Bank Verification Number.";
                readonly pattern: "^[1-9][0-9]{10}$";
                readonly "x-pattern-message": "bvn must be exactly 11 characters long and a signed integer";
                readonly examples: readonly ["12345678912"];
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly description: "ID of the virtual account.";
                    readonly type: "string";
                    readonly examples: readonly ["va_EFAHCzELJb"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "The virtual account ID.";
                            readonly examples: readonly [""];
                        };
                        readonly amount: {
                            readonly type: "number";
                            readonly description: "The amount to be collected.";
                            readonly format: "decimal";
                            readonly examples: readonly [1000];
                        };
                        readonly account_number: {
                            readonly type: "string";
                            readonly description: "The bank account number.";
                            readonly examples: readonly ["7824822527"];
                        };
                        readonly reference: {
                            readonly type: "string";
                            readonly description: "A custom identifier to track the transaction, This must be unique across all your transactions.";
                            readonly examples: readonly ["htuy68787hvhyff454"];
                        };
                        readonly account_bank_name: {
                            readonly type: "string";
                            readonly description: "The name of the bank.";
                            readonly examples: readonly ["WEMA BANK"];
                        };
                        readonly account_type: {
                            readonly type: "string";
                            readonly description: "The type of virtual account.\n\n`static` `dynamic`";
                            readonly enum: readonly ["static", "dynamic"];
                            readonly examples: readonly ["static"];
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "The status of the virtual account.\n\n`active` `inactive`";
                            readonly enum: readonly ["active", "inactive"];
                        };
                        readonly account_expiration_datetime: {
                            readonly type: "string,";
                            readonly format: "date-time";
                            readonly description: "The expiry date and time of the virtual account.";
                            readonly examples: readonly ["2025-12-03T13:54:21.546559974Z"];
                        };
                        readonly note: {
                            readonly type: "string";
                            readonly description: "A message providing instructions for the bank transfer, which includes the narration provided in the request.";
                            readonly examples: readonly ["Please make a bank transfer to James Burgers"];
                        };
                        readonly customer_id: {
                            readonly type: "string";
                            readonly description: "The ID of the customer.";
                            readonly examples: readonly ["cus_J0PvwvJB2n"];
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly format: "date-time";
                            readonly description: "The date and time when the virtual account was created..";
                            readonly examples: readonly ["2024-12-03T13:54:21.546559974Z"];
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly customer_reference: {
                            readonly type: "string";
                            readonly description: "This is the reference the customer sends as narration when making the bank transfer";
                            readonly examples: readonly ["AEGP2345"];
                        };
                        readonly currency: {
                            readonly type: "string";
                            readonly description: "ISO 4217 currency code.";
                            readonly examples: readonly ["NGN"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const WalletAccountResolvePost: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["provider", "identifier"];
        readonly properties: {
            readonly provider: {
                readonly type: "string";
                readonly enum: readonly ["flutterwave"];
                readonly description: "Specifies the payment or service provider. Currently, only \"flutterwave\" is supported";
            };
            readonly identifier: {
                readonly description: "A unique identifier assigned to the merchant by the payment or service provider.";
                readonly type: "string";
                readonly examples: readonly ["00118468"];
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Scenario-Key": {
                    readonly type: "string";
                    readonly minimum: 1;
                    readonly maximum: 1000;
                    readonly examples: readonly ["scenario:auth_redirect"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "An optional scenario key that can be used to simulate specific behaviors or test different scenarios within the API. Providing this header allows you to trigger predefined responses or alter data based on the key's value, which can be useful for testing, development, or demonstrating specific functionalities. The key should be a string of 1 to 1000 characters.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly properties: {
                        readonly provider: {
                            readonly type: "string";
                        };
                        readonly identifier: {
                            readonly type: "string";
                        };
                        readonly name: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const WebhookEndpointsDelete: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "ID of the webhook endpoint";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const WebhookEndpointsList: {
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly additionalProperties: false;
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly meta: {
                    readonly type: "object";
                    readonly properties: {
                        readonly page_info: {
                            readonly type: "object";
                            readonly properties: {
                                readonly total: {
                                    readonly type: "integer";
                                    readonly description: "The total number of items available across all pages";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly current_page: {
                                    readonly type: "integer";
                                    readonly description: "The current page number being viewed";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                                readonly total_pages: {
                                    readonly type: "integer";
                                    readonly description: "The total number of pages required to display all items.";
                                    readonly format: "int64";
                                    readonly minimum: -9223372036854776000;
                                    readonly maximum: 9223372036854776000;
                                };
                            };
                        };
                    };
                };
                readonly data: {
                    readonly type: "array";
                    readonly maxItems: 50;
                    readonly items: {
                        readonly type: "object";
                        readonly required: readonly ["url", "secret"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of webhook endpoint";
                            };
                            readonly url: {
                                readonly type: "string";
                                readonly description: "Endpoint where webhooks would be sent";
                            };
                            readonly supported_event_types: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "Event types accepted by endpoint";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly enum: readonly ["enabled", "disabled"];
                                readonly description: "Status of webhook endpoint showing if it's allowed to receive webhooks\n\n`enabled` `disabled`";
                            };
                            readonly secret: {
                                readonly type: "string";
                                readonly minLength: 12;
                                readonly maxLength: 36;
                                readonly description: "Secret used in generating verification hash for webhook payloads sent to endpoint";
                            };
                            readonly meta: {
                                readonly type: "object";
                                readonly additionalProperties: {
                                    readonly type: "string";
                                };
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly description: "Description of the webhook endpoint";
                            };
                            readonly created_datetime: {
                                readonly type: "string";
                                readonly description: "The date and time when the webhook endpoint was created.";
                                readonly format: "date-time";
                            };
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const WebhookEndpointsPost: {
    readonly body: {
        readonly type: "object";
        readonly required: readonly ["url", "secret"];
        readonly properties: {
            readonly url: {
                readonly type: "string";
                readonly description: "Endpoint where webhooks would be sent";
            };
            readonly supported_event_types: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly description: "Event types accepted by endpoint";
            };
            readonly status: {
                readonly type: "string";
                readonly enum: readonly ["enabled", "disabled"];
                readonly description: "Status of webhook endpoint showing if it's allowed to receive webhooks";
            };
            readonly secret: {
                readonly type: "string";
                readonly minLength: 36;
                readonly maxLength: 72;
                readonly description: "Secret used in generating verification hash for webhook payloads sent to endpoint";
            };
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the webhook endpoint";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
                readonly "X-Idempotency-Key": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["req-5c0a2e8c-f3b9-4d1a-8e2f-0c1d2e3f4a5b"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to prevent duplicate requests. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly required: readonly ["url", "secret"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of webhook endpoint";
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "Endpoint where webhooks would be sent";
                        };
                        readonly supported_event_types: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "Event types accepted by endpoint";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["enabled", "disabled"];
                            readonly description: "Status of webhook endpoint showing if it's allowed to receive webhooks\n\n`enabled` `disabled`";
                        };
                        readonly secret: {
                            readonly type: "string";
                            readonly minLength: 12;
                            readonly maxLength: 36;
                            readonly description: "Secret used in generating verification hash for webhook payloads sent to endpoint";
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Description of the webhook endpoint";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The date and time when the webhook endpoint was created.";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
declare const WebhookEndpointsPut: {
    readonly body: {
        readonly type: "object";
        readonly properties: {
            readonly meta: {
                readonly type: "object";
                readonly additionalProperties: {
                    readonly type: "string";
                };
            };
            readonly url: {
                readonly type: "string";
                readonly description: "Endpoint where webhooks would be sent";
            };
            readonly supported_event_types: {
                readonly type: "array";
                readonly items: {
                    readonly type: "string";
                };
                readonly description: "Event types accepted by endpoint";
            };
            readonly status: {
                readonly type: "string";
                readonly enum: readonly ["enabled", "disabled"];
                readonly description: "Status of webhook endpoint showing if it's allowed to receive webhooks";
            };
            readonly secret: {
                readonly type: "string";
                readonly minLength: 36;
                readonly maxLength: 72;
                readonly description: "Secret used in generating verification hash for webhook payloads sent to endpoint";
            };
            readonly description: {
                readonly type: "string";
                readonly description: "Description of the webhook endpoint";
            };
        };
        readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
    };
    readonly metadata: {
        readonly allOf: readonly [{
            readonly type: "object";
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly description: "ID of the webhook endpoint";
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                };
            };
            readonly required: readonly ["id"];
        }, {
            readonly type: "object";
            readonly properties: {
                readonly "X-Trace-Id": {
                    readonly type: "string";
                    readonly minLength: 12;
                    readonly maxLength: 255;
                    readonly examples: readonly ["acb123e4-f567-4a8b-9c0d-1e2f3a4b5c6d"];
                    readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
                    readonly description: "A unique identifier to track this operation. It must be between 12 and 255 characters in length.";
                };
            };
            readonly required: readonly [];
        }];
    };
    readonly response: {
        readonly "200": {
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["success", "failed"];
                    readonly description: "`success` `failed`";
                };
                readonly message: {
                    readonly type: "string";
                };
                readonly data: {
                    readonly type: "object";
                    readonly required: readonly ["url", "secret"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of webhook endpoint";
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly description: "Endpoint where webhooks would be sent";
                        };
                        readonly supported_event_types: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "Event types accepted by endpoint";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly enum: readonly ["enabled", "disabled"];
                            readonly description: "Status of webhook endpoint showing if it's allowed to receive webhooks\n\n`enabled` `disabled`";
                        };
                        readonly secret: {
                            readonly type: "string";
                            readonly minLength: 12;
                            readonly maxLength: 36;
                            readonly description: "Secret used in generating verification hash for webhook payloads sent to endpoint";
                        };
                        readonly meta: {
                            readonly type: "object";
                            readonly additionalProperties: {
                                readonly type: "string";
                            };
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Description of the webhook endpoint";
                        };
                        readonly created_datetime: {
                            readonly type: "string";
                            readonly description: "The date and time when the webhook endpoint was created.";
                            readonly format: "date-time";
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "400": {
            readonly description: "Bad Request";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["REQUEST_NOT_VALID"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10400"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Request is not valid"];
                        };
                        readonly validation_errors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "object";
                                readonly properties: {
                                    readonly field_name: {
                                        readonly type: "string";
                                        readonly examples: readonly ["amount"];
                                    };
                                    readonly message: {
                                        readonly type: "string";
                                        readonly examples: readonly ["must not be null"];
                                    };
                                };
                            };
                        };
                    };
                    readonly description: "The request cannot be accepted and is malformed and/or missing required parameters.";
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "401": {
            readonly description: "Unauthorized";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "Invalid API key provided";
                    readonly examples: readonly ["UNAUTHORIZED"];
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["UNAUTHORIZED"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10401"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["unauthorized"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "403": {
            readonly description: "Forbidden";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "API key doesn't have permission to access this resource";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["FORBIDDEN"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10403"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Forbidden"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
        readonly "409": {
            readonly description: "Conflict";
            readonly type: "object";
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly enum: readonly ["failed"];
                    readonly description: "`failed`";
                };
                readonly message: {
                    readonly type: "string";
                    readonly description: "The request conflicts with another request";
                };
                readonly error: {
                    readonly type: "object";
                    readonly properties: {
                        readonly type: {
                            readonly type: "string";
                            readonly examples: readonly ["RESOURCE_CONFLICT"];
                        };
                        readonly code: {
                            readonly type: "string";
                            readonly examples: readonly ["10409"];
                        };
                        readonly message: {
                            readonly type: "string";
                            readonly examples: readonly ["Resource conflict"];
                        };
                    };
                };
            };
            readonly $schema: "https://json-schema.org/draft/2020-12/schema#";
        };
    };
};
export { BankAccountResolvePost, BankBranchesGet, BanksGet, ChargebackPut, ChargebacksGetById, ChargebacksList, ChargebacksPost, ChargesGet, ChargesList, ChargesPost, ChargesPut, ChargesV2WebhookUpdatePost, CheckoutSessionsGet, CheckoutSessionsList, CheckoutSessionsPost, CustomersCreate, CustomersGet, CustomersList, CustomersPut, CustomersSearch, DirectTransfersPost, FeesGet, GetWalletStatement, IdentityTokenExchange, MobileNetworksGet, OrchestrationDirectChargePost, OrchestrationDirectOrderPost, OrdersGet, OrdersList, OrdersPost, OrdersPut, PaymentMethodsGet, PaymentMethodsList, PaymentMethodsPost, ProfileActionsPost, ProfileCredentialsActionsPost, ProfileCredentialsActionsPut, ProfileCredentialsGet, ProfileGet, RedirectSessionsChargesPut, RefundsGet, RefundsList, RefundsPost, SettlementGet, SettlementList, TransferGet, TransferPostRetry, TransferPut, TransferRatesGet, TransferRatesPost, TransfersList, TransfersPost, TransfersRecipientsCreate, TransfersRecipientsDelete, TransfersRecipientsGet, TransfersRecipientsList, TransfersSendersCreate, TransfersSendersDelete, TransfersSendersGet, TransfersSendersList, VirtualAccountGet, VirtualAccountsList, VirtualAccountsPost, VirtualAccountsPut, WalletAccountResolvePost, WebhookEndpointsDelete, WebhookEndpointsList, WebhookEndpointsPost, WebhookEndpointsPut };
